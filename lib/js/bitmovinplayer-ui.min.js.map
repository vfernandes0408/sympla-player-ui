{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/ts/arrayutils.ts","src/ts/audiotrackutils.ts","src/ts/browserutils.ts","src/ts/components/adclickoverlay.ts","src/ts/components/admessagelabel.ts","src/ts/components/adskipbutton.ts","src/ts/components/airplaytogglebutton.ts","src/ts/components/audioqualityselectbox.ts","src/ts/components/audiotracklistbox.ts","src/ts/components/audiotrackselectbox.ts","src/ts/components/bufferingoverlay.ts","src/ts/components/button.ts","src/ts/components/caststatusoverlay.ts","src/ts/components/casttogglebutton.ts","src/ts/components/castuicontainer.ts","src/ts/components/clickoverlay.ts","src/ts/components/closebutton.ts","src/ts/components/component.ts","src/ts/components/container.ts","src/ts/components/controlbar.ts","src/ts/components/errormessageoverlay.ts","src/ts/components/fullscreentogglebutton.ts","src/ts/components/hugeplaybacktogglebutton.ts","src/ts/components/hugereplaybutton.ts","src/ts/components/itemselectionlist.ts","src/ts/components/label.ts","src/ts/components/listbox.ts","src/ts/components/listselector.ts","src/ts/components/metadatalabel.ts","src/ts/components/pictureinpicturetogglebutton.ts","src/ts/components/playbackspeedselectbox.ts","src/ts/components/playbacktimelabel.ts","src/ts/components/playbacktogglebutton.ts","src/ts/components/playbacktoggleoverlay.ts","src/ts/components/recommendationoverlay.ts","src/ts/components/seekbar.ts","src/ts/components/seekbarbufferlevel.ts","src/ts/components/seekbarcontroller.ts","src/ts/components/seekbarlabel.ts","src/ts/components/selectbox.ts","src/ts/components/settingspanel.ts","src/ts/components/settingspanelitem.ts","src/ts/components/settingspanelpage.ts","src/ts/components/settingspanelpagebackbutton.ts","src/ts/components/settingspanelpagenavigatorbutton.ts","src/ts/components/settingspanelpageopenbutton.ts","src/ts/components/settingstogglebutton.ts","src/ts/components/spacer.ts","src/ts/components/subtitlelistbox.ts","src/ts/components/subtitleoverlay.ts","src/ts/components/subtitleselectbox.ts","src/ts/components/subtitlesettings/backgroundcolorselectbox.ts","src/ts/components/subtitlesettings/backgroundopacityselectbox.ts","src/ts/components/subtitlesettings/characteredgeselectbox.ts","src/ts/components/subtitlesettings/fontcolorselectbox.ts","src/ts/components/subtitlesettings/fontfamilyselectbox.ts","src/ts/components/subtitlesettings/fontopacityselectbox.ts","src/ts/components/subtitlesettings/fontsizeselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingselectbox.ts","src/ts/components/subtitlesettings/subtitlesettingslabel.ts","src/ts/components/subtitlesettings/subtitlesettingsmanager.ts","src/ts/components/subtitlesettings/subtitlesettingspanelpage.ts","src/ts/components/subtitlesettings/subtitlesettingsresetbutton.ts","src/ts/components/subtitlesettings/windowcolorselectbox.ts","src/ts/components/subtitlesettings/windowopacityselectbox.ts","src/ts/components/timelinemarkershandler.ts","src/ts/components/titlebar.ts","src/ts/components/togglebutton.ts","src/ts/components/tvnoisecanvas.ts","src/ts/components/uicontainer.ts","src/ts/components/videoqualityselectbox.ts","src/ts/components/volumecontrolbutton.ts","src/ts/components/volumeslider.ts","src/ts/components/volumetogglebutton.ts","src/ts/components/vrtogglebutton.ts","src/ts/components/watermark.ts","src/ts/demofactory.ts","src/ts/dom.ts","src/ts/errorutils.ts","src/ts/eventdispatcher.ts","src/ts/focusvisibilitytracker.ts","src/ts/guid.ts","src/ts/imageloader.ts","src/ts/localization/i18n.ts","src/ts/localization/languages/de.json","src/ts/localization/languages/en.json","src/ts/main.ts","src/ts/mobilev3playerapi.ts","src/ts/playerutils.ts","src/ts/storageutils.ts","src/ts/stringutils.ts","src/ts/subtitleutils.ts","src/ts/timeout.ts","src/ts/uifactory.ts","src/ts/uimanager.ts","src/ts/uiutils.ts","src/ts/volumecontroller.ts","src/ts/vttutils.ts"],"names":["f","exports","module","define","amd","g","window","global","self","this","bitmovin","playerui","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","ArrayUtils","remove","array","item","index","indexOf","splice","i18n_1","AudioTrackSwitchHandler","player","element","uimanager","_this","addAudioTrack","event","audioTrack","track","listElement","hasItem","id","addItem","i18n","getLocalizer","label","removeAudioTrack","removeItem","selectCurrentAudioTrack","currentAudioTrack","getAudio","selectItem","refreshAudioTracks","audioTracks","getAvailableAudio","audioTrackToListItem","key","synchronizeItems","map","bindSelectionEvent","bindPlayerEvents","prototype","onItemSelected","subscribe","_","value","setAudio","on","PlayerEvent","AudioChanged","SourceUnloaded","PeriodSwitched","AudioAdded","AudioRemoved","getConfig","events","onUpdated","BrowserUtils","Object","defineProperty","windowExists","navigator","userAgent","test","platform","maxTouchPoints","msMaxTouchPoints","clickoverlay_1","AdClickOverlay","_super","__extends","configure","clickThroughCallback","AdStarted","ad","setUrl","clickThroughUrl","clickThroughUrlOpened","adFinishedHandler","AdFinished","AdSkipped","AdError","onClick","pause","ClickOverlay","label_1","stringutils_1","AdMessageLabel","config","mergeConfig","cssClass","text","updateMessageHandler","setText","StringUtils","replaceAdMessagePlaceholders","performLocalization","adStartHandler","uiConfig","message","TimeChanged","adEndHandler","off","Label","button_1","AdSkipButton","untilSkippableMessage","skippableMessage","skipOffset","updateSkipMessageHandler","show","getCurrentTime","disable","enable","skippableAfter","hide","ads","skip","Button","togglebutton_1","AirPlayToggleButton","isAirplayAvailable","showAirplayTargetPicker","console","log","airPlayAvailableHandler","airPlayChangedHandler","isAirplayActive","AirplayAvailable","AirplayChanged","ToggleButton","selectbox_1","AudioQualitySelectBox","cssClasses","selectCurrentAudioQuality","getAudioQuality","updateAudioQualities","audioQualities","getAvailableAudioQualities","clearItems","_i","audioQualities_1","audioQuality","sender","setAudioQuality","AudioQualityChanged","AudioQualityAdded","AudioQualityRemoved","SelectBox","listbox_1","audiotrackutils_1","AudioTrackListBox","ListBox","AudioTrackSelectBox","container_1","component_1","timeout_1","BufferingOverlay","indicators","Component","tag","role","hidden","components","showDelayMs","overlayShowTimeout","Timeout","showOverlay","start","hideOverlay","clear","StallStarted","StallEnded","Play","Playing","Paused","Seek","Seeked","TimeShift","TimeShifted","isStalled","Container","dom_1","eventdispatcher_1","buttonEvents","EventDispatcher","tabIndex","toDomElement","buttonElementAttributes","aria-label","ariaLabel","class","getCssClasses","type","aria-pressed","tabindex","toString","buttonElement","DOM","append","prefixCss","html","onClickEvent","getDomElement","find","dispatch","getEvent","CastStatusOverlay","statusLabel","CastWaitingForDevice","castDeviceName","castPayload","deviceName","CastStarted","CastStopped","CastToggleButton","isCastAvailable","isCasting","castStop","castVideo","castAvailableHander","CastAvailable","uicontainer_1","CastUIContainer","isUiShown","hideUi","onControlsHide","castUiHideTimeout","hideDelay","showUi","onControlsShow","showUiPermanently","showUiWithTimeout","showUiAfterSeek","isPlaying","release","UIContainer","initialize","url","data","open","getUrl","undefined","CloseButton","target","guid_1","componentEvents","onShow","onHide","onHoverChanged","onEnabled","onDisabled","Guid","next","cssPrefix","disabled","isHidden","isDisabled","onComponentShow","onComponentHide","onHoverChangedEvent","setAriaLabel","setAriaAttr","name","attr","defaults","base","assign","flattenedArray","concat","css","join","trim","cssClassOrId","addClass","CLASS_HIDDEN","onHideEvent","removeClass","onShowEvent","isShown","toggleHidden","CLASS_DISABLED","onDisabledEvent","onEnabledEvent","isEnabled","isHovered","hovered","arrayutils_1","componentsToAdd","componentsToRemove","addComponent","component","push","removeComponent","getComponents","removeComponents","_a","slice","updateComponents","shift","innerContainerElement","containerElement","innerContainer","initialComponent","uiutils_1","spacer_1","browserutils_1","ControlBar","hoverStackCount","disableAutoHideWhenHovered","isMobile","UIUtils","traverseTree","Spacer","args","onPreviewControlsHide","cancel","customizeErrorMessage","errorMessages","customMessage","tvnoisecanvas_1","errorutils_1","mobilev3playerapi_1","ErrorMessageOverlay","errorLabel","tvNoiseBackground","TvNoiseCanvas","handleErrorMessage","customizedMessage","messages","isMobileV3PlayerAPI","errorEventHandler","ErrorUtils","defaultMobileV3ErrorMessageTranslator","MobileV3PlayerEvent","PlayerError","SourceError","defaultWebErrorMessageTranslator","SourceLoaded","stop","FullscreenToggleButton","isFullScreenAvailable","isViewModeAvailable","ViewMode","Fullscreen","fullscreenStateHandler","getViewMode","fullscreenAvailabilityChangedHandler","ViewModeChanged","ViewModeAvailabilityChanged","targetViewMode","Inline","setViewMode","playbacktogglebutton_1","HugePlaybackToggleButton","togglePlayback","isPlayInitiated","play","toggleFullscreen","firstPlay","clickTime","doubleClickTime","now","Date","setTimeout","Warning","WarningCode","PLAYBACK_COULD_NOT_BE_STARTED","suppressPlayButtonTransitionAnimation","setTransitionAnimationsEnabled","onToggle","subscribeOnce","isAutoplayEnabled","playback","Boolean","autoplay","isAutoplayUpcoming","getSource","enabled","noTransitionAnimationsClass","hasClass","PlaybackToggleButton","HugeReplayButton","listselector_1","ItemSelectionList","isActive","items","updateDomItems","selectedValue","empty","selectedListItem","listItem","CLASS_SELECTED","deselectItem","this_1","String","onItemSelectedEvent","onItemAddedEvent","selectedItem","onItemRemovedEvent","ListSelector","labelEvents","onTextChanged","tagName","for","labelElement","localizedText","onTextChangedEvent","getText","clearText","isEmpty","removeListBoxDomItem","getComponentForKey","addListBoxDomItem","newItem","getItemForKey","listBoxItemButton_1","buildListBoxItemButton","handleSelectionChange","listBoxElement","refreshSelectedItem","onItemAdded","onItemRemoved","createListBoxDomItems","ListBoxItemButton","c","onClass","offClass","listSelectorEvents","getItemIndex","parseInt","getItems","sortedInsert","__assign","filter","translator","findIndex","entry","getSelectedItem","newItems","forEach","items_1","itemCount","keys","MetadataLabelContent","MetadataLabel","content","toLowerCase","uiconfig","init","Title","metadata","title","Description","description","unload","PictureInPictureToggleButton","isPictureInPictureAvailable","PictureInPicture","pictureInPictureStateHandler","pictureInPictureAvailabilityChangedHandler","PlaybackSpeedSelectBox","defaultPlaybackSpeeds","addDefaultItems","setPlaybackSpeed","parseFloat","setDefaultValue","playbackSpeed","getPlaybackSpeed","setSpeed","PlaybackSpeedChanged","speed","customItems","sort","PlaybackTimeLabelMode","playerutils_1","PlaybackTimeLabel","timeLabelMode","CurrentAndTotalTime","hideInLivePlayback","live","liveCssClass","liveEdgeCssClass","minWidth","liveClickHandler","timeShift","updateLiveState","isLive","updateLiveTimeshiftState","unsubscribe","isTimeshifted","getTimeShift","isTimeshiftAvailable","getMaxTimeShift","isPaused","liveStreamDetector","PlayerUtils","LiveStreamDetector","onLiveChanged","detect","playbackTimeHandler","getDuration","Infinity","setTime","getCurrentTimeRelativeToSeekableRange","width","min-width","timeFormat","Math","abs","FORMAT_HHMMSS","FORMAT_MMSS","playbackSeconds","durationSeconds","currentTime","secondsToTime","totalTime","CurrentTime","TotalTime","RemainingTime","remainingTime","setTimeFormat","onAriaLabel","offAriaLabel","handleClickEvent","isSeeking","playbackStateHandler","PlaybackFinished","isTimeShiftAvailable","CLASS_STOPTOGGLE","timeShiftDetector","TimeShiftAvailabilityDetector","onTimeShiftAvailabilityChanged","onSeek","onSeeked","hugeplaybacktogglebutton_1","PlaybackToggleOverlay","playbackToggleButton","hugereplaybutton_1","RecommendationOverlay","replayButton","clearRecommendations","RecommendationItem","setupRecommendations","recommendations","recommendations_1","itemConfig","itemElement","href","background-image","thumbnail","bgElement","titleElement","timeElement","duration","seekbarcontroller_1","timelinemarkershandler_1","seekbarbufferlevel_1","SeekBar","playbackPositionPercentage","isUserSeeking","seekBarEvents","onSeekPreview","seekWhileScrubbing","scrubbing","seek","position","percentage","maxTimeShift","seekableRangeStart","getSeekableRangeStart","relativeSeekTarget","absoluteSeekTarget","keyStepIncrements","leftRight","upDown","vertical","smoothPlaybackPositionUpdateIntervalMs","snappingRange","enableSeekPreview","hasLabel","getLabel","setAriaSliderMinMax","min","max","setAriaSliderValues","seekBarType","SeekBarType","Live","timeshiftValue","ceil","Vod","ariaValueText","secondsToText","floor","getPlaybackPositionPercentage","getRelativeCurrentTime","updateBufferLevel","bufferLoadedPercentageLevel","getMinBufferLevel","setBufferPosition","configureSeek","setPosition","seekBarBackdrop","SeekBarController","volumeController","setSeekBarControls","Volume","isPlayerSeeking","playbackPositionHandler","forceUpdate","SegmentRequestFinished","setPlaybackPosition","isInInitialStartupState","SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED","isNeitherPausedNorPlaying","Ready","configureLivePausedTimeshiftUpdater","onPlayerSeek","setSeeking","onPlayerSeeked","restorePlayingState","subscribeRateLimited","hasTimeShift","switchVisibility","refreshPlaybackPosition","smoothPlaybackPositionUpdater","timeShiftAvailable","PlayerResized","onConfigured","seekbarSnappingRange","setSeekPosition","configureSmoothPlaybackPositionUpdater","initializeTimelineMarkers","timelineMarkerConfig","timelineMarkersHandler","TimelineMarkersHandler","seekBar","seekBarMarkersContainer","pausedTimeshiftUpdater","currentTimeSeekBar","currentTimePlayer","updateIntervalMs","error","PlayerAPINotAvailableError","currentTimeDelta","startSmoothPlaybackPositionUpdater","stopSmoothPlaybackPositionUpdater","seekBarContainer","seekBarBufferLevel","seekBarBufferPosition","seekBarPlaybackPosition","seekBarPlaybackPositionMarker","seekBarSeekPosition","seekBarChapterMarkersContainer","seeking","mouseTouchMoveHandler","preventDefault","vr","stopPropagation","targetPercentage","getOffset","onSeekPreviewEvent","mouseTouchUpHandler","document","snappedChapter","getMarkerAtPosition","onSeekedEvent","isTouchEvent","isTouchSupported","onSeekEvent","getHorizontalOffset","eventPageX","elementOffsetPx","offset","left","widthPx","offsetPx","sanitizeOffset","getVerticalOffset","eventPageY","top","height","changedTouches","pageY","touches","pageX","MouseEvent","warn","percent","totalSize","px","style","transform","-ms-transform","-webkit-transform","scale","CLASS_SEEKING","snappedMarker","seekPositionPercentage","marker","TouchEvent","playerDuration","videoBufferLength","getVideoBufferLength","audioBufferLength","getAudioBufferLength","bufferLength","Number","MAX_VALUE","coerceValueIntoRange","range","cb","arrowKeyControls","currentValue","valueUpdate","controlValue","right","up","down","home","end","seekBarControls","volumeTransition","startTransition","getVolume","finish","bind","domElement","controls","keyCode","KeyCode","LeftArrow","RightArrow","UpArrow","DownArrow","Home","End","Space","imageloader_1","SeekBarLabel","appliedMarkerCssClasses","handleSeekPreview","timeShiftPreview","wallClockTime","targetTimeShift","currentTimeShift","setThumbnail","getThumbnail","time","setTitleText","timeLabel","titleLabel","thumbnailImageLoader","ImageLoader","uiManager","seconds","thumbnailElement","display","load","x","thumbnailCssSprite","thumbnailCssSingleImage","thumbnailCountX","thumbnailCountY","thumbnailIndexX","thumbnailIndexY","y","sizeX","sizeY","offsetX","offsetY","aspectRatio","padding-bottom","background-size","background-position","selectElement","val","optionElement","NavigationDirection","settingspanelpage_1","SettingsPanel","navigationStack","settingsPanelEvents","onSettingsStateChanged","pageTransitionAnimation","activePage","getRootPage","hideHoveredSelectBoxes","hideTimeout","reset","onInactiveEvent","resetNavigation","onActiveEvent","onSettingsStateChangedEvent","updateActivePageClass","getActivePage","setActivePageIndex","setActivePage","getPages","targetPage","navigateToPage","Forwards","popToRootSettingsPanelPage","popSettingsPanelPage","Backwards","rootPageHasActiveSettings","hasActiveSettings","SettingsPanelPage","page","CLASS_ACTIVE_PAGE","resetNavigationOnShow","sourcePage","rootPage","animateNavigation","direction","skipAnimation","pop","settingsPanelDomElement","settingsPanelHTMLElement","get","settingsPanelWidth","scrollWidth","settingsPanelHeight","scrollHeight","targetPageHtmlElement","clone","cloneNode","parentNode","appendChild","targetSettingsPanelWidth","targetSettingsPanelHeight","parentElement","removeChild","forceBrowserReflow","offsetLeft","getComputedItems","setting","selectBox_1","oldDisplay_1","requestAnimationFrame","allItems","apply","videoqualityselectbox_1","audioqualityselectbox_1","playbackspeedselectbox_1","SettingsPanelItem","settingsPanelItemEvents","onActiveChanged","handleConfigItemChanged","minItemsToDisplay","VideoQualitySelectBox","hasAutoItem","playbackSpeedSelectionEnabled","onActiveChangedEvent","settingspanelitem_1","settingsPanelPageEvents","onActive","onInactive","settingsStateChangedHandler","lastShownItem","CLASS_LAST","activeItems","isIOS","isMacIntel","focusToFirstInput","settingspanelpagenavigatorbutton_1","SettingsPanelPageBackButton","popPage","SettingsPanelPageNavigatorButton","container","pushTargetPage","SettingsPanelPageOpenButton","settingspanel_1","SettingsToggleButton","visibleSettingsPanels","settingsPanel","autoHideWhenNoActiveSettings","settingsPanelItemsChangedHandler","subtitleutils_1","SubtitleListBox","SubtitleSwitchHandler","controlbar_1","vttutils_1","SubtitleOverlay","preprocessLabelEventCallback","previewSubtitleActive","previewSubtitle","SubtitleLabel","subtitleManager","ActiveSubtitleManager","subtitleContainerManager","SubtitleRegionContainerManager","CueEnter","generateLabel","cueEnter","removeLabel","addLabel","size","CueUpdate","labelToReplace","cueUpdate","replaceLabel","CueExit","labelToRemove","cueExit","hasCues","subtitleClearHandler","SubtitleEnabled","SubtitleDisabled","CLASS_CONTROLBAR_VISIBLE","configureCea608Captions","row","column","generateImageTagText","image","vtt","region","regionStyle","fontSize","fontLetterSpacing","fontSizeCalculationRequired","updateCEA608FontSize","dummyLabel","font-size","line-height","visibility","dummyLabelCharWidth","dummyLabelCharHeight","fontSizeRatio","subtitleOverlayWidth","subtitleOverlayHeight","CEA608_NUM_COLUMNS","CEA608_NUM_ROWS","gridSlotWidth","letter-spacing","CLASS_CEA_608","CEA608_COLUMN_OFFSET","CEA608_ROW_OFFSET","enablePreviewSubtitleLabel","removePreviewSubtitleLabel","activeSubtitleCueMap","activeSubtitleCueCount","calculateId","addCueToMap","popCueFromMap","activeSubtitleCues","activeSubtitleCue","imageData","imgTag","src","outerHTML","getCues","cue","cueCount","subtitleOverlay","subtitleRegionContainers","getRegion","regionContainerId","regionName","overlaySize","regionContainer","SubtitleRegionContainer","regionContainerId_1","previousLabel","newLabel","labelCount","labelToAdd","VttUtils","setVttRegionStyles","setVttCueBoxStyles","SubtitleSelectBox","subtitlesettingselectbox_1","BackgroundColorSelectBox","setColorAndOpacity","settingsManager","backgroundColor","isSet","backgroundOpacity","toggleOverlayClass","onChanged","property","SubtitleSettingSelectBox","BackgroundOpacitySelectBox","CharacterEdgeSelectBox","characterEdge","FontColorSelectBox","fontColor","fontOpacity","FontFamilySelectBox","fontFamily","FontOpacitySelectBox","FontSizeSelectBox","overlay","currentCssClass","SubtitleSettingsLabel","opener","storageutils_1","SubtitleSettingsManager","_properties","SubtitleSettingsProperty","windowColor","windowOpacity","userSettings","localStorageKey","DummyComponent","instance","propertyName","save","StorageUtils","setObject","getObject","_instance","manager","_manager","_onChanged","_value","onChangedEvent","subtitlesettingsmanager_1","fontsizeselectbox_1","fontfamilyselectbox_1","fontcolorselectbox_1","fontopacityselectbox_1","characteredgeselectbox_1","backgroundcolorselectbox_1","backgroundopacityselectbox_1","windowcolorselectbox_1","windowopacityselectbox_1","subtitlesettingsresetbutton_1","settingspanelpagebackbutton_1","SubtitleSettingsPanelPage","WindowColorSelectBox","WindowOpacitySelectBox","SubtitleSettingsResetButton","getMarkerPositions","markerPosition","getMarkerTime","markerDuration","isNaN","getSeekableRangeRespectingLive","shouldRemoveMarker","shouldProcessMarkers","validToProcess","hasMarkers","markers","getSeekBarWidth","markersContainer","timelineMarkers","configureMarkers","clearMarkers","AdBreakStarted","AdBreakFinished","updateMarkers","updateMarkersDOM","onRelease","hasDuration","intervalMarkerMatch","positionMarkerMatch","removeMarkerFromConfig","_marker","filterRemovedMarkers","seekbarMarker","matchingMarker","removeMarkerFromDOM","updateMarkerDOM","newMarker","createMarkerDOM","getMarkerCssProperties","seekBarWidthPx","positionInPx","cssProperties","markerWidthPx","round","markerClasses","markerElement","data-marker-time","data-marker-title","imageUrl","removeImage","imageElement_1","handler","Destroy","metadatalabel_1","TitleBar","keepHiddenWithoutMetadata","shouldBeShown","hasMetadataText","checkMetadataTextAndUpdateVisibility","toggleButtonEvents","onToggleOn","onToggleOff","defaultConfig","isOff","onState","onToggleEvent","onToggleOnEvent","isOn","onToggleOffEvent","toggle","canvasWidth","canvasHeight","interferenceHeight","lastFrameUpdate","frameInterval","useAnimationFrame","canvas","canvasElement","canvasContext","getContext","noiseAnimationWindowPos","renderFrame","cancelAnimationFrame","frameUpdateHandlerId","clearTimeout","getTime","scheduleNextRender","currentPixelOffset","noiseImage","createImageData","random","putImageData","playerStateChange","userInteractionEventSource","configureUIShowHide","configurePlayerStates","playerState","isFirstTouch","hidingPrevented","hidePlayerStateExceptions","uiHideTimeout","previewHideEventArgs","userInteractionEvents","state","stateClassNames","PlayerState","enumName","STATE_PREFIX","removeStates","Idle","Prepared","Finished","updateState","getState","FULLSCREEN","BUFFERING","REMOTE_CONTROL","CONTROLS_HIDDEN","CONTROLS_SHOWN","updateLayoutSizeClasses","substring","getContainer","createElement","flex","labeling","resolution","selectCurrentVideoQuality","getVideoQuality","updateVideoQualities","videoQualities","getAvailableVideoQualities","hasAuto","getStreamType","videoQualities_1","videoQuality","setVideoQuality","VideoQualityChanged","VideoQualityAdded","VideoQualityRemoved","volumeslider_1","volumetogglebutton_1","VolumeControlButton","volumeToggleButton","VolumeToggleButton","volumeSlider","VolumeSlider","getVolumeToggleButton","getVolumeSlider","volumeSliderHideTimeout","volumeSliderHovered","seekbar_1","updateVolumeWhileScrubbing","update","hideIfVolumeControlProhibited","setVolumeAriaSliderValues","detectVolumeControlAvailability","muted","volume","dummyVideoElement","volumeLevelTens","toggleMuted","VRToggleButton","isVRConfigured","source","isVRStereoAvailable","vrStateHandler","ev","VR_RENDERING_ERROR","getStereo","vrButtonVisibilityHandler","VRStereoChanged","setStereo","Watermark","vrtogglebutton_1","settingstogglebutton_1","playbacktimelabel_1","airplaytogglebutton_1","errormessageoverlay_1","casttogglebutton_1","fullscreentogglebutton_1","recommendationoverlay_1","caststatusoverlay_1","watermark_1","subtitleoverlay_1","seekbarlabel_1","playbacktoggleoverlay_1","pictureinpicturetogglebutton_1","uimanager_1","titlebar_1","bufferingoverlay_1","subtitlelistbox_1","audiotracklistbox_1","uifactory_1","DemoFactory","buildDemoWithSeparateAudioSubtitlesButtons","UIManager","ui","UIFactory","modernSmallScreenAdsUI","condition","context","documentWidth","isAd","adRequiresUi","modernAdsUI","modernSmallScreenUI","modernUIWithSeparateAudioSubtitlesButtons","subtitleListBox","subtitleSettingsPanel","audioTrackListBox","audioTrackSettingsPanel","controlBar","something","attributes","Array","HTMLElement","elements","Document","attributeName","attributeValue","setAttribute","selector","findChildElements","findChildElementsOfElement","childElements","querySelectorAll","allChildElements","inputElements","focus","scrollTo","arguments","setHtml","getHtml","innerHTML","HTMLSelectElement","HTMLInputElement","attribute","setAttr","getAttr","removeAttr","removeAttribute","getAttribute","dataAttribute","setData","getData","childElement","parent","elementRect","getBoundingClientRect","htmlRect","body","offsetWidth","offsetHeight","eventName","eventHandler","split","addEventListener","removeEventListener","className","classList","classNames","add","replace","RegExp","contains","propertyNameOrCollection","setCss","getCss","propertyValueCollection","setCssCollection","getComputedStyle","ruleValueCollection","defaultErrorMessages","1000","1001","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1300","1301","1302","1303","1304","1400","1401","1402","1403","1404","2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2100","2101","3000","3001","3002","3003","3004","3100","errorMessage","listeners","listener","EventListenerWrapper","rateMs","RateLimitedEventListenerWrapper","subscribedListener","unsubscribeAll","listenersToRemove","listeners_1","fire","isOnce","listenersToRemove_1","listenerToRemove","once","eventListener","startRateLimiting","rateLimitTimout","lastSeenEvent","fireSuper","rateLimitingEventListener","shouldFireEvent","isBitmovinUi","bitmovinUiPrefix","isHtmlElement","DOMTokenList","FocusVisibleCssClassName","FocusVisibilityTracker","lastInteractionWasKeyboard","onKeyDown","metaKey","altKey","ctrlKey","onMouseOrPointerOrTouch","onFocus","onBlur","eventHandlerMap","mousedown","pointerdown","touchstart","keydown","blur","registerEventListeners","event_1","unregisterEventListeners","event_2","guid","loadedCallback","loaded","callLoadedCallback","state_1","de_json_1","__importDefault","en_json_1","defaultVocabularies","en","default","de","defaultLocalizationConfig","language","vocabularies","I18n","setConfig","mergedConfig","detectBrowserLanguage","mergeVocabulariesWithDefaultVocabularies","initializeLanguage","initializeVocabulary","containsLanguage","hasOwnProperty","rawVocabularies","reduce","mergedVocabularies","vocabulary","browserLanguageDetectionEnabled","userLanguage","shortenedUserLanguage","vocab","lang","replaceVariableWithPlaceholderIfExists","matches","match","m","str","vocabularyString","settings.video.quality","settings.audio.quality","settings.audio.track","playPause","close","settings.audio.mute","settings.audio.volume","pictureInPicture","appleAirplay","googleCast","settings","fullscreen","settings.subtitles","settings.subtitles.font.size","settings.subtitles.font.family","settings.subtitles.font.color","settings.subtitles.font.opacity","settings.subtitles.characterEdge","settings.subtitles.background.color","settings.subtitles.background.opacity","settings.subtitles.window.color","settings.subtitles.window.opacity","settings.time.hours","settings.time.minutes","settings.time.seconds","back","replay","ads.remainingTime","colors.white","colors.black","colors.red","colors.green","colors.blue","colors.yellow","subtitle.example","subtitle.select","playingOn","connectingTo","watermarkLink","seekBar.value","seekBar.timeshift","seekBar.durationText","colors.cyan","colors.magenta","settings.subtitles.characterEdge.raised","settings.subtitles.characterEdge.depressed","settings.subtitles.characterEdge.uniform","settings.subtitles.characterEdge.dropshadowed","settings.subtitles.font.family.monospacedserif","settings.subtitles.font.family.proportionalserif","settings.subtitles.font.family.monospacedsansserif","settings.subtitles.font.family.proportionalsansserif","settings.subtitles.font.family.casual","settings.subtitles.font.family.cursive","settings.subtitles.font.family.smallcapital","auto","normal","version","enumerable","UIInstanceManager","demofactory_1","itemselectionlist_1","audiotrackselectbox_1","subtitleselectbox_1","volumecontrolbutton_1","adskipbutton_1","admessagelabel_1","adclickoverlay_1","castuicontainer_1","closebutton_1","subtitlesettingslabel_1","settingspanelpageopenbutton_1","subtitlesettingspanelpage_1","TypeError","hasEnded","defaultValue","getSeekableRange","currentTimeshift","maxTimeshift","timeShiftAvailabilityChangedEvent","timeShiftAvailableNow","liveChangedEvent","liveDetector","isAndroid","isChrome","DurationChanged","liveNow","hasLocalStorage","hasLocalStorageCache","storage","setItem","DOMException","localStorage","getItem","JSON","stringify","json","parse","totalSeconds","format","isNegative","hours","minutes","leftPadWithZeros","num","substr","adMessage","adMessagePlaceholderRegex","formatString","formatNumber","formatStringValidationRegex","leadingZeroesRegex","decimalPlacesRegex","leadingZeroes","leadingZeroesMatches","numDecimalPlaces","decimalPlacesMatches","timeString","toFixed","addSubtitle","subtitle","removeSubtitle","selectCurrentSubtitle","subtitles","currentSubtitle","list","SUBTITLES_OFF_KEY","clearSubtitles","refreshSubtitles","offListItem","subtitleToListItem","__spreadArrays","SubtitleAdded","SubtitleRemoved","delay","callback","repeat","timeoutOrIntervalId","active","clearInternal","setInterval","clearInterval","buildDefaultUI","buildModernUI","buildDefaultSmallScreenUI","buildModernSmallScreenUI","buildDefaultCastReceiverUI","buildModernCastReceiverUI","modernUI","mainSettingsPanelPage","newControlBar","subtitleSettingsPanelPage","subtitleSettingsOpenButton","subtitleSelectBox","modernCastReceiverUI","getAllPropertyNames","names","newNames","getOwnPropertyNames","getPrototypeOf","volumecontroller_1","focusvisibilitytracker_1","playerUiOrUiVariants","onUiVariantResolve","playerUi","uiVariants","managerPlayerWrapper","PlayerWrapper","autoUiVariantResolve","VolumeController","getPlayer","updateConfig","playerSourceConfig","playerSourceUiConfig","updateSource","wrappedPlayer","PlaylistTransition","uiContainerElement","uiInstanceManagers","uiVariantsWithoutCondition","uiVariant","InternalUIInstanceManager","adStartedEvent","resolveUiVariant","isLinear","linearAd","requestsUi","currentUi","getWrappedPlayer","fireEventInUI","focusVisibilityTracker","localize","setLocalizationConfig","localizationConfig","getUiVariants","switchToUiVariant","uiVariantIndex","nextUi","uiVariantChanged","getUI","isConfigured","addUi","defaultContext","isFullscreen","clientWidth","switchingContext","nextUiVariant","dom","configureControls","releaseUi","releaseControls","clearEventHandlers","uiInstanceManager","getTimelineMarkers","addTimelineMarker","timelineMarker","removeTimelineMarker","playerWrapper","configureControlsTree","configured","configuredComponents","configuredComponents_1","constructor","releaseControlsTree","released","isReleased","childComponent","eventHandlers","objectProtoPropertyNames","namesToIgnore","members","methods","properties","members_1","member","wrapper","methods_1","method","_b","properties_1","propertyDescriptor","propertyDescriptor_1","getOwnPropertyDescriptor","set","eventType","playerEventData","timestamp","uiSourced","visit","recursiveTreeWalker","storeVolume","VolumeChanged","Muted","Unmuted","setVolume","issuerName","setMuted","mute","unmute","isMuted","recallVolume","storedVolume","VolumeTransition","playerMuted","playerVolume","uiMuted","uiVolume","controller","Direction","DirectionPair","Map","Top","Bottom","Left","Right","setDefaultVttStyles","cueContainerDom","setVttLineAlign","lineAlign","setVttLine","subtitleOverLaySize","line","relativeLinePosition","snapToLines","targetLine","setVttWritingDirection","subtitleOverlaySize","setVttPositionAlign","positionAlign","cueContainer","textAlign","align","containerSize","regionContainerDom","regionPositionX","viewportAnchorX","regionAnchorX","regionPositionY","viewportAnchorY","lines","regionAnchorY"],"mappings":"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","file":"bitmovinplayer-ui.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export namespace ArrayUtils {\n  /**\n   * Removes an item from an array.\n   * @param array the array that may contain the item to remove\n   * @param item the item to remove from the array\n   * @returns {any} the removed item or null if it wasn't part of the array\n   */\n  export function remove<T>(array: T[], item: T): T | null {\n    let index = array.indexOf(item);\n\n    if (index > -1) {\n      return array.splice(index, 1)[0];\n    } else {\n      return null;\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { AudioTrackEvent, PlayerAPI, AudioTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all audio tracks related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class AudioTrackSwitchHandler {\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshAudioTracks();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      this.player.setAudio(value);\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    // Update selection when selected track has changed\n    this.player.on(this.player.exports.PlayerEvent.AudioChanged, this.selectCurrentAudioTrack);\n    // Update tracks when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.refreshAudioTracks);\n    // Update tracks when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshAudioTracks);\n    // Update tracks when a track is added or removed\n    this.player.on(this.player.exports.PlayerEvent.AudioAdded, this.addAudioTrack);\n    this.player.on(this.player.exports.PlayerEvent.AudioRemoved, this.removeAudioTrack);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshAudioTracks);\n  }\n\n  private addAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (!this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.addItem(audioTrack.id, i18n.getLocalizer(audioTrack.label), true);\n    }\n  };\n\n  private removeAudioTrack = (event: AudioTrackEvent) => {\n    const audioTrack = event.track;\n    if (this.listElement.hasItem(audioTrack.id)) {\n      this.listElement.removeItem(audioTrack.id);\n    }\n  };\n\n  private selectCurrentAudioTrack = () => {\n    let currentAudioTrack = this.player.getAudio();\n\n    // HLS streams don't always provide this, so we have to check\n    if (currentAudioTrack) {\n      this.listElement.selectItem(currentAudioTrack.id);\n    }\n  };\n\n  private refreshAudioTracks = () => {\n    const audioTracks = this.player.getAvailableAudio();\n    const audioTrackToListItem = (audioTrack: AudioTrack): ListItem => {\n      return { key: audioTrack.id, label: audioTrack.label };\n    };\n\n    this.listElement.synchronizeItems(audioTracks.map(audioTrackToListItem));\n    this.selectCurrentAudioTrack();\n  };\n}\n","export class BrowserUtils {\n\n  // isMobile only needs to be evaluated once (it cannot change during a browser session)\n  // Mobile detection according to Mozilla recommendation: \"In summary, we recommend looking for the string “Mobi”\n  // anywhere in the User Agent to detect a mobile device.\"\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n  static get isMobile(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Mobi/.test(navigator.userAgent);\n  }\n\n  static get isChrome(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Chrome/.test(navigator.userAgent);\n  }\n\n  static get isAndroid(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /Android/.test(navigator.userAgent);\n  }\n\n  static get isIOS(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && /iPad|iPhone|iPod/.test(navigator.userAgent);\n  }\n\n  static get isMacIntel(): boolean {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return navigator && navigator.userAgent && navigator.platform === 'MacIntel';\n  }\n\n  // https://hacks.mozilla.org/2013/04/detecting-touch-its-the-why-not-the-how/\n  static get isTouchSupported() {\n    if (!this.windowExists()) {\n      return false;\n    }\n    return 'ontouchstart' in window || navigator && navigator.userAgent && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);\n  }\n\n  private static windowExists(): boolean {\n    return typeof window !== 'undefined';\n  }\n}\n","import { ClickOverlay } from './clickoverlay';\nimport { UIInstanceManager } from '../uimanager';\nimport { Ad, AdEvent, PlayerAPI } from 'bitmovin-player';\n\n/**\n * A simple click capture overlay for clickThroughUrls of ads.\n */\nexport class AdClickOverlay extends ClickOverlay {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clickThroughCallback: () => void = null;\n\n    player.on(player.exports.PlayerEvent.AdStarted, (event: AdEvent) => {\n      let ad = event.ad;\n      this.setUrl(ad.clickThroughUrl);\n      clickThroughCallback = ad.clickThroughUrlOpened;\n    });\n\n    // Clear click-through URL when ad has finished\n    let adFinishedHandler = () => {\n      this.setUrl(null);\n    };\n\n    player.on(player.exports.PlayerEvent.AdFinished, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adFinishedHandler);\n    player.on(player.exports.PlayerEvent.AdError, adFinishedHandler);\n\n    this.onClick.subscribe(() => {\n      // Pause the ad when overlay is clicked\n      player.pause('ui-ad-click-overlay');\n\n      if (clickThroughCallback) {\n        clickThroughCallback();\n      }\n    });\n  }\n}\n","import {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A label that displays a message about a running ad, optionally with a countdown.\n */\nexport class AdMessageLabel extends Label<LabelConfig> {\n\n  constructor(config: LabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label-ad-message',\n      text: i18n.getLocalizer('ads.remainingTime') ,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let text = config.text;\n\n    let updateMessageHandler = () => {\n      this.setText(StringUtils.replaceAdMessagePlaceholders(i18n.performLocalization(text), null, player));\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let uiConfig = (event.ad as LinearAd).uiConfig;\n      text = uiConfig && uiConfig.message || config.text;\n\n      updateMessageHandler();\n\n      player.on(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n  }\n}","import { ButtonConfig, Button } from './button';\nimport { UIInstanceManager } from '../uimanager';\nimport { StringUtils } from '../stringutils';\nimport { AdEvent, LinearAd, PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link AdSkipButton}.\n */\nexport interface AdSkipButtonConfig extends ButtonConfig {\n  /**\n   * Message which gets displayed during the countdown is active.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  untilSkippableMessage?: string;\n  /**\n   * Message displayed when the ad is skippable.\n   * Supported placeholders: look at {@link StringUtils.replaceAdMessagePlaceholders}\n   */\n  skippableMessage?: string;\n}\n\n/**\n * A button that is displayed during ads and can be used to skip the ad.\n */\nexport class AdSkipButton extends Button<AdSkipButtonConfig> {\n\n  constructor(config: AdSkipButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <AdSkipButtonConfig>{\n      cssClass: 'ui-button-ad-skip',\n      untilSkippableMessage: 'Skip ad in {remainingTime}',\n      skippableMessage: 'Skip ad',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let untilSkippableMessage = config.untilSkippableMessage;\n    let skippableMessage = config.skippableMessage;\n    let skipOffset = -1;\n\n    let updateSkipMessageHandler = () => {\n      this.show();\n\n      // Update the skip message on the button\n      if (player.getCurrentTime() < skipOffset) {\n        this.setText(StringUtils.replaceAdMessagePlaceholders(untilSkippableMessage, skipOffset, player));\n        this.disable();\n      } else {\n        this.setText(skippableMessage);\n        this.enable();\n      }\n    };\n\n    let adStartHandler = (event: AdEvent) => {\n      let ad = event.ad as LinearAd;\n      skipOffset = ad.skippableAfter;\n      untilSkippableMessage = ad.uiConfig && ad.uiConfig.untilSkippableMessage || config.untilSkippableMessage;\n      skippableMessage = ad.uiConfig && ad.uiConfig.skippableMessage || config.skippableMessage;\n\n      // Display this button only if ad is skippable.\n      // Non-skippable ads will return -1 for skippableAfter for player version < v8.3.0.\n      if (typeof skipOffset === 'number' && skipOffset >= 0) {\n        updateSkipMessageHandler();\n        player.on(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n      } else {\n        this.hide();\n      }\n    };\n\n    let adEndHandler = () => {\n      player.off(player.exports.PlayerEvent.TimeChanged, updateSkipMessageHandler);\n    };\n\n    player.on(player.exports.PlayerEvent.AdStarted, adStartHandler);\n    player.on(player.exports.PlayerEvent.AdSkipped, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdError, adEndHandler);\n    player.on(player.exports.PlayerEvent.AdFinished, adEndHandler);\n\n    this.onClick.subscribe(() => {\n      // Try to skip the ad (this only works if it is skippable so we don't need to take extra care of that here)\n      player.ads.skip();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple AirPlay.\n */\nexport class AirPlayToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-airplaytogglebutton',\n      text: i18n.getLocalizer('appleAirplay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    if (!player.isAirplayAvailable) {\n      // If the player does not support Airplay (player 7.0), we just hide this component and skip configuration\n      this.hide();\n      return;\n    }\n\n    this.onClick.subscribe(() => {\n      if (player.isAirplayAvailable()) {\n        player.showAirplayTargetPicker();\n      } else {\n        if (console) {\n          console.log('AirPlay unavailable');\n        }\n      }\n    });\n\n    const airPlayAvailableHandler = () => {\n      if (player.isAirplayAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    const airPlayChangedHandler = () => {\n      if (player.isAirplayActive()) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.AirplayAvailable, airPlayAvailableHandler);\n    player.on(player.exports.PlayerEvent.AirplayChanged, airPlayChangedHandler);\n\n    // Startup init\n    airPlayAvailableHandler(); // Hide button if AirPlay is not available\n    airPlayChangedHandler();\n  }\n}","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available audio qualities.\n */\nexport class AudioQualitySelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audioqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let selectCurrentAudioQuality = () => {\n      this.selectItem(player.getAudioQuality().id);\n    };\n\n    let updateAudioQualities = () => {\n      let audioQualities = player.getAvailableAudioQualities();\n\n      this.clearItems();\n\n      // Add entry for automatic quality switching (default setting)\n      this.addItem('auto', i18n.getLocalizer('auto'));\n\n      // Add audio qualities\n      for (let audioQuality of audioQualities) {\n        this.addItem(audioQuality.id, audioQuality.label);\n      }\n\n      // Select initial quality\n      selectCurrentAudioQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: AudioQualitySelectBox, value: string) => {\n      player.setAudioQuality(value);\n    });\n\n    // Update qualities when audio track has changed\n    player.on(player.exports.PlayerEvent.AudioChanged, updateAudioQualities);\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateAudioQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateAudioQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.AudioQualityChanged, selectCurrentAudioQuality);\n    if ((player.exports.PlayerEvent as any).AudioQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).AudioQualityAdded, updateAudioQualities);\n      player.on((player.exports.PlayerEvent as any).AudioQualityRemoved, updateAudioQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateAudioQualities);\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class AudioTrackListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {AudioTrackSwitchHandler} from '../audiotrackutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A select box providing a selection between available audio tracks (e.g. different languages).\n */\nexport class AudioTrackSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-audiotrackselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new AudioTrackSwitchHandler(player, this, uimanager);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for the {@link BufferingOverlay} component.\n */\nexport interface BufferingOverlayConfig extends ContainerConfig {\n  /**\n   * Delay in milliseconds after which the buffering overlay will be displayed. Useful to bypass short stalls without\n   * displaying the overlay. Set to 0 to display the overlay instantly.\n   * Default: 1000ms (1 second)\n   */\n  showDelayMs?: number;\n}\n\n/**\n * Overlays the player and displays a buffering indicator.\n */\nexport class BufferingOverlay extends Container<BufferingOverlayConfig> {\n\n  private indicators: Component<ComponentConfig>[];\n\n  constructor(config: BufferingOverlayConfig = {}) {\n    super(config);\n\n    this.indicators = [\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n      new Component<ComponentConfig>({ tag: 'div', cssClass: 'ui-buffering-overlay-indicator', role: 'img' }),\n    ];\n\n    this.config = this.mergeConfig(config, <BufferingOverlayConfig>{\n      cssClass: 'ui-buffering-overlay',\n      hidden: true,\n      components: this.indicators,\n      showDelayMs: 1000,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    let overlayShowTimeout = new Timeout(config.showDelayMs, () => {\n      this.show();\n    });\n\n    let showOverlay = () => {\n      overlayShowTimeout.start();\n    };\n\n    let hideOverlay = () => {\n      overlayShowTimeout.clear();\n      this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.StallStarted, showOverlay);\n    player.on(player.exports.PlayerEvent.StallEnded, hideOverlay);\n    player.on(player.exports.PlayerEvent.Play, showOverlay);\n    player.on(player.exports.PlayerEvent.Playing, hideOverlay);\n    player.on(player.exports.PlayerEvent.Paused, hideOverlay);\n    player.on(player.exports.PlayerEvent.Seek, showOverlay);\n    player.on(player.exports.PlayerEvent.Seeked, hideOverlay);\n    player.on(player.exports.PlayerEvent.TimeShift, showOverlay);\n    player.on(player.exports.PlayerEvent.TimeShifted, hideOverlay);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, hideOverlay);\n\n    // Show overlay if player is already stalled at init\n    if (player.isStalled()) {\n      this.show();\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport { LocalizableText , i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Button} component.\n */\nexport interface ButtonConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A simple clickable button.\n */\nexport class Button<Config extends ButtonConfig> extends Component<Config> {\n\n  private buttonEvents = {\n    onClick: new EventDispatcher<Button<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-button',\n      role: 'button',\n      tabIndex: 0,\n    } as Config, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    const buttonElementAttributes: { [name: string]: string } = {\n      'id': this.config.id,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel || this.config.text),\n      'class': this.getCssClasses(),\n      'type' : 'button',\n      /**\n      * WCAG20 standard to display if a button is pressed or not\n      */\n      'aria-pressed': 'false',\n      'tabindex': this.config.tabIndex.toString(),\n    };\n\n    if (this.config.role != null) {\n      buttonElementAttributes['role'] = this.config.role;\n    }\n\n    // Create the button element with the text label\n    let buttonElement = new DOM('button', buttonElementAttributes).append(new DOM('span', {\n      'class': this.prefixCss('label'),\n    }).html(i18n.performLocalization(this.config.text)));\n\n    // Listen for the click event on the button element and trigger the corresponding event on the button component\n    buttonElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return buttonElement;\n  }\n\n  /**\n   * Sets text on the label of the button.\n   * @param text the text to put into the label of the button\n   */\n  setText(text: LocalizableText): void {\n    this.getDomElement().find('.' + this.prefixCss('label')).html(i18n.performLocalization(text));\n  }\n\n  protected onClickEvent() {\n    this.buttonEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is clicked.\n   * @returns {Event<Button<Config>, NoArgs>}\n   */\n  get onClick(): Event<Button<Config>, NoArgs> {\n    return this.buttonEvents.onClick.getEvent();\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { CastStartedEvent, CastWaitingForDeviceEvent, PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Overlays the player and displays the status of a Cast session.\n */\nexport class CastStatusOverlay extends Container<ContainerConfig> {\n\n  private statusLabel: Label<LabelConfig>;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.statusLabel = new Label<LabelConfig>({ cssClass: 'ui-cast-status-label' });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-cast-status-overlay',\n      components: [this.statusLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice,\n      (event: CastWaitingForDeviceEvent) => {\n        this.show();\n        // Get device name and update status text while connecting\n        let castDeviceName = event.castPayload.deviceName;\n        this.statusLabel.setText(i18n.getLocalizer('connectingTo', { castDeviceName }));\n      });\n    player.on(player.exports.PlayerEvent.CastStarted, (event: CastStartedEvent) => {\n      // Session is started or resumed\n      // For cases when a session is resumed, we do not receive the previous events and therefore show the status panel\n      // here too\n      this.show();\n      let castDeviceName = event.deviceName;\n      this.statusLabel.setText(i18n.getLocalizer('playingOn', { castDeviceName }));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, (event) => {\n      // Cast session gone, hide the status panel\n      this.hide();\n    });\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles casting to a Cast receiver.\n */\nexport class CastToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-casttogglebutton',\n      text: i18n.getLocalizer('googleCast'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      if (player.isCastAvailable()) {\n        if (player.isCasting()) {\n          player.castStop();\n        } else {\n          player.castVideo();\n        }\n      } else {\n        if (console) {\n          console.log('Cast unavailable');\n        }\n      }\n    });\n\n    let castAvailableHander = () => {\n      if (player.isCastAvailable()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.CastAvailable, castAvailableHander);\n\n    // Toggle button 'on' state\n    player.on(player.exports.PlayerEvent.CastWaitingForDevice, () => {\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      // When a session is resumed, there is no CastStart event, so we also need to toggle here for such cases\n      this.on();\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      this.off();\n    });\n\n    // Startup init\n    castAvailableHander(); // Hide button if Cast not available\n    if (player.isCasting()) {\n      this.on();\n    }\n  }\n}","import {UIContainer, UIContainerConfig} from './uicontainer';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * The base container for Cast receivers that contains all of the UI and takes care that the UI is shown on\n * certain playback events.\n */\nexport class CastUIContainer extends UIContainer {\n\n  private castUiHideTimeout: Timeout;\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    /*\n     * Show UI on Cast devices at certain playback events\n     *\n     * Since a Cast receiver does not have a direct HCI, we show the UI on certain playback events to give the user\n     * a chance to see on the screen what's going on, e.g. on play/pause or a seek the UI is shown and the user can\n     * see the current time and position on the seek bar.\n     * The UI is shown permanently while playback is paused, otherwise hides automatically after the configured\n     * hide delay time.\n     */\n\n    let isUiShown = false;\n\n    let hideUi = () => {\n      uimanager.onControlsHide.dispatch(this);\n      isUiShown = false;\n    };\n\n    this.castUiHideTimeout = new Timeout(config.hideDelay, hideUi);\n\n    let showUi = () => {\n      if (!isUiShown) {\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n    };\n\n    let showUiPermanently = () => {\n      showUi();\n      this.castUiHideTimeout.clear();\n    };\n\n    let showUiWithTimeout = () => {\n      showUi();\n      this.castUiHideTimeout.start();\n    };\n\n    let showUiAfterSeek = () => {\n      if (player.isPlaying()) {\n        showUiWithTimeout();\n      } else {\n        showUiPermanently();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Play, showUiWithTimeout);\n    player.on(player.exports.PlayerEvent.Paused, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seek, showUiPermanently);\n    player.on(player.exports.PlayerEvent.Seeked, showUiAfterSeek);\n\n    uimanager.getConfig().events.onUpdated.subscribe(showUiWithTimeout);\n  }\n\n  release(): void {\n    super.release();\n    this.castUiHideTimeout.clear();\n  }\n}","import {Button, ButtonConfig} from './button';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface ClickOverlayConfig extends ButtonConfig {\n  /**\n   * The url to open when the overlay is clicked. Set to null to disable the click handler.\n   */\n  url?: string;\n}\n\n/**\n * A click overlay that opens an url in a new tab if clicked.\n */\nexport class ClickOverlay extends Button<ClickOverlayConfig> {\n\n  constructor(config: ClickOverlayConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-clickoverlay',\n      role: this.config.role,\n    }, <ClickOverlayConfig>this.config);\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    this.setUrl((<ClickOverlayConfig>this.config).url);\n    let element = this.getDomElement();\n    element.on('click', () => {\n      if (element.data('url')) {\n        window.open(element.data('url'), '_blank');\n      }\n    });\n  }\n\n  /**\n   * Gets the URL that should be followed when the watermark is clicked.\n   * @returns {string} the watermark URL\n   */\n  getUrl(): string {\n    return this.getDomElement().data('url');\n  }\n\n  setUrl(url: string): void {\n    if (url === undefined || url == null) {\n      url = '';\n    }\n    this.getDomElement().data('url', url);\n  }\n}","import {ButtonConfig, Button} from './button';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link CloseButton}.\n */\nexport interface CloseButtonConfig extends ButtonConfig {\n  /**\n   * The component that should be closed when the button is clicked.\n   */\n  target: Component<ComponentConfig>;\n}\n\n/**\n * A button that closes (hides) a configured component.\n */\nexport class CloseButton extends Button<CloseButtonConfig> {\n\n  constructor(config: CloseButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-closebutton',\n      text: i18n.getLocalizer('close'),\n    } as CloseButtonConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    this.onClick.subscribe(() => {\n      config.target.hide();\n    });\n  }\n}","import {Guid} from '../guid';\nimport {DOM} from '../dom';\nimport {EventDispatcher, NoArgs, Event} from '../eventdispatcher';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * Base configuration interface for a component.\n * Should be extended by components that want to add additional configuration options.\n */\nexport interface ComponentConfig {\n  /**\n   * The HTML tag name of the component.\n   * Default: 'div'\n   */\n  tag?: string;\n  /**\n   * The HTML ID of the component.\n   * Default: automatically generated with pattern 'ui-id-{guid}'.\n   */\n  id?: string;\n\n  /**\n   * A prefix to prepend all CSS classes with.\n   */\n  cssPrefix?: string;\n\n  /**\n   * The CSS classes of the component. This is usually the class from where the component takes its styling.\n   */\n  cssClass?: string; // 'class' is a reserved keyword, so we need to make the name more complicated\n\n  /**\n   * Additional CSS classes of the component.\n   */\n  cssClasses?: string[];\n\n  /**\n   * Specifies if the component should be hidden at startup.\n   * Default: false\n   */\n  hidden?: boolean;\n\n  /**\n   * Specifies if the component is enabled (interactive) or not.\n   * Default: false\n   */\n  disabled?: boolean;\n\n  /**\n   * Specifies the component role for WCAG20 standard\n   */\n  role?: string;\n\n  /**\n   * WCAG20 requirement for screen reader navigation\n   */\n  tabIndex?: number;\n\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   */\n  ariaLabel?: LocalizableText;\n}\n\nexport interface ComponentHoverChangedEventArgs extends NoArgs {\n  /**\n   * True is the component is hovered, else false.\n   */\n  hovered: boolean;\n}\n\n/**\n * The base class of the UI framework.\n * Each component must extend this class and optionally the config interface.\n */\nexport class Component<Config extends ComponentConfig> {\n\n  /**\n   * The classname that is attached to the element when it is in the hidden state.\n   * @type {string}\n   */\n  private static readonly CLASS_HIDDEN = 'hidden';\n\n  /**\n   * The classname that is attached to the element when it is in the disabled state.\n   * @type {string}\n   */\n  private static readonly CLASS_DISABLED = 'disabled';\n\n  /**\n   * Configuration object of this component.\n   */\n  protected config: Config;\n\n  /**\n   * The component's DOM element.\n   */\n  private element: DOM;\n\n  /**\n   * Flag that keeps track of the hidden state.\n   */\n  private hidden: boolean;\n\n  /**\n   * Flat that keeps track of the disabled state.\n   */\n  private disabled: boolean;\n\n  /**\n   * Flag that keeps track of the hover state.\n   */\n  private hovered: boolean;\n\n  /**\n   * The list of events that this component offers. These events should always be private and only directly\n   * accessed from within the implementing component.\n   *\n   * Because TypeScript does not support private properties with the same name on different class hierarchy levels\n   * (i.e. superclass and subclass cannot contain a private property with the same name), the default naming\n   * convention for the event list of a component that should be followed by subclasses is the concatenation of the\n   * camel-cased class name + 'Events' (e.g. SubClass extends Component => subClassEvents).\n   * See {@link #componentEvents} for an example.\n   *\n   * Event properties should be named in camel case with an 'on' prefix and in the present tense. Async events may\n   * have a start event (when the operation starts) in the present tense, and must have an end event (when the\n   * operation ends) in the past tense (or present tense in special cases (e.g. onStart/onStarted or onPlay/onPlaying).\n   * See {@link #componentEvents#onShow} for an example.\n   *\n   * Each event should be accompanied with a protected method named by the convention eventName + 'Event'\n   * (e.g. onStartEvent), that actually triggers the event by calling {@link EventDispatcher#dispatch dispatch} and\n   * passing a reference to the component as first parameter. Components should always trigger their events with these\n   * methods. Implementing this pattern gives subclasses means to directly listen to the events by overriding the\n   * method (and saving the overhead of passing a handler to the event dispatcher) and more importantly to trigger\n   * these events without having access to the private event list.\n   * See {@link #onShow} for an example.\n   *\n   * To provide external code the possibility to listen to this component's events (subscribe, unsubscribe, etc.),\n   * each event should also be accompanied by a public getter function with the same name as the event's property,\n   * that returns the {@link Event} obtained from the event dispatcher by calling {@link EventDispatcher#getEvent}.\n   * See {@link #onShow} for an example.\n   *\n   * Full example for an event representing an example action in a example component:\n   *\n   * <code>\n   * // Define an example component class with an example event\n   * class ExampleComponent extends Component<ComponentConfig> {\n     *\n     *     private exampleComponentEvents = {\n     *         onExampleAction: new EventDispatcher<ExampleComponent, NoArgs>()\n     *     }\n     *\n     *     // constructor and other stuff...\n     *\n     *     protected onExampleActionEvent() {\n     *        this.exampleComponentEvents.onExampleAction.dispatch(this);\n     *    }\n     *\n     *    get onExampleAction(): Event<ExampleComponent, NoArgs> {\n     *        return this.exampleComponentEvents.onExampleAction.getEvent();\n     *    }\n     * }\n   *\n   * // Create an instance of the component somewhere\n   * var exampleComponentInstance = new ExampleComponent();\n   *\n   * // Subscribe to the example event on the component\n   * exampleComponentInstance.onExampleAction.subscribe(function (sender: ExampleComponent) {\n     *     console.log('onExampleAction of ' + sender + ' has fired!');\n     * });\n   * </code>\n   */\n  private componentEvents = {\n    onShow: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHide: new EventDispatcher<Component<Config>, NoArgs>(),\n    onHoverChanged: new EventDispatcher<Component<Config>, ComponentHoverChangedEventArgs>(),\n    onEnabled: new EventDispatcher<Component<Config>, NoArgs>(),\n    onDisabled: new EventDispatcher<Component<Config>, NoArgs>(),\n  };\n\n  /**\n   * Constructs a component with an optionally supplied config. All subclasses must call the constructor of their\n   * superclass and then merge their configuration into the component's configuration.\n   * @param config the configuration for the component\n   */\n  constructor(config: ComponentConfig = {}) {\n    // Create the configuration for this component\n    this.config = <Config>this.mergeConfig(config, {\n      tag: 'div',\n      id: '{{PREFIX}}-id-' + Guid.next(),\n      cssPrefix: '{{PREFIX}}',\n      cssClass: 'ui-component',\n      cssClasses: [],\n      hidden: false,\n      disabled: false,\n    }, {});\n  }\n\n  /**\n   * Initializes the component, e.g. by applying config settings.\n   * This method must not be called from outside the UI framework.\n   *\n   * This method is automatically called by the {@link UIInstanceManager}. If the component is an inner component of\n   * some component, and thus encapsulated abd managed internally and never directly exposed to the UIManager,\n   * this method must be called from the managing component's {@link #initialize} method.\n   */\n  initialize(): void {\n    this.hidden = this.config.hidden;\n    this.disabled = this.config.disabled;\n\n    // Hide the component at initialization if it is configured to be hidden\n    if (this.isHidden()) {\n      this.hidden = false; // Set flag to false for the following hide() call to work (hide() checks the flag)\n      this.hide();\n    }\n\n    // Disable the component at initialization if it is configured to be disabled\n    if (this.isDisabled()) {\n      this.disabled = false; // Set flag to false for the following disable() call to work (disable() checks the flag)\n      this.disable();\n    }\n  }\n\n  /**\n   * Configures the component for the supplied Player and UIInstanceManager. This is the place where all the magic\n   * happens, where components typically subscribe and react to events (on their DOM element, the Player, or the\n   * UIInstanceManager), and basically everything that makes them interactive.\n   * This method is called only once, when the UIManager initializes the UI.\n   *\n   * Subclasses usually overwrite this method to add their own functionality.\n   *\n   * @param player the player which this component controls\n   * @param uimanager the UIInstanceManager that manages this component\n   */\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    this.onShow.subscribe(() => {\n      uimanager.onComponentShow.dispatch(this);\n    });\n    this.onHide.subscribe(() => {\n      uimanager.onComponentHide.dispatch(this);\n    });\n\n    // Track the hovered state of the element\n    this.getDomElement().on('mouseenter', () => {\n      this.onHoverChangedEvent(true);\n    });\n    this.getDomElement().on('mouseleave', () => {\n      this.onHoverChangedEvent(false);\n    });\n  }\n\n  /**\n   * Releases all resources and dependencies that the component holds. Player, DOM, and UIManager events are\n   * automatically removed during release and do not explicitly need to be removed here.\n   * This method is called by the UIManager when it releases the UI.\n   *\n   * Subclasses that need to release resources should override this method and call super.release().\n   */\n  release(): void {\n    // Nothing to do here, override where necessary\n  }\n\n  /**\n   * Generate the DOM element for this component.\n   *\n   * Subclasses usually overwrite this method to extend or replace the DOM element with their own design.\n   */\n  protected toDomElement(): DOM {\n    let element = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n    });\n\n    return element;\n  }\n\n  /**\n   * Returns the DOM element of this component. Creates the DOM element if it does not yet exist.\n   *\n   * Should not be overwritten by subclasses.\n   *\n   * @returns {DOM}\n   */\n  getDomElement(): DOM {\n    if (!this.element) {\n      this.element = this.toDomElement();\n    }\n\n    return this.element;\n  }\n\n  setAriaLabel(label: LocalizableText): void {\n    this.setAriaAttr('label', i18n.performLocalization(label));\n  }\n\n  setAriaAttr(name: string, value: string) {\n    this.getDomElement().attr(`aria-${name}`, value);\n  }\n\n  /**\n   * Merges a configuration with a default configuration and a base configuration from the superclass.\n   *\n   * @param config the configuration settings for the components, as usually passed to the constructor\n   * @param defaults a default configuration for settings that are not passed with the configuration\n   * @param base configuration inherited from a superclass\n   * @returns {Config}\n   */\n  protected mergeConfig<Config>(config: Config, defaults: Config, base: Config): Config {\n    // Extend default config with supplied config\n    let merged = Object.assign({}, base, defaults, config);\n\n    // Return the extended config\n    return merged;\n  }\n\n  /**\n   * Helper method that returns a string of all CSS classes of the component.\n   *\n   * @returns {string}\n   */\n  protected getCssClasses(): string {\n    // Merge all CSS classes into single array\n    let flattenedArray = [this.config.cssClass].concat(this.config.cssClasses);\n    // Prefix classes\n    flattenedArray = flattenedArray.map((css) => {\n      return this.prefixCss(css);\n    });\n    // Join array values into a string\n    let flattenedString = flattenedArray.join(' ');\n    // Return trimmed string to prevent whitespace at the end from the join operation\n    return flattenedString.trim();\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n\n  /**\n   * Returns the configuration object of the component.\n   * @returns {Config}\n   */\n  public getConfig(): Config {\n    return this.config;\n  }\n\n  /**\n   * Hides the component if shown.\n   * This method basically transfers the component into the hidden state. Actual hiding is done via CSS.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.hidden = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.onHideEvent();\n    }\n  }\n\n  /**\n   * Shows the component if hidden.\n   */\n  show() {\n    if (this.hidden) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_HIDDEN));\n      this.hidden = false;\n      this.onShowEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is hidden.\n   * @returns {boolean} true if the component is hidden, else false\n   */\n  isHidden(): boolean {\n    return this.hidden;\n  }\n\n  /**\n   * Determines if the component is shown.\n   * @returns {boolean} true if the component is visible, else false\n   */\n  isShown(): boolean {\n    return !this.isHidden();\n  }\n\n  /**\n   * Toggles the hidden state by hiding the component if it is shown, or showing it if hidden.\n   */\n  toggleHidden() {\n    if (this.isHidden()) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n\n  /**\n   * Disables the component.\n   * This method basically transfers the component into the disabled state. Actual disabling is done via CSS or child\n   * components. (e.g. Button needs to unsubscribe click listeners)\n   */\n  disable(): void {\n    if (!this.disabled) {\n      this.disabled = true;\n      this.getDomElement().addClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.onDisabledEvent();\n    }\n  }\n\n  /**\n   * Enables the component.\n   * This method basically transfers the component into the enabled state. Actual enabling is done via CSS or child\n   * components. (e.g. Button needs to subscribe click listeners)\n   */\n  enable(): void {\n    if (this.disabled) {\n      this.getDomElement().removeClass(this.prefixCss(Component.CLASS_DISABLED));\n      this.disabled = false;\n      this.onEnabledEvent();\n    }\n  }\n\n  /**\n   * Determines if the component is disabled.\n   * @returns {boolean} true if the component is disabled, else false\n   */\n  isDisabled(): boolean {\n    return this.disabled;\n  }\n\n  /**\n   * Determines if the component is enabled.\n   * @returns {boolean} true if the component is enabled, else false\n   */\n  isEnabled(): boolean {\n    return !this.isDisabled();\n  }\n\n  /**\n   * Determines if the component is currently hovered.\n   * @returns {boolean} true if the component is hovered, else false\n   */\n  isHovered(): boolean {\n    return this.hovered;\n  }\n\n  /**\n   * Fires the onShow event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onShowEvent(): void {\n    this.componentEvents.onShow.dispatch(this);\n  }\n\n  /**\n   * Fires the onHide event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHideEvent(): void {\n    this.componentEvents.onHide.dispatch(this);\n  }\n\n  /**\n   * Fires the onEnabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onEnabledEvent(): void {\n    this.componentEvents.onEnabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onDisabled event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onDisabledEvent(): void {\n    this.componentEvents.onDisabled.dispatch(this);\n  }\n\n  /**\n   * Fires the onHoverChanged event.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   */\n  protected onHoverChangedEvent(hovered: boolean): void {\n    this.hovered = hovered;\n    this.componentEvents.onHoverChanged.dispatch(this, { hovered: hovered });\n  }\n\n  /**\n   * Gets the event that is fired when the component is showing.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onShow(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onShow.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is hiding.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onHide(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onHide.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is enabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onEnabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onEnabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component is disabling.\n   * See the detailed explanation on event architecture on the {@link #componentEvents events list}.\n   * @returns {Event<Component<Config>, NoArgs>}\n   */\n  get onDisabled(): Event<Component<Config>, NoArgs> {\n    return this.componentEvents.onDisabled.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the component's hover-state is changing.\n   * @returns {Event<Component<Config>, ComponentHoverChangedEventArgs>}\n   */\n  get onHoverChanged(): Event<Component<Config>, ComponentHoverChangedEventArgs> {\n    return this.componentEvents.onHoverChanged.getEvent();\n  }\n}","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {ArrayUtils} from '../arrayutils';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Container}.\n */\nexport interface ContainerConfig extends ComponentConfig {\n  /**\n   * Child components of the container.\n   */\n  components?: Component<ComponentConfig>[];\n}\n\n/**\n * A container component that can contain a collection of child components.\n * Components can be added at construction time through the {@link ContainerConfig#components} setting, or later\n * through the {@link Container#addComponent} method. The UIManager automatically takes care of all components, i.e. it\n * initializes and configures them automatically.\n *\n * In the DOM, the container consists of an outer <div> (that can be configured by the config) and an inner wrapper\n * <div> that contains the components. This double-<div>-structure is often required to achieve many advanced effects\n * in CSS and/or JS, e.g. animations and certain formatting with absolute positioning.\n *\n * DOM example:\n * <code>\n *     <div class='ui-container'>\n *         <div class='container-wrapper'>\n *             ... child components ...\n *         </div>\n *     </div>\n * </code>\n */\nexport class Container<Config extends ContainerConfig> extends Component<Config> {\n\n  /**\n   * A reference to the inner element that contains the components of the container.\n   */\n  private innerContainerElement: DOM;\n  private componentsToAdd: Component<ComponentConfig>[];\n  private componentsToRemove: Component<ComponentConfig>[];\n\n  constructor(config: Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-container',\n      components: [],\n    } as Config, this.config);\n\n    this.componentsToAdd = [];\n    this.componentsToRemove = [];\n  }\n\n  /**\n   * Adds a child component to the container.\n   * @param component the component to add\n   */\n  addComponent(component: Component<ComponentConfig>) {\n    this.config.components.push(component);\n    this.componentsToAdd.push(component);\n  }\n\n  /**\n   * Removes a child component from the container.\n   * @param component the component to remove\n   * @returns {boolean} true if the component has been removed, false if it is not contained in this container\n   */\n  removeComponent(component: Component<ComponentConfig>): boolean {\n    if (ArrayUtils.remove(this.config.components, component) != null) {\n      this.componentsToRemove.push(component);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Gets an array of all child components in this container.\n   * @returns {Component<ComponentConfig>[]}\n   */\n  getComponents(): Component<ComponentConfig>[] {\n    return this.config.components;\n  }\n\n  /**\n   * Removes all child components from the container.\n   */\n  removeComponents(): void {\n    for (let component of this.getComponents().slice()) {\n      this.removeComponent(component);\n    }\n  }\n\n  /**\n   * Updates the DOM of the container with the current components.\n   */\n  protected updateComponents(): void {\n    /* We cannot just clear the container to remove all elements and then re-add those that should stay, because\n     * IE looses the innerHTML of unattached elements, leading to empty elements within the container (e.g. missing\n     * subtitle text in SubtitleLabel).\n     * Instead, we keep a list of elements to add and remove, leaving remaining elements alone. By keeping them in\n     * the DOM, their content gets preserved in all browsers.\n     */\n    let component;\n\n    while (component = this.componentsToRemove.shift()) {\n      component.getDomElement().remove();\n    }\n\n    while (component = this.componentsToAdd.shift()) {\n      this.innerContainerElement.append(component.getDomElement());\n    }\n  }\n\n  protected toDomElement(): DOM {\n    // Create the container element (the outer <div>)\n    let containerElement = new DOM(this.config.tag, {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': this.config.role,\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    // Create the inner container element (the inner <div>) that will contain the components\n    let innerContainer = new DOM(this.config.tag, {\n      'class': this.prefixCss('container-wrapper'),\n    });\n    this.innerContainerElement = innerContainer;\n\n    for (let initialComponent of this.config.components) {\n      this.componentsToAdd.push(initialComponent);\n    }\n    this.updateComponents();\n\n    containerElement.append(innerContainer);\n\n    return containerElement;\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {UIUtils} from '../uiutils';\nimport {Spacer} from './spacer';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\n\n/**\n * Configuration interface for the {@link ControlBar}.\n */\nexport interface ControlBarConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A container for main player control components, e.g. play toggle button, seek bar, volume control, fullscreen toggle\n * button.\n */\nexport class ControlBar extends Container<ControlBarConfig> {\n\n  constructor(config: ControlBarConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-controlbar',\n      hidden: true,\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('controlBar'),\n    }, <ControlBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Counts how many components are hovered and block hiding of the control bar\n    let hoverStackCount = 0;\n\n    // only enabling this for non-mobile platforms without touch input. enabling this\n    // for touch devices causes the UI to not disappear after hideDelay seconds.\n    // Instead, it will stay visible until another manual interaction is performed.\n    if (uimanager.getConfig().disableAutoHideWhenHovered && !BrowserUtils.isMobile) {\n      // Track hover status of child components\n      UIUtils.traverseTree(this, (component) => {\n        // Do not track hover status of child containers or spacers, only of 'real' controls\n        if (component instanceof Container || component instanceof Spacer) {\n          return;\n        }\n\n        // Subscribe hover event and keep a count of the number of hovered children\n        component.onHoverChanged.subscribe((_, args) => {\n          if (args.hovered) {\n            hoverStackCount++;\n          } else {\n            hoverStackCount--;\n          }\n        });\n      });\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.show();\n    });\n\n    uimanager.onPreviewControlsHide.subscribe((sender, args) => {\n      // Cancel the hide event if hovered child components block hiding\n      args.cancel = (hoverStackCount > 0);\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.hide();\n    });\n  }\n}\n","import {ContainerConfig, Container} from './container';\nimport {Label, LabelConfig} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {TvNoiseCanvas} from './tvnoisecanvas';\nimport { ErrorUtils } from '../errorutils';\nimport { ErrorEvent, PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport {\n  isMobileV3PlayerAPI,\n  MobileV3PlayerAPI, MobileV3PlayerErrorEvent, MobileV3PlayerEvent, MobileV3SourceErrorEvent,\n} from '../mobilev3playerapi';\n\nexport interface ErrorMessageTranslator {\n  (error: ErrorEvent | MobileV3PlayerErrorEvent): string;\n}\n\nexport interface ErrorMessageMap {\n  [code: number]: string | ErrorMessageTranslator;\n}\n\n/**\n * Configuration interface for the {@link ErrorMessageOverlay}.\n */\nexport interface ErrorMessageOverlayConfig extends ContainerConfig {\n  /**\n   * Allows overwriting of the error messages displayed in the overlay for customization and localization.\n   * This is either a function that receives any {@link ErrorEvent} as parameter and translates error messages,\n   * or a map of error codes that overwrites specific error messages with a plain string or a function that\n   * receives the {@link ErrorEvent} as parameter and returns a customized string.\n   * The translation functions can be used to extract data (e.g. parameters) from the original error message.\n   *\n   * Example 1 (catch-all translation function):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: function(error) {\n   *     switch (error.code) {\n   *       // Overwrite error 1000 'Unknown error'\n   *       case 1000:\n   *         return 'Houston, we have a problem'\n   *\n   *       // Transform error 1201 'The downloaded manifest is invalid' to uppercase\n   *       case 1201:\n   *         var description = ErrorUtils.defaultErrorMessages[error.code];\n   *         return description.toUpperCase();\n   *\n   *       // Customize error 1207 'The manifest could not be loaded'\n   *       case 1207:\n   *         var statusCode = error.data.statusCode;\n   *         return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *     // Return unmodified error message for all other errors\n   *     return error.message;\n   *   }\n   * };\n   * </code>\n   *\n   * Example 2 (translating specific errors):\n   * <code>\n   * errorMessageOverlayConfig = {\n   *   messages: {\n   *     // Overwrite error 1000 'Unknown error'\n   *     1000: 'Houston, we have a problem',\n   *\n   *     // Transform error 1201 'Unsupported manifest format' to uppercase\n   *     1201: function(error) {\n   *       var description = ErrorUtils.defaultErrorMessages[error.code];\n   *       return description.toUpperCase();\n   *     },\n   *\n   *     // Customize error 1207 'The manifest could not be loaded'\n   *     1207: function(error) {\n   *       var statusCode = error.data.statusCode;\n   *       return 'Manifest loading failed with HTTP error ' + statusCode;\n   *     }\n   *   }\n   * };\n   * </code>\n   */\n  messages?: ErrorMessageMap | ErrorMessageTranslator;\n}\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class ErrorMessageOverlay extends Container<ErrorMessageOverlayConfig> {\n\n  private errorLabel: Label<LabelConfig>;\n  private tvNoiseBackground: TvNoiseCanvas;\n\n  constructor(config: ErrorMessageOverlayConfig = {}) {\n    super(config);\n\n    this.errorLabel = new Label<LabelConfig>({ cssClass: 'ui-errormessage-label' });\n    this.tvNoiseBackground = new TvNoiseCanvas();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-errormessage-overlay',\n      components: [this.tvNoiseBackground, this.errorLabel],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI | MobileV3PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    const handleErrorMessage = (\n      event: ErrorEvent | MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent,\n      message: string,\n    ) => {\n      const customizedMessage = customizeErrorMessage(uimanager.getConfig().errorMessages || config.messages, event);\n      if (customizedMessage) {\n        message = customizedMessage;\n      }\n\n      this.errorLabel.setText(message);\n      this.tvNoiseBackground.start();\n      this.show();\n    };\n\n    if (isMobileV3PlayerAPI(player)) {\n      const errorEventHandler = (event: MobileV3SourceErrorEvent | MobileV3PlayerErrorEvent) => {\n        const message = ErrorUtils.defaultMobileV3ErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      };\n\n      player.on(MobileV3PlayerEvent.PlayerError, errorEventHandler);\n      player.on(MobileV3PlayerEvent.SourceError, errorEventHandler);\n    } else {\n      player.on(player.exports.PlayerEvent.Error, (event: ErrorEvent) => {\n        let message = ErrorUtils.defaultWebErrorMessageTranslator(event);\n        handleErrorMessage(event, message);\n      });\n    }\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, (event: PlayerEventBase) => {\n      if (this.isShown()) {\n        this.tvNoiseBackground.stop();\n        this.hide();\n      }\n    });\n  }\n\n  release(): void {\n    super.release();\n\n    // Canvas rendering must be explicitly stopped, else it just continues forever and hogs resources\n    this.tvNoiseBackground.stop();\n  }\n}\n\nfunction customizeErrorMessage(\n  errorMessages: ErrorMessageTranslator | ErrorMessageMap,\n  event: ErrorEvent | MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent,\n): string | undefined {\n  if (!errorMessages) {\n    return undefined;\n  }\n\n  // Process message vocabularies\n  if (typeof errorMessages === 'function') {\n    // Translation function for all errors\n    return errorMessages(event);\n  }\n  if (errorMessages[event.code]) {\n    // It's not a translation function, so it must be a map of strings or translation functions\n    const customMessage = errorMessages[event.code];\n\n    return typeof customMessage === 'string' ? customMessage : customMessage(event);\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the player between windowed and fullscreen view.\n */\nexport class FullscreenToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-fullscreentogglebutton',\n      text: i18n.getLocalizer('fullscreen'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isFullScreenAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.Fullscreen);\n    };\n\n    const fullscreenStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.Fullscreen ? this.on() : this.off();\n    };\n\n    const fullscreenAvailabilityChangedHandler = () => {\n      isFullScreenAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, fullscreenStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        fullscreenAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(fullscreenAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isFullScreenAvailable()) {\n        if (console) {\n          console.log('Fullscreen unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.Fullscreen\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.Fullscreen;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    fullscreenAvailabilityChangedHandler();\n    fullscreenStateHandler();\n  }\n}\n","import {ToggleButtonConfig} from './togglebutton';\nimport {PlaybackToggleButton} from './playbacktogglebutton';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that overlays the video and toggles between playback and pause.\n */\nexport class HugePlaybackToggleButton extends PlaybackToggleButton {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugeplaybacktogglebutton',\n      text: i18n.getLocalizer('playPause'),\n      role: 'button',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Update button state through API events\n    super.configure(player, uimanager, false);\n\n    let togglePlayback = () => {\n      if (player.isPlaying() || this.isPlayInitiated) {\n        player.pause('ui');\n      } else {\n        player.play('ui');\n      }\n    };\n\n    let toggleFullscreen = () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        player.setViewMode(player.exports.ViewMode.Inline);\n      } else {\n        player.setViewMode(player.exports.ViewMode.Fullscreen);\n      }\n    };\n\n    let firstPlay = true;\n    let clickTime = 0;\n    let doubleClickTime = 0;\n\n    /*\n     * YouTube-style toggle button handling\n     *\n     * The goal is to prevent a short pause or playback interval between a click, that toggles playback, and a\n     * double click, that toggles fullscreen. In this naive approach, the first click would e.g. start playback,\n     * the second click would be detected as double click and toggle to fullscreen, and as second normal click stop\n     * playback, which results is a short playback interval with max length of the double click detection\n     * period (usually 500ms).\n     *\n     * To solve this issue, we defer handling of the first click for 200ms, which is almost unnoticeable to the user,\n     * and just toggle playback if no second click (double click) has been registered during this period. If a double\n     * click is registered, we just toggle the fullscreen. In the first 200ms, undesired playback changes thus cannot\n     * happen. If a double click is registered within 500ms, we undo the playback change and switch fullscreen mode.\n     * In the end, this method basically introduces a 200ms observing interval in which playback changes are prevented\n     * if a double click happens.\n     */\n    this.onClick.subscribe(() => {\n      // Directly start playback on first click of the button.\n      // This is a required workaround for mobile browsers where video playback needs to be triggered directly\n      // by the user. A deferred playback start through the timeout below is not considered as user action and\n      // therefore ignored by mobile browsers.\n      if (firstPlay) {\n        // Try to start playback. Then we wait for Play and only when it arrives, we disable the firstPlay flag.\n        // If we disable the flag here, onClick was triggered programmatically instead of by a user interaction, and\n        // playback is blocked (e.g. on mobile devices due to the programmatic play() call), we loose the chance to\n        // ever start playback through a user interaction again with this button.\n        togglePlayback();\n        return;\n      }\n\n      let now = Date.now();\n\n      if (now - clickTime < 200) {\n        // We have a double click inside the 200ms interval, just toggle fullscreen mode\n        toggleFullscreen();\n        doubleClickTime = now;\n        return;\n      } else if (now - clickTime < 500) {\n        // We have a double click inside the 500ms interval, undo playback toggle and toggle fullscreen mode\n        toggleFullscreen();\n        togglePlayback();\n        doubleClickTime = now;\n        return;\n      }\n\n      clickTime = now;\n\n      setTimeout(() => {\n        if (Date.now() - doubleClickTime > 200) {\n          // No double click detected, so we toggle playback and wait what happens next\n          togglePlayback();\n        }\n      }, 200);\n    });\n\n    player.on(player.exports.PlayerEvent.Play, () => {\n      // Playback has really started, we can disable the flag to switch to normal toggle button handling\n      firstPlay = false;\n    });\n\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        // if playback could not be started, reset the first play flag as we need the user interaction to start\n        firstPlay = true;\n      }\n    });\n\n    const suppressPlayButtonTransitionAnimation = () => {\n      // Disable the current animation\n      this.setTransitionAnimationsEnabled(false);\n\n      // Enable the transition animations for the next state change\n      this.onToggle.subscribeOnce(() => {\n        this.setTransitionAnimationsEnabled(true);\n      });\n    };\n\n    // Hide the play button animation when the UI is loaded (it should only be animated on state changes)\n    suppressPlayButtonTransitionAnimation();\n\n    const isAutoplayEnabled = player.getConfig().playback && Boolean(player.getConfig().playback.autoplay);\n    // We only know if an autoplay attempt is upcoming if the player is not yet ready. It the player is already ready,\n    // the attempt might be upcoming or might have already happened, but we don't have to handle that because we can\n    // simply rely on isPlaying and the play state events.\n    const isAutoplayUpcoming = !player.getSource() && isAutoplayEnabled;\n\n    // Hide the play button when the player is already playing or autoplay is upcoming\n    if (player.isPlaying() || isAutoplayUpcoming) {\n      // Hide the play button (switch to playing state)\n      this.on();\n      // Disable the animation of the playing state switch\n      suppressPlayButtonTransitionAnimation();\n\n      // Show the play button without an animation if a play attempt is blocked\n      player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n        if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n          suppressPlayButtonTransitionAnimation();\n        }\n      });\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n\n  /**\n   * Enables or disables the play state transition animations of the play button image. Can be used to suppress\n   * animations.\n   * @param {boolean} enabled true to enable the animations (default), false to disable them\n   */\n  protected setTransitionAnimationsEnabled(enabled: boolean): void {\n    const noTransitionAnimationsClass = this.prefixCss('no-transition-animations');\n\n    if (enabled) {\n      this.getDomElement().removeClass(noTransitionAnimationsClass);\n    } else if (!this.getDomElement().hasClass(noTransitionAnimationsClass)) {\n      this.getDomElement().addClass(noTransitionAnimationsClass);\n    }\n  }\n}\n","import {ButtonConfig, Button} from './button';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button to play/replay a video.\n */\nexport class HugeReplayButton extends Button<ButtonConfig> {\n\n  constructor(config: ButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-hugereplaybutton',\n      text: i18n.getLocalizer('replay'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      player.play('ui');\n    });\n  }\n\n  protected toDomElement(): DOM {\n    let buttonElement = super.toDomElement();\n\n    // Add child that contains the play button image\n    // Setting the image directly on the button does not work together with scaling animations, because the button\n    // can cover the whole video player are and scaling would extend it beyond. By adding an inner element, confined\n    // to the size if the image, it can scale inside the player without overshooting.\n    buttonElement.append(new DOM('div', {\n      'class': this.prefixCss('image'),\n    }));\n\n    return buttonElement;\n  }\n}","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n } from '../localization/i18n';\n\nexport class ItemSelectionList extends ListSelector<ListSelectorConfig> {\n\n  private static readonly CLASS_SELECTED = 'selected';\n\n  private listElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      tag: 'ul',\n      cssClass: 'ui-itemselectionlist',\n    }, this.config);\n  }\n\n  protected isActive(): boolean {\n    return this.items.length > 1;\n  }\n\n  protected toDomElement(): DOM {\n    let listElement = new DOM('ul', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listElement = listElement;\n    this.updateDomItems();\n\n    return listElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.listElement.empty();\n\n    let selectedListItem: DOM = null;\n\n    const selectItem = (listItem: DOM) => {\n      listItem.addClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    const deselectItem = (listItem: DOM) => {\n      listItem.removeClass(this.prefixCss(ItemSelectionList.CLASS_SELECTED));\n    };\n\n    for (let item of this.items) {\n      let listItem = new DOM('li', {\n        'type': 'li',\n        'class': this.prefixCss('ui-selectionlistitem'),\n      }).append(new DOM('a', {\n      }).html(i18n.performLocalization(item.label)));\n\n      if (!selectedListItem) {\n        if (selectedValue == null) { // If there is no pre-selected value, select the first one\n          selectedListItem = listItem;\n        } else if (String(selectedValue) === item.key) { // convert selectedValue to string to catch 'null'/null case\n          selectedListItem = listItem;\n        }\n      }\n\n      // Handle list item selections\n      listItem.on('click', () => {\n        // Deselect the previous item (if there was a selected item)\n        if (selectedListItem) {\n          deselectItem(selectedListItem);\n        }\n\n        // Select the clicked item\n        selectedListItem = listItem;\n        selectItem(listItem);\n\n        // Fire the event\n        this.onItemSelectedEvent(item.key, false);\n      });\n\n      // Select default item\n      if (selectedListItem) {\n        selectItem(selectedListItem);\n      }\n\n      this.listElement.append(listItem);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import {ComponentConfig, Component} from './component';\nimport {DOM} from '../dom';\nimport {EventDispatcher, Event, NoArgs} from '../eventdispatcher';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link Label} component.\n */\nexport interface LabelConfig extends ComponentConfig {\n  /**\n   * The text as string or localize callback on the label.\n   */\n  text?: LocalizableText;\n\n  /**\n   * WCAG20 standard: Associate label to form control.\n   */\n  for?: string;\n}\n\n/**\n * A simple text label.\n *\n * DOM example:\n * <code>\n *     <span class='ui-label'>...some text...</span>\n * </code>\n */\nexport class Label<Config extends LabelConfig> extends Component<Config> {\n\n  private text: LocalizableText;\n\n  private labelEvents = {\n    onClick: new EventDispatcher<Label<Config>, NoArgs>(),\n    onTextChanged: new EventDispatcher<Label<Config>, string>(),\n  };\n\n  constructor(config: Config = {} as Config) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-label',\n    } as Config, this.config);\n    this.text = this.config.text;\n  }\n\n  protected toDomElement(): DOM {\n    const tagName = this.config.for != null ? 'label' : 'span';\n\n    let labelElement = new DOM(tagName, {\n      'id': this.config.id,\n      'for': this.config.for,\n      'class': this.getCssClasses(),\n    }).html(i18n.performLocalization(this.text));\n\n    labelElement.on('click', () => {\n      this.onClickEvent();\n    });\n\n    return labelElement;\n  }\n\n  /**\n   * Set the text on this label.\n   * @param text\n   */\n  setText(text: LocalizableText) {\n    if (text === this.text) {\n      return;\n    }\n\n    this.text = text;\n    const localizedText = i18n.performLocalization(text);\n    this.getDomElement().html(localizedText);\n    this.onTextChangedEvent(localizedText);\n  }\n\n  /**\n   * Gets the text on this label.\n   * @return {string} The text on the label\n   */\n  getText(): string {\n    return i18n.performLocalization(this.text);\n  }\n\n  /**\n   * Clears the text on this label.\n   */\n  clearText() {\n    this.getDomElement().html('');\n    this.onTextChangedEvent(null);\n  }\n\n  /**\n   * Tests if the label is empty and does not contain any text.\n   * @return {boolean} True if the label is empty, else false\n   */\n  isEmpty(): boolean {\n    return !this.text;\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onClickEvent() {\n    this.labelEvents.onClick.dispatch(this);\n  }\n\n  /**\n   * Fires the {@link #onClick} event.\n   * Can be used by subclasses to listen to this event without subscribing an event listener by overwriting the method\n   * and calling the super method.\n   */\n  protected onTextChangedEvent(text: string) {\n    this.labelEvents.onTextChanged.dispatch(this, text);\n  }\n\n  /**\n   * Gets the event that is fired when the label is clicked.\n   * @returns {Event<Label<LabelConfig>, NoArgs>}\n   */\n  get onClick(): Event<Label<LabelConfig>, NoArgs> {\n    return this.labelEvents.onClick.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the text on the label is changed.\n   * @returns {Event<Label<LabelConfig>, string>}\n   */\n  get onTextChanged(): Event<Label<LabelConfig>, string> {\n    return this.labelEvents.onTextChanged.getEvent();\n  }\n}\n","import { ToggleButton, ToggleButtonConfig } from './togglebutton';\nimport { ListItem, ListSelector, ListSelectorConfig } from './listselector';\nimport {DOM} from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { ArrayUtils } from '../arrayutils';\n\n/**\n * A element to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *   <div class='ui-listbox'>\n *     <button class='ui-listbox-button'>label</button>\n *     ...\n *   </div\n * </code>\n */\n// TODO: change ListSelector to extends container in v4 to improve usage of ListBox.\n//       Currently we are creating the dom element of the list box with child elements manually here.\n//       But this functionality is already covered within the Container component.\nexport class ListBox extends ListSelector<ListSelectorConfig> {\n  private listBoxElement: DOM;\n  private components: ListBoxItemButton[] = [];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox',\n    } as ListSelectorConfig, this.config);\n  }\n\n  public configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // Subscribe before super call to receive initial events\n    this.onItemAdded.subscribe(this.addListBoxDomItem);\n    this.onItemRemoved.subscribe(this.removeListBoxDomItem);\n    this.onItemSelected.subscribe(this.refreshSelectedItem);\n\n    super.configure(player, uimanager);\n  }\n\n  protected toDomElement(): DOM {\n    let listBoxElement = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n    });\n\n    this.listBoxElement = listBoxElement;\n    this.createListBoxDomItems();\n    this.refreshSelectedItem();\n\n    return listBoxElement;\n  }\n\n  private createListBoxDomItems() {\n    // Delete all children\n    this.listBoxElement.empty();\n    this.components = [];\n\n    // Add updated children\n    for (let item of this.items) {\n      this.addListBoxDomItem(this, item.key);\n    }\n  }\n\n  private removeListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    if (component) {\n      component.getDomElement().remove();\n      ArrayUtils.remove(this.components, component);\n    }\n  };\n\n  private addListBoxDomItem = (_: ListBox, key: string) => {\n    const component = this.getComponentForKey(key);\n    const newItem = this.getItemForKey(key);\n    if (component) {\n      // Update existing component\n      component.setText(newItem.label);\n    } else {\n      const listBoxItemButton = this.buildListBoxItemButton(newItem);\n\n      listBoxItemButton.onClick.subscribe(() => {\n        this.handleSelectionChange(listBoxItemButton);\n      });\n\n      this.components.push(listBoxItemButton);\n      this.listBoxElement.append(listBoxItemButton.getDomElement());\n    }\n  };\n\n  private refreshSelectedItem = () => {\n    // This gets called twice because the first time is triggered when the user clicks on the ListBoxItemButton. And the\n    // second call comes from the player event when the actual item is selected (Subtitle / AudioTrack in this case).\n    // As this is a generic component we can't prohibit this behaviour. We need to treat this component as it acts\n    // independent from PlayerEvents and on the other hand we need to react to PlayerEvents as it could be triggered\n    // from outside.\n\n    for (let item of this.items) {\n      const component = this.getComponentForKey(item.key);\n      if (component) {\n        String(component.key) === String(this.selectedItem) ? component.on() : component.off();\n      }\n    }\n  };\n\n  private buildListBoxItemButton(listItem: ListItem): ListBoxItemButton {\n    return new ListBoxItemButton({\n      key: listItem.key,\n      text: listItem.label,\n      ariaLabel: listItem.ariaLabel,\n    });\n  }\n\n  private getComponentForKey(key: string): ListBoxItemButton {\n    return this.components.find((c) => key === c.key);\n  }\n\n  private handleSelectionChange = (sender: ListBoxItemButton) => {\n    this.onItemSelectedEvent(sender.key);\n  };\n}\n\ninterface ListBoxItemButtonConfig extends ToggleButtonConfig {\n  /**\n   * key to identify selected item. Similar to the value attribute of an select option.\n   */\n  key: string;\n}\n\nclass ListBoxItemButton extends ToggleButton<ListBoxItemButtonConfig> {\n\n  constructor(config: ListBoxItemButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-listbox-button',\n      onClass: 'selected',\n      offClass: '',\n    } as ListBoxItemButtonConfig, this.config);\n  }\n\n  get key(): string {\n    return (this.config as ListBoxItemButtonConfig).key;\n  }\n}\n","import {Component, ComponentConfig} from './component';\nimport {EventDispatcher, Event} from '../eventdispatcher';\nimport {ArrayUtils} from '../arrayutils';\nimport { LocalizableText, i18n } from '../localization/i18n';\n\n/**\n * A map of items (key/value -> label} for a {@link ListSelector} in a {@link ListSelectorConfig}.\n */\nexport interface ListItem {\n  key: string;\n  label: LocalizableText;\n  sortedInsert?: boolean;\n  ariaLabel?: string;\n}\n\n/**\n * Filter function that can be used to filter out list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemFilter {\n  /**\n   * Takes a list item and decides whether it should pass or be discarded.\n   * @param {ListItem} listItem the item to apply the filter to\n   * @returns {boolean} true to let the item pass through the filter, false to discard the item\n   */\n  (listItem: ListItem): boolean;\n}\n\n/**\n * Translator function to translate labels of list items added through {@link ListSelector.addItem}.\n *\n * This is intended to be used in conjunction with subclasses that populate themselves automatically\n * via the player API, e.g. {@link SubtitleSelectBox}.\n */\nexport interface ListItemLabelTranslator {\n  /**\n   * Takes a list item, optionally changes the label, and returns the new label.\n   * @param {ListItem} listItem the item to translate\n   * @returns {string} the translated or original label\n   */\n  (listItem: ListItem): string;\n}\n\n/**\n * Configuration interface for a {@link ListSelector}.\n */\nexport interface ListSelectorConfig extends ComponentConfig {\n  items?: ListItem[];\n  filter?: ListItemFilter;\n  translator?: ListItemLabelTranslator;\n}\n\nexport abstract class ListSelector<Config extends ListSelectorConfig> extends Component<ListSelectorConfig> {\n\n  protected items: ListItem[];\n  protected selectedItem: string;\n\n  private listSelectorEvents = {\n    onItemAdded: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemRemoved: new EventDispatcher<ListSelector<Config>, string>(),\n    onItemSelected: new EventDispatcher<ListSelector<Config>, string>(),\n  };\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      items: [],\n      cssClass: 'ui-listselector',\n    }, this.config);\n\n    this.items = this.config.items;\n  }\n\n  private getItemIndex(key: string): number {\n    for (let index in this.items) {\n      if (key === this.items[index].key) {\n        return parseInt(index);\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Returns all current items of this selector.\n   * * @returns {ListItem[]}\n   */\n  getItems(): ListItem[] {\n    return this.items;\n  }\n\n  /**\n   * Checks if the specified item is part of this selector.\n   * @param key the key of the item to check\n   * @returns {boolean} true if the item is part of this selector, else false\n   */\n  hasItem(key: string): boolean {\n    return this.getItemIndex(key) > -1;\n  }\n\n  /**\n   * Adds an item to this selector by doing a sorted insert or by appending the element to the end of the list of items.\n   * If an item with the specified key already exists, it is replaced.\n   * @param key the key of the item to add\n   * @param label the (human-readable) label of the item to add\n   * @param sortedInsert whether the item should be added respecting the order of keys\n   * @param ariaLabel custom aria label for the listItem\n   */\n  addItem(key: string, label: LocalizableText, sortedInsert = false, ariaLabel = '') {\n    const listItem = { key: key, label: i18n.performLocalization(label), ...(ariaLabel && { ariaLabel })};\n\n    // Apply filter function\n    if (this.config.filter && !this.config.filter(listItem)) {\n      return;\n    }\n\n    // Apply translator function\n    if (this.config.translator) {\n      listItem.label = this.config.translator(listItem);\n    }\n\n    // Try to remove key first to get overwrite behavior and avoid duplicate keys\n    this.removeItem(key); // This will trigger an ItemRemoved and an ItemAdded event\n\n    // Add the item to the list\n    if (sortedInsert) {\n      const index = this.items.findIndex(entry => entry.key > key);\n      if (index < 0) {\n        this.items.push(listItem);\n      } else {\n        this.items.splice(index, 0, listItem);\n      }\n    } else {\n      this.items.push(listItem);\n    }\n    this.onItemAddedEvent(key);\n  }\n\n  /**\n   * Removes an item from this selector.\n   * @param key the key of the item to remove\n   * @returns {boolean} true if removal was successful, false if the item is not part of this selector\n   */\n  removeItem(key: string): boolean {\n    let index = this.getItemIndex(key);\n    if (index > -1) {\n      ArrayUtils.remove(this.items, this.items[index]);\n      this.onItemRemovedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Selects an item from the items in this selector.\n   * @param key the key of the item to select\n   * @returns {boolean} true is the selection was successful, false if the selected item is not part of the selector\n   */\n  selectItem(key: string): boolean {\n    if (key === this.selectedItem) {\n      // itemConfig is already selected, suppress any further action\n      return true;\n    }\n\n    let index = this.getItemIndex(key);\n\n    if (index > -1) {\n      this.selectedItem = key;\n      this.onItemSelectedEvent(key);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the key of the selected item.\n   * @returns {string} the key of the selected item or null if no item is selected\n   */\n  getSelectedItem(): string | null {\n    return this.selectedItem;\n  }\n\n  /**\n   * Returns the items for the given key or undefined if no item with the given key exists.\n   * @param key the key of the item to return\n   * @returns {ListItem} the item with the requested key. Undefined if no item with the given key exists.\n   */\n  getItemForKey(key: string): ListItem {\n    return this.items.find((item) => item.key === key);\n  }\n\n  /**\n   * Synchronize the current items of this selector with the given ones. This will remove and add items selectively.\n   * For each removed item the ItemRemovedEvent and for each added item the ItemAddedEvent will be triggered. Favour\n   * this method over using clearItems and adding all items again afterwards.\n   * @param newItems\n   */\n  synchronizeItems(newItems: ListItem[]): void {\n    newItems\n      .filter((item) => !this.hasItem(item.key))\n      .forEach((item) => this.addItem(item.key, item.label, item.sortedInsert, item.ariaLabel));\n\n    this.items\n      .filter((item) => newItems.filter((i) => i.key === item.key).length === 0)\n      .forEach((item) => this.removeItem(item.key));\n  }\n\n  /**\n   * Removes all items from this selector.\n   */\n  clearItems() {\n    // local copy for iteration after clear\n    let items = this.items;\n    // clear items\n    this.items = [];\n\n    // clear the selection as the selected item is also removed\n    this.selectedItem = null;\n\n    // fire events\n    for (let item of items) {\n      this.onItemRemovedEvent(item.key);\n    }\n  }\n\n  /**\n   * Returns the number of items in this selector.\n   * @returns {number}\n   */\n  itemCount(): number {\n    return Object.keys(this.items).length;\n  }\n\n  protected onItemAddedEvent(key: string) {\n    this.listSelectorEvents.onItemAdded.dispatch(this, key);\n  }\n\n  protected onItemRemovedEvent(key: string) {\n    this.listSelectorEvents.onItemRemoved.dispatch(this, key);\n  }\n\n  protected onItemSelectedEvent(key: string) {\n    this.listSelectorEvents.onItemSelected.dispatch(this, key);\n  }\n\n  /**\n   * Gets the event that is fired when an item is added to the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemAdded(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemAdded.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is removed from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemRemoved(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemRemoved.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when an item is selected from the list of items.\n   * @returns {Event<ListSelector<Config>, string>}\n   */\n  get onItemSelected(): Event<ListSelector<Config>, string> {\n    return this.listSelectorEvents.onItemSelected.getEvent();\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Enumerates the types of content that the {@link MetadataLabel} can display.\n */\nexport enum MetadataLabelContent {\n  /**\n   * Title of the data source.\n   */\n  Title,\n  /**\n   * Description fo the data source.\n   */\n  Description,\n}\n\n/**\n * Configuration interface for {@link MetadataLabel}.\n */\nexport interface MetadataLabelConfig extends LabelConfig {\n  /**\n   * The type of content that should be displayed in the label.\n   */\n  content: MetadataLabelContent;\n}\n\n/**\n * A label that can be configured to display certain metadata.\n */\nexport class MetadataLabel extends Label<MetadataLabelConfig> {\n\n  constructor(config: MetadataLabelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['label-metadata', 'label-metadata-' + MetadataLabelContent[config.content].toLowerCase()],\n    } as MetadataLabelConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let uiconfig = uimanager.getConfig();\n\n    let init = () => {\n      switch (config.content) {\n        case MetadataLabelContent.Title:\n          this.setText(uiconfig.metadata.title);\n          break;\n        case MetadataLabelContent.Description:\n          this.setText(uiconfig.metadata.description);\n          break;\n      }\n    };\n\n    let unload = () => {\n      this.setText(null);\n    };\n\n    // Init label\n    init();\n    // Clear labels when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, unload);\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles Apple macOS picture-in-picture mode.\n */\nexport class PictureInPictureToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-piptogglebutton',\n      text: i18n.getLocalizer('pictureInPicture'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const isPictureInPictureAvailable = () => {\n      return player.isViewModeAvailable(player.exports.ViewMode.PictureInPicture);\n    };\n\n    const pictureInPictureStateHandler = () => {\n      player.getViewMode() === player.exports.ViewMode.PictureInPicture ? this.on() : this.off();\n    };\n\n    const pictureInPictureAvailabilityChangedHandler = () => {\n      isPictureInPictureAvailable() ? this.show() : this.hide();\n    };\n\n    player.on(player.exports.PlayerEvent.ViewModeChanged, pictureInPictureStateHandler);\n\n    // Available only in our native SDKs for now\n    if ((player.exports.PlayerEvent as any).ViewModeAvailabilityChanged) {\n      player.on(\n        (player.exports.PlayerEvent as any).ViewModeAvailabilityChanged,\n        pictureInPictureAvailabilityChangedHandler,\n      );\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(pictureInPictureAvailabilityChangedHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isPictureInPictureAvailable()) {\n        if (console) {\n          console.log('PIP unavailable');\n        }\n        return;\n      }\n\n      const targetViewMode =\n        player.getViewMode() === player.exports.ViewMode.PictureInPicture\n          ? player.exports.ViewMode.Inline\n          : player.exports.ViewMode.PictureInPicture;\n\n      player.setViewMode(targetViewMode);\n    });\n\n    // Startup init\n    pictureInPictureAvailabilityChangedHandler(); // Hide button if PIP not available\n    pictureInPictureStateHandler();\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection of different playback speeds.\n */\nexport class PlaybackSpeedSelectBox extends SelectBox {\n  protected defaultPlaybackSpeeds: number[];\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n    this.defaultPlaybackSpeeds = [0.25, 0.5, 1, 1.5, 2];\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-playbackspeedselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addDefaultItems();\n\n    this.onItemSelected.subscribe((sender: PlaybackSpeedSelectBox, value: string) => {\n      player.setPlaybackSpeed(parseFloat(value));\n      this.selectItem(value);\n    });\n\n    const setDefaultValue = (): void => {\n      const playbackSpeed = player.getPlaybackSpeed();\n      this.setSpeed(playbackSpeed);\n    };\n\n    player.on(player.exports.PlayerEvent.PlaybackSpeedChanged, setDefaultValue);\n    uimanager.getConfig().events.onUpdated.subscribe(setDefaultValue);\n  }\n\n  setSpeed(speed: number): void {\n    if (!this.selectItem(String(speed))) {\n      // a playback speed was set which is not in the list, add it to the list to show it to the user\n      this.clearItems();\n      this.addDefaultItems([speed]);\n      this.selectItem(String(speed));\n    }\n  }\n\n  addDefaultItems(customItems: number[] = []): void {\n    const sortedSpeeds = this.defaultPlaybackSpeeds.concat(customItems).sort();\n\n    sortedSpeeds.forEach(element => {\n      if (element !== 1) {\n        this.addItem(String(element), `${element}x`);\n      } else {\n        this.addItem(String(element), i18n.getLocalizer('normal'));\n      }\n    });\n  }\n\n  clearItems(): void {\n    this.items = [];\n    this.selectedItem = null;\n  }\n}","import {LabelConfig, Label} from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport {PlayerUtils} from '../playerutils';\nimport {StringUtils} from '../stringutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport enum PlaybackTimeLabelMode {\n  /**\n   * Displays the current time\n   */\n  CurrentTime,\n  /**\n   * Displays the duration of the content\n   */\n  TotalTime,\n  /**\n   * Displays the current time and the duration of the content\n   * Format: ${currentTime} / ${totalTime}\n   */\n  CurrentAndTotalTime,\n  /**\n   * Displays the remaining time of the content\n   */\n  RemainingTime,\n}\n\nexport interface PlaybackTimeLabelConfig extends LabelConfig {\n  /**\n   * The type of which time should be displayed in the label.\n   * Default: PlaybackTimeLabelMode.CurrentAndTotalTime\n   */\n  timeLabelMode?: PlaybackTimeLabelMode;\n  /**\n   * Boolean if the label should be hidden in live playback\n   */\n  hideInLivePlayback?: boolean;\n}\n\n/**\n * A label that display the current playback time and the total time through {@link PlaybackTimeLabel#setTime setTime}\n * or any string through {@link PlaybackTimeLabel#setText setText}.\n */\nexport class PlaybackTimeLabel extends Label<PlaybackTimeLabelConfig> {\n\n  private timeFormat: string;\n\n  constructor(config: PlaybackTimeLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <PlaybackTimeLabelConfig>{\n      cssClass: 'ui-playbacktimelabel',\n      timeLabelMode: PlaybackTimeLabelMode.CurrentAndTotalTime,\n      hideInLivePlayback: false,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let live = false;\n    let liveCssClass = this.prefixCss('ui-playbacktimelabel-live');\n    let liveEdgeCssClass = this.prefixCss('ui-playbacktimelabel-live-edge');\n    let minWidth = 0;\n\n    let liveClickHandler = () => {\n      player.timeShift(0);\n    };\n\n    let updateLiveState = () => {\n      // Player is playing a live stream when the duration is infinite\n      live = player.isLive();\n\n      // Attach/detach live marker class\n      if (live) {\n        this.getDomElement().addClass(liveCssClass);\n        this.setText(i18n.getLocalizer('live'));\n        if (config.hideInLivePlayback) {\n          this.hide();\n        }\n        this.onClick.subscribe(liveClickHandler);\n        updateLiveTimeshiftState();\n      } else {\n        this.getDomElement().removeClass(liveCssClass);\n        this.getDomElement().removeClass(liveEdgeCssClass);\n        this.show();\n        this.onClick.unsubscribe(liveClickHandler);\n      }\n    };\n\n    let updateLiveTimeshiftState = () => {\n      if (!live) {\n        return;\n      }\n\n      // The player is only at the live edge iff the stream is not shifted and it is actually playing or playback has\n      // never been started (meaning it isn't paused). A player that is paused is always behind the live edge.\n      // An exception is made for live streams without a timeshift window, because here we \"stop\" playback instead\n      // of pausing it (from a UI perspective), so we keep the live edge indicator on because a play would always\n      // resume at the live edge.\n      const isTimeshifted = player.getTimeShift() < 0;\n      const isTimeshiftAvailable = player.getMaxTimeShift() < 0;\n      if (!isTimeshifted && (!player.isPaused() || !isTimeshiftAvailable)) {\n        this.getDomElement().addClass(liveEdgeCssClass);\n      } else {\n        this.getDomElement().removeClass(liveEdgeCssClass);\n      }\n    };\n\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      live = args.live;\n      updateLiveState();\n    });\n    liveStreamDetector.detect(); // Initial detection\n\n    let playbackTimeHandler = () => {\n      if (!live && player.getDuration() !== Infinity) {\n        this.setTime(PlayerUtils.getCurrentTimeRelativeToSeekableRange(player), player.getDuration());\n      }\n\n      // To avoid 'jumping' in the UI by varying label sizes due to non-monospaced fonts,\n      // we gradually increase the min-width with the content to reach a stable size.\n      let width = this.getDomElement().width();\n      if (width > minWidth) {\n        minWidth = width;\n        this.getDomElement().css({\n          'min-width': minWidth + 'px',\n        });\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackTimeHandler);\n    player.on(player.exports.PlayerEvent.Seeked, playbackTimeHandler);\n\n    player.on(player.exports.PlayerEvent.TimeShift, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.TimeShifted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Playing, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.Paused, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallStarted, updateLiveTimeshiftState);\n    player.on(player.exports.PlayerEvent.StallEnded, updateLiveTimeshiftState);\n\n    let init = () => {\n      // Reset min-width when a new source is ready (especially for switching VOD/Live modes where the label content\n      // changes)\n      minWidth = 0;\n      this.getDomElement().css({\n        'min-width': null,\n      });\n\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n\n      // Update time after the format has been set\n      playbackTimeHandler();\n    };\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n\n    init();\n  }\n\n  /**\n   * Sets the current playback time and total duration.\n   * @param playbackSeconds the current playback time in seconds\n   * @param durationSeconds the total duration in seconds\n   */\n  setTime(playbackSeconds: number, durationSeconds: number) {\n    let currentTime = StringUtils.secondsToTime(playbackSeconds, this.timeFormat);\n    let totalTime = StringUtils.secondsToTime(durationSeconds, this.timeFormat);\n\n    switch ((<PlaybackTimeLabelConfig>this.config).timeLabelMode) {\n      case PlaybackTimeLabelMode.CurrentTime:\n        this.setText(`${currentTime}`);\n        break;\n      case PlaybackTimeLabelMode.TotalTime:\n        this.setText(`${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.CurrentAndTotalTime:\n        this.setText(`${currentTime} / ${totalTime}`);\n        break;\n      case PlaybackTimeLabelMode.RemainingTime:\n        let remainingTime = StringUtils.secondsToTime(durationSeconds - playbackSeconds, this.timeFormat);\n        this.setText(`${remainingTime}`);\n        break;\n    }\n  }\n\n  /**\n   * Sets the current time format\n   * @param timeFormat the time format\n   */\n  protected setTimeFormat(timeFormat: string): void {\n    this.timeFormat = timeFormat;\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {PlayerUtils} from '../playerutils';\nimport { PlayerAPI, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles between playback and pause.\n */\nexport class PlaybackToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  private static readonly CLASS_STOPTOGGLE = 'stoptoggle';\n  protected isPlayInitiated: boolean;\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktogglebutton',\n      text: i18n.getLocalizer('play'),\n      onAriaLabel: i18n.getLocalizer('pause'),\n      offAriaLabel: i18n.getLocalizer('play'),\n    }, this.config);\n\n    this.isPlayInitiated = false;\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, handleClickEvent: boolean = true): void {\n    super.configure(player, uimanager);\n\n    let isSeeking = false;\n\n    // Handler to update button state based on player state\n    let playbackStateHandler = () => {\n      // If the UI is currently seeking, playback is temporarily stopped but the buttons should\n      // not reflect that and stay as-is (e.g indicate playback while seeking).\n      if (isSeeking) {\n        return;\n      }\n\n      if (player.isPlaying() || this.isPlayInitiated) {\n        this.on();\n      } else {\n        this.off();\n      }\n    };\n\n    // Call handler upon these events\n    player.on(player.exports.PlayerEvent.Play, (e) => {\n      this.isPlayInitiated = true;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Paused, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n\n    player.on(player.exports.PlayerEvent.Playing, (e) => {\n      this.isPlayInitiated = false;\n      playbackStateHandler();\n    });\n    // after unloading + loading a new source, the player might be in a different playing state (from playing into stopped)\n    player.on(player.exports.PlayerEvent.SourceLoaded, playbackStateHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(playbackStateHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, playbackStateHandler);\n    // when playback finishes, player turns to paused mode\n    player.on(player.exports.PlayerEvent.PlaybackFinished, playbackStateHandler);\n    player.on(player.exports.PlayerEvent.CastStarted, playbackStateHandler);\n\n    // When a playback attempt is rejected with warning 5008, we switch the button state back to off\n    // This is required for blocked autoplay, because there is no Paused event in such case\n    player.on(player.exports.PlayerEvent.Warning, (event: WarningEvent) => {\n      if (event.code === player.exports.WarningCode.PLAYBACK_COULD_NOT_BE_STARTED) {\n        this.isPlayInitiated = false;\n        this.off();\n      }\n    });\n\n    const updateLiveState = () => {\n      const showStopToggle = player.isLive() && !PlayerUtils.isTimeShiftAvailable(player);\n\n      if (showStopToggle) {\n        this.getDomElement().addClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      } else {\n        this.getDomElement().removeClass(this.prefixCss(PlaybackToggleButton.CLASS_STOPTOGGLE));\n      }\n    };\n\n    // Detect absence of timeshifting on live streams and add tagging class to convert button icons to play/stop\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe(() => updateLiveState());\n    liveStreamDetector.onLiveChanged.subscribe(() => updateLiveState());\n\n    timeShiftDetector.detect(); // Initial detection\n    liveStreamDetector.detect();\n\n    if (handleClickEvent) {\n      // Control player by button events\n      // When a button event triggers a player API call, events are fired which in turn call the event handler\n      // above that updated the button state.\n      this.onClick.subscribe(() => {\n        if (player.isPlaying() || this.isPlayInitiated) {\n          player.pause('ui');\n        } else {\n          player.play('ui');\n        }\n      });\n    }\n\n    // Track UI seeking status\n    uimanager.onSeek.subscribe(() => {\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n    });\n\n    // Startup init\n    playbackStateHandler();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {HugePlaybackToggleButton} from './hugeplaybacktogglebutton';\n\n/**\n * Overlays the player and displays error messages.\n */\nexport class PlaybackToggleOverlay extends Container<ContainerConfig> {\n\n  private playbackToggleButton: HugePlaybackToggleButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.playbackToggleButton = new HugePlaybackToggleButton();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-playbacktoggle-overlay',\n      components: [this.playbackToggleButton],\n    }, this.config);\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\nimport {UIInstanceManager} from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {HugeReplayButton} from './hugereplaybutton';\nimport { UIRecommendationConfig } from '../uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Overlays the player and displays recommended videos.\n */\nexport class RecommendationOverlay extends Container<ContainerConfig> {\n\n  private replayButton: HugeReplayButton;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.replayButton = new HugeReplayButton();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-overlay',\n      hidden: true,\n      components: [this.replayButton],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let clearRecommendations = () => {\n      for (let component of this.getComponents().slice()) {\n        if (component instanceof RecommendationItem) {\n          this.removeComponent(component);\n        }\n      }\n      this.updateComponents();\n      this.getDomElement().removeClass(this.prefixCss('recommendations'));\n    };\n\n    let setupRecommendations = () => {\n      clearRecommendations();\n\n      const recommendations = uimanager.getConfig().recommendations;\n\n      if (recommendations.length > 0) {\n        let index = 1;\n        for (let item of recommendations) {\n          this.addComponent(new RecommendationItem({\n            itemConfig: item,\n            cssClasses: ['recommendation-item-' + (index++)],\n          }));\n        }\n        this.updateComponents(); // create container DOM elements\n\n        this.getDomElement().addClass(this.prefixCss('recommendations'));\n      }\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(setupRecommendations);\n    // Remove recommendations and hide overlay when source is unloaded\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      clearRecommendations();\n      this.hide();\n    });\n    // Display recommendations when playback has finished\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      this.show();\n    });\n    // Hide recommendations when playback starts, e.g. a restart\n    player.on(player.exports.PlayerEvent.Play, () => {\n      this.hide();\n    });\n\n    // Init on startup\n    setupRecommendations();\n  }\n}\n\n/**\n * Configuration interface for the {@link RecommendationItem}\n */\ninterface RecommendationItemConfig extends ComponentConfig {\n  itemConfig: UIRecommendationConfig;\n}\n\n/**\n * An item of the {@link RecommendationOverlay}. Used only internally in {@link RecommendationOverlay}.\n */\nclass RecommendationItem extends Component<RecommendationItemConfig> {\n\n  constructor(config: RecommendationItemConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-recommendation-item',\n      itemConfig: null, // this must be passed in from outside\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let config = this.config.itemConfig;\n\n    let itemElement = new DOM('a', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'href': config.url,\n    }).css({ 'background-image': `url(${config.thumbnail})` });\n\n    let bgElement = new DOM('div', {\n      'class': this.prefixCss('background'),\n    });\n    itemElement.append(bgElement);\n\n    let titleElement = new DOM('span', {\n      'class': this.prefixCss('title'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innertitle'),\n    }).html(config.title));\n    itemElement.append(titleElement);\n\n    let timeElement = new DOM('span', {\n      'class': this.prefixCss('duration'),\n    }).append(new DOM('span', {\n      'class': this.prefixCss('innerduration'),\n    }).html(config.duration ? StringUtils.secondsToTime(config.duration) : ''));\n    itemElement.append(timeElement);\n\n    return itemElement;\n  }\n}","import { Component, ComponentConfig } from './component';\nimport { DOM } from '../dom';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SeekBarLabel } from './seekbarlabel';\nimport { UIInstanceManager, SeekPreviewArgs } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { PlayerUtils } from '../playerutils';\nimport TimeShiftAvailabilityChangedArgs = PlayerUtils.TimeShiftAvailabilityChangedArgs;\nimport LiveStreamDetectorEventArgs = PlayerUtils.LiveStreamDetectorEventArgs;\nimport { TimelineMarker } from '../uiconfig';\nimport { PlayerAPI, PlayerEventBase } from 'bitmovin-player';\nimport { StringUtils } from '../stringutils';\nimport { SeekBarType, SeekBarController } from './seekbarcontroller';\nimport { i18n } from '../localization/i18n';\nimport { BrowserUtils } from '../browserutils';\nimport { TimelineMarkersHandler } from './timelinemarkershandler';\nimport { getMinBufferLevel } from './seekbarbufferlevel';\n\n/**\n * Configuration interface for the {@link SeekBar} component.\n */\nexport interface SeekBarConfig extends ComponentConfig {\n  /**\n   * The label above the seek position.\n   */\n  label?: SeekBarLabel;\n  /**\n   * Bar will be vertical instead of horizontal if set to true.\n   */\n  vertical?: boolean;\n  /**\n   * The interval in milliseconds in which the playback position on the seek bar will be updated. The shorter the\n   * interval, the smoother it looks and the more resource intense it is. The update interval will be kept as steady\n   * as possible to avoid jitter.\n   * Set to -1 to disable smooth updating and update it on player TimeChanged events instead.\n   * Default: 50 (50ms = 20fps).\n   */\n  smoothPlaybackPositionUpdateIntervalMs?: number;\n\n  /**\n   * Used for seekBar control increments and decrements\n   */\n  keyStepIncrements?: { leftRight: number, upDown: number };\n\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n\n  /**\n   * Used to enable/disable seek preview\n   */\n  enableSeekPreview?: boolean;\n}\n\n/**\n * Event argument interface for a seek preview event.\n */\nexport interface SeekPreviewEventArgs extends SeekPreviewArgs {\n  /**\n   * Tells if the seek preview event comes from a scrubbing.\n   */\n  scrubbing: boolean;\n}\n\nexport interface SeekBarMarker {\n  marker: TimelineMarker;\n  position: number;\n  duration?: number;\n  element?: DOM;\n}\n\n/**\n * A seek bar to seek within the player's media. It displays the current playback position, amount of buffed data, seek\n * target, and keeps status about an ongoing seek.\n *\n * The seek bar displays different 'bars':\n *  - the playback position, i.e. the position in the media at which the player current playback pointer is positioned\n *  - the buffer position, which usually is the playback position plus the time span that is already buffered ahead\n *  - the seek position, used to preview to where in the timeline a seek will jump to\n */\nexport class SeekBar extends Component<SeekBarConfig> {\n\n  public static readonly SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED = -1;\n\n  /**\n   * The CSS class that is added to the DOM element while the seek bar is in 'seeking' state.\n   */\n  private static readonly CLASS_SEEKING = 'seeking';\n\n  private seekBar: DOM;\n  private seekBarPlaybackPosition: DOM;\n  private seekBarPlaybackPositionMarker: DOM;\n  private seekBarBufferPosition: DOM;\n  private seekBarSeekPosition: DOM;\n  private seekBarBackdrop: DOM;\n\n  private label: SeekBarLabel;\n\n  private seekBarMarkersContainer: DOM;\n  private timelineMarkersHandler: TimelineMarkersHandler;\n\n  private player: PlayerAPI;\n\n  protected seekBarType: SeekBarType;\n\n  protected isUiShown: boolean;\n\n  /**\n   * Buffer of the the current playback position. The position must be buffered in case the element\n   * needs to be refreshed with {@link #refreshPlaybackPosition}.\n   * @type {number}\n   */\n  private playbackPositionPercentage = 0;\n\n  private smoothPlaybackPositionUpdater: Timeout;\n  private pausedTimeshiftUpdater: Timeout;\n\n  private isUserSeeking = false;\n\n  private seekBarEvents = {\n    /**\n     * Fired when a scrubbing seek operation is started.\n     */\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    /**\n     * Fired during a scrubbing seek to indicate that the seek preview (i.e. the video frame) should be updated.\n     */\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewEventArgs>(),\n    /**\n     * Fired when a scrubbing seek has finished or when a direct seek is issued.\n     */\n    onSeeked: new EventDispatcher<SeekBar, number>(),\n  };\n\n  constructor(config: SeekBarConfig = {}) {\n    super(config);\n\n    const keyStepIncrements = this.config.keyStepIncrements || {\n      leftRight: 1,\n      upDown: 5,\n    };\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar',\n      vertical: false,\n      smoothPlaybackPositionUpdateIntervalMs: 50,\n      keyStepIncrements,\n      ariaLabel: i18n.getLocalizer('seekBar'),\n      tabIndex: 0,\n      snappingRange: 1,\n      enableSeekPreview: true,\n    }, this.config);\n\n    this.label = this.config.label;\n  }\n\n  initialize(): void {\n    super.initialize();\n\n    if (this.hasLabel()) {\n      this.getLabel().initialize();\n    }\n  }\n\n  protected setAriaSliderMinMax(min: string, max: string) {\n    this.getDomElement().attr('aria-valuemin', min);\n    this.getDomElement().attr('aria-valuemax', max);\n  }\n\n  private setAriaSliderValues() {\n    if (this.seekBarType === SeekBarType.Live) {\n      const timeshiftValue = Math.ceil(this.player.getTimeShift()).toString();\n      this.getDomElement().attr('aria-valuenow', timeshiftValue);\n      this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.timeshift'))} ${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${timeshiftValue}`);\n    } else if (this.seekBarType === SeekBarType.Vod) {\n      const ariaValueText = `${StringUtils.secondsToText(this.player.getCurrentTime())} ${i18n.performLocalization(i18n.getLocalizer('seekBar.durationText'))} ${StringUtils.secondsToText(this.player.getDuration())}`;\n      this.getDomElement().attr('aria-valuenow', Math.floor(this.player.getCurrentTime()).toString());\n      this.getDomElement().attr('aria-valuetext', ariaValueText);\n    }\n  }\n\n  private getPlaybackPositionPercentage(): number {\n    if (this.player.isLive()) {\n      return 100 - (100 / this.player.getMaxTimeShift() * this.player.getTimeShift());\n    }\n\n    return 100 / this.player.getDuration() * this.getRelativeCurrentTime();\n  }\n\n  private updateBufferLevel(playbackPositionPercentage: number): void {\n\n    let bufferLoadedPercentageLevel: number;\n    if (this.player.isLive()) {\n      // Always show full buffer for live streams\n      bufferLoadedPercentageLevel = 100;\n    } else {\n      bufferLoadedPercentageLevel = playbackPositionPercentage + getMinBufferLevel(this.player);\n    }\n\n    this.setBufferPosition(bufferLoadedPercentageLevel);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager, configureSeek: boolean = true): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n\n    // Apply scaling transform to the backdrop bar to have all bars rendered similarly\n    // (the call must be up here to be executed for the volume slider as well)\n    this.setPosition(this.seekBarBackdrop, 100);\n\n    // Add seekbar controls to the seekbar\n    const seekBarController = new SeekBarController(this.config.keyStepIncrements, player, uimanager.getConfig().volumeController);\n\n    seekBarController.setSeekBarControls(this.getDomElement(), () => this.seekBarType);\n\n    // The configureSeek flag can be used by subclasses to disable configuration as seek bar. E.g. the volume\n    // slider is reusing this component but adds its own functionality, and does not need the seek functionality.\n    // This is actually a hack, the proper solution would be for both seek bar and volume sliders to extend\n    // a common base slider component and implement their functionality there.\n    if (!configureSeek) {\n      this.seekBarType = SeekBarType.Volume;\n\n      return;\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      this.isUiShown = true;\n    });\n\n    uimanager.onControlsHide.subscribe(() => {\n      this.isUiShown = false;\n    });\n\n    let isPlaying = false;\n    let scrubbing = false;\n    let isPlayerSeeking = false;\n\n    // Update playback and buffer positions\n    let playbackPositionHandler = (event: PlayerEventBase = null, forceUpdate: boolean = false) => {\n      if (this.isUserSeeking) {\n        // We caught a seek preview seek, do not update the seekbar\n        return;\n      }\n\n      let playbackPositionPercentage = this.getPlaybackPositionPercentage();\n\n      this.updateBufferLevel(playbackPositionPercentage);\n\n      // The segment request finished is used to help the playback position move, when the smooth playback position is not enabled.\n      // At the same time when the user is scrubbing, we also move the position of the seekbar to display a preview during scrubbing.\n      // When the user is scrubbing we do not record this as a user seek operation, as the user has yet to finish their seek,\n      // but we should not move the playback position to not create a jumping behaviour.\n      if (scrubbing && event.type === player.exports.PlayerEvent.SegmentRequestFinished && playbackPositionPercentage !== this.playbackPositionPercentage) {\n        playbackPositionPercentage = this.playbackPositionPercentage;\n      }\n\n      if (player.isLive()) {\n        if (player.getMaxTimeShift() === 0) {\n          // This case must be explicitly handled to avoid division by zero\n          this.setPlaybackPosition(100);\n        } else {\n          if (!this.isSeeking()) {\n            this.setPlaybackPosition(playbackPositionPercentage);\n          }\n\n          this.setAriaSliderMinMax(player.getMaxTimeShift().toString(), '0');\n        }\n      } else {\n        // Update playback position only in paused state or in the initial startup state where player is neither\n        // paused nor playing. Playback updates are handled in the Timeout below.\n        const isInInitialStartupState = this.config.smoothPlaybackPositionUpdateIntervalMs === SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED\n            || forceUpdate || player.isPaused();\n        const isNeitherPausedNorPlaying = player.isPaused() === player.isPlaying();\n\n        if ((isInInitialStartupState || isNeitherPausedNorPlaying) && !this.isSeeking()) {\n          this.setPlaybackPosition(playbackPositionPercentage);\n        }\n\n        this.setAriaSliderMinMax('0', player.getDuration().toString());\n      }\n\n      if (this.isUiShown) {\n        this.setAriaSliderValues();\n      }\n    };\n\n    // Update seekbar upon these events\n    // init playback position when the player is ready\n    player.on(player.exports.PlayerEvent.Ready, playbackPositionHandler);\n    // update playback position when it changes\n    player.on(player.exports.PlayerEvent.TimeChanged, playbackPositionHandler);\n    // update bufferlevel when buffering is complete\n    player.on(player.exports.PlayerEvent.StallEnded, playbackPositionHandler);\n    // update playback position when a timeshift has finished\n    player.on(player.exports.PlayerEvent.TimeShifted, playbackPositionHandler);\n    // update bufferlevel when a segment has been downloaded\n    player.on(player.exports.PlayerEvent.SegmentRequestFinished, playbackPositionHandler);\n\n    this.configureLivePausedTimeshiftUpdater(player, uimanager, playbackPositionHandler);\n\n    // Seek handling\n    let onPlayerSeek = () => {\n      isPlayerSeeking = true;\n      this.setSeeking(true);\n      scrubbing = false;\n    };\n\n    let onPlayerSeeked = (event: PlayerEventBase = null, forceUpdate: boolean = false ) => {\n      isPlayerSeeking = false;\n      this.setSeeking(false);\n\n      // update playback position when a seek has finished\n      playbackPositionHandler(event, forceUpdate);\n    };\n\n    let restorePlayingState = function () {\n      // Continue playback after seek if player was playing when seek started\n      if (isPlaying) {\n        // use the same issuer here as in the pause on seek\n        player.play('ui-seek');\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.Seek, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.Seeked, onPlayerSeeked);\n    player.on(player.exports.PlayerEvent.TimeShift, onPlayerSeek);\n    player.on(player.exports.PlayerEvent.TimeShifted, onPlayerSeeked);\n\n    this.onSeek.subscribe((sender) => {\n      this.isUserSeeking = true; // track seeking status so we can catch events from seek preview seeks\n\n      // Notify UI manager of started seek\n      uimanager.onSeek.dispatch(sender);\n\n      // Save current playback state before performing the seek\n      if (!isPlayerSeeking) {\n        isPlaying = player.isPlaying();\n\n        // Pause playback while seeking\n        if (isPlaying) {\n          // use a different issuer here, as play/pause on seek is not \"really\" triggerd by the user\n          player.pause('ui-seek');\n        }\n      }\n\n    });\n    this.onSeekPreview.subscribe((sender: SeekBar, args: SeekPreviewEventArgs) => {\n      // Notify UI manager of seek preview\n      uimanager.onSeekPreview.dispatch(sender, args);\n      scrubbing = args.scrubbing;\n    });\n\n    // Set enableSeekPreview if set in the uimanager config\n    if (typeof uimanager.getConfig().enableSeekPreview === 'boolean') {\n      this.config.enableSeekPreview = uimanager.getConfig().enableSeekPreview;\n    }\n\n    // Rate-limited scrubbing seek\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.subscribeRateLimited(this.seekWhileScrubbing, 200);\n    }\n\n    this.onSeeked.subscribe((sender, percentage) => {\n      this.isUserSeeking = false;\n\n      // Do the seek\n      this.seek(percentage);\n\n      // Notify UI manager of finished seek\n      uimanager.onSeeked.dispatch(sender);\n\n      // Continue playback after seek if player was playing when seek started\n      restorePlayingState();\n    });\n\n    if (this.hasLabel()) {\n      // Configure a seekbar label that is internal to the seekbar)\n      this.getLabel().configure(player, uimanager);\n    }\n\n    // Hide seekbar for live sources without timeshift\n    let isLive = false;\n    let hasTimeShift = false;\n    let switchVisibility = (isLive: boolean, hasTimeShift: boolean) => {\n      if (isLive && !hasTimeShift) {\n        this.hide();\n      } else {\n        this.show();\n      }\n      playbackPositionHandler(null, true);\n      this.refreshPlaybackPosition();\n    };\n    let liveStreamDetector = new PlayerUtils.LiveStreamDetector(player, uimanager);\n    liveStreamDetector.onLiveChanged.subscribe((sender, args: LiveStreamDetectorEventArgs) => {\n      isLive = args.live;\n      if (isLive && this.smoothPlaybackPositionUpdater != null) {\n        this.smoothPlaybackPositionUpdater.clear();\n        this.seekBarType = SeekBarType.Live;\n      } else {\n        this.seekBarType = SeekBarType.Vod;\n      }\n      switchVisibility(isLive, hasTimeShift);\n    });\n    let timeShiftDetector = new PlayerUtils.TimeShiftAvailabilityDetector(player);\n    timeShiftDetector.onTimeShiftAvailabilityChanged.subscribe((sender, args: TimeShiftAvailabilityChangedArgs) => {\n      hasTimeShift = args.timeShiftAvailable;\n      switchVisibility(isLive, hasTimeShift);\n    });\n    // Initial detection\n    liveStreamDetector.detect();\n    timeShiftDetector.detect();\n\n    // Refresh the playback position when the player resized or the UI is configured. The playback position marker\n    // is positioned absolutely and must therefore be updated when the size of the seekbar changes.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Additionally, when this code is called, the seekbar is not part of the UI yet and therefore does not have a size,\n    // resulting in a wrong initial position of the marker. Refreshing it once the UI is configured solved this issue.\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    // It can also happen when a new source is loaded\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      this.refreshPlaybackPosition();\n    });\n    // Add markers when a source is loaded or update when a marker is added or removed\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      playbackPositionHandler();\n    });\n\n    // Set the snappingRange if set in the uimanager config\n    if (typeof uimanager.getConfig().seekbarSnappingRange === 'number') {\n      this.config.snappingRange = uimanager.getConfig().seekbarSnappingRange;\n    }\n\n    // Initialize seekbar\n    playbackPositionHandler(); // Set the playback position\n    this.setBufferPosition(0);\n    this.setSeekPosition(0);\n    if (this.config.smoothPlaybackPositionUpdateIntervalMs !== SeekBar.SMOOTH_PLAYBACK_POSITION_UPDATE_DISABLED) {\n      this.configureSmoothPlaybackPositionUpdater(player, uimanager);\n    }\n\n    // Initialize markers\n    this.initializeTimelineMarkers(player, uimanager);\n  }\n\n  private initializeTimelineMarkers(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const timelineMarkerConfig = {\n      cssPrefix: this.config.cssPrefix,\n      snappingRange: this.config.snappingRange,\n    };\n    this.timelineMarkersHandler = new TimelineMarkersHandler(timelineMarkerConfig, () => this.seekBar.width(), this.seekBarMarkersContainer);\n    this.timelineMarkersHandler.initialize(player, uimanager);\n  }\n\n  private seekWhileScrubbing = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing) {\n      this.seek(args.position);\n    }\n  };\n\n  private seek = (percentage: number) => {\n    if (this.player.isLive()) {\n      const maxTimeShift = this.player.getMaxTimeShift();\n      this.player.timeShift(maxTimeShift - (maxTimeShift * (percentage / 100)), 'ui');\n    } else {\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const relativeSeekTarget = this.player.getDuration() * (percentage / 100);\n      const absoluteSeekTarget = relativeSeekTarget + seekableRangeStart;\n      this.player.seek(absoluteSeekTarget, 'ui');\n    }\n  };\n\n  /**\n   * Update seekbar while a live stream with DVR window is paused.\n   * The playback position stays still and the position indicator visually moves towards the back.\n   */\n  private configureLivePausedTimeshiftUpdater(\n    player: PlayerAPI,\n    uimanager: UIInstanceManager,\n    playbackPositionHandler: () => void,\n  ): void {\n    // Regularly update the playback position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, playbackPositionHandler, true);\n\n    // Start updater when a live stream with timeshift window is paused\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      if (player.isLive() && player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    player.on(player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  private configureSmoothPlaybackPositionUpdater(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    /*\n     * Playback position update\n     *\n     * We do not update the position directly from the TimeChanged event, because it arrives very jittery and\n     * results in a jittery position indicator since the CSS transition time is statically set.\n     * To work around this issue, we maintain a local playback position that is updated in a stable regular interval\n     * and kept in sync with the player.\n     */\n    let currentTimeSeekBar = 0;\n    let currentTimePlayer = 0;\n    let updateIntervalMs = 50;\n    let currentTimeUpdateDeltaSecs = updateIntervalMs / 1000;\n\n    this.smoothPlaybackPositionUpdater = new Timeout(updateIntervalMs, () => {\n      if (this.isSeeking()) {\n        return;\n      }\n\n      currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n\n      try {\n        currentTimePlayer = this.getRelativeCurrentTime();\n      } catch (error) {\n        // Detect if the player has been destroyed and stop updating if so\n        if (error instanceof player.exports.PlayerAPINotAvailableError) {\n          this.smoothPlaybackPositionUpdater.clear();\n        }\n\n        // If the current time cannot be read it makes no sense to continue\n        return;\n      }\n\n      // Sync currentTime of seekbar to player\n      let currentTimeDelta = currentTimeSeekBar - currentTimePlayer;\n      // If the delta is larger that 2 secs, directly jump the seekbar to the\n      // player time instead of smoothly fast forwarding/rewinding.\n      if (Math.abs(currentTimeDelta) > 2) {\n        currentTimeSeekBar = currentTimePlayer;\n      }\n      // If currentTimeDelta is negative and below the adjustment threshold,\n      // the player is ahead of the seekbar and we 'fast forward' the seekbar\n      else if (currentTimeDelta <= -currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar += currentTimeUpdateDeltaSecs;\n      }\n      // If currentTimeDelta is positive and above the adjustment threshold,\n      // the player is behind the seekbar and we 'rewind' the seekbar\n      else if (currentTimeDelta >= currentTimeUpdateDeltaSecs) {\n        currentTimeSeekBar -= currentTimeUpdateDeltaSecs;\n      }\n\n      let playbackPositionPercentage = 100 / player.getDuration() * currentTimeSeekBar;\n      this.setPlaybackPosition(playbackPositionPercentage);\n    }, true);\n\n    let startSmoothPlaybackPositionUpdater = () => {\n      if (!player.isLive()) {\n        currentTimeSeekBar = this.getRelativeCurrentTime();\n        this.smoothPlaybackPositionUpdater.start();\n      }\n    };\n\n    let stopSmoothPlaybackPositionUpdater = () => {\n      this.smoothPlaybackPositionUpdater.clear();\n    };\n\n    player.on(player.exports.PlayerEvent.Play, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Playing, startSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Paused, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, stopSmoothPlaybackPositionUpdater);\n    player.on(player.exports.PlayerEvent.Seeked, () => {\n      currentTimeSeekBar = this.getRelativeCurrentTime();\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, stopSmoothPlaybackPositionUpdater);\n\n    if (player.isPlaying()) {\n      startSmoothPlaybackPositionUpdater();\n    }\n  }\n\n  private getRelativeCurrentTime(): number {\n    return PlayerUtils.getCurrentTimeRelativeToSeekableRange(this.player);\n  }\n\n  release(): void {\n    super.release();\n\n    if (this.smoothPlaybackPositionUpdater) { // object must not necessarily exist, e.g. in volume slider subclass\n      this.smoothPlaybackPositionUpdater.clear();\n    }\n\n    if (this.pausedTimeshiftUpdater) {\n      this.pausedTimeshiftUpdater.clear();\n    }\n\n    if (this.config.enableSeekPreview) {\n      this.onSeekPreview.unsubscribe(this.seekWhileScrubbing);\n    }\n  }\n\n  protected toDomElement(): DOM {\n    if (this.config.vertical) {\n      this.config.cssClasses.push('vertical');\n    }\n\n    let seekBarContainer = new DOM('div', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'role': 'slider',\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n      'tabindex': this.config.tabIndex.toString(),\n    });\n\n    let seekBar = new DOM('div', {\n      'class': this.prefixCss('seekbar'),\n    });\n    this.seekBar = seekBar;\n\n    // Indicator that shows the buffer fill level\n    let seekBarBufferLevel = new DOM('div', {\n      'class': this.prefixCss('seekbar-bufferlevel'),\n    });\n    this.seekBarBufferPosition = seekBarBufferLevel;\n\n    // Indicator that shows the current playback position\n    let seekBarPlaybackPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition'),\n    });\n    this.seekBarPlaybackPosition = seekBarPlaybackPosition;\n\n    // A marker of the current playback position, e.g. a dot or line\n    let seekBarPlaybackPositionMarker = new DOM('div', {\n      'class': this.prefixCss('seekbar-playbackposition-marker'),\n    });\n    this.seekBarPlaybackPositionMarker = seekBarPlaybackPositionMarker;\n\n    // Indicator that show where a seek will go to\n    let seekBarSeekPosition = new DOM('div', {\n      'class': this.prefixCss('seekbar-seekposition'),\n    });\n    this.seekBarSeekPosition = seekBarSeekPosition;\n\n    // Indicator that shows the full seekbar\n    let seekBarBackdrop = new DOM('div', {\n      'class': this.prefixCss('seekbar-backdrop'),\n    });\n    this.seekBarBackdrop = seekBarBackdrop;\n\n    let seekBarChapterMarkersContainer = new DOM('div', {\n      'class': this.prefixCss('seekbar-markers'),\n    });\n    this.seekBarMarkersContainer = seekBarChapterMarkersContainer;\n\n    seekBar.append(this.seekBarBackdrop, this.seekBarBufferPosition, this.seekBarSeekPosition,\n      this.seekBarPlaybackPosition, this.seekBarMarkersContainer, this.seekBarPlaybackPositionMarker);\n\n    let seeking = false;\n\n    // Define handler functions so we can attach/remove them later\n    let mouseTouchMoveHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      let targetPercentage = 100 * this.getOffset(e);\n      this.setSeekPosition(targetPercentage);\n      this.setPlaybackPosition(targetPercentage);\n      this.onSeekPreviewEvent(targetPercentage, true);\n    };\n\n    let mouseTouchUpHandler = (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      // Remove handlers, seek operation is finished\n      new DOM(document).off('touchmove mousemove', mouseTouchMoveHandler);\n      new DOM(document).off('touchend mouseup', mouseTouchUpHandler);\n\n      let targetPercentage = 100 * this.getOffset(e);\n      let snappedChapter = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(targetPercentage);\n\n      this.setSeeking(false);\n      seeking = false;\n\n      // Fire seeked event\n      this.onSeekedEvent(snappedChapter ? snappedChapter.position : targetPercentage);\n    };\n\n    // A seek always start with a touchstart or mousedown directly on the seekbar.\n    // To track a mouse seek also outside the seekbar (for touch events this works automatically),\n    // so the user does not need to take care that the mouse always stays on the seekbar, we attach the mousemove\n    // and mouseup handlers to the whole document. A seek is triggered when the user lifts the mouse key.\n    // A seek mouse gesture is thus basically a click with a long time frame between down and up events.\n    seekBar.on('touchstart mousedown', (e: MouseEvent | TouchEvent) => {\n      let isTouchEvent = BrowserUtils.isTouchSupported && this.isTouchEvent(e);\n\n      // Prevent selection of DOM elements (also prevents mousedown if current event is touchstart)\n      e.preventDefault();\n      // Avoid propagation to VR handler\n      if (this.player.vr != null) {\n        e.stopPropagation();\n      }\n\n      this.setSeeking(true); // Set seeking class on DOM element\n      seeking = true; // Set seek tracking flag\n\n      // Fire seeked event\n      this.onSeekEvent();\n\n      // Add handler to track the seek operation over the whole document\n      new DOM(document).on(isTouchEvent ? 'touchmove' : 'mousemove', mouseTouchMoveHandler);\n      new DOM(document).on(isTouchEvent ? 'touchend' : 'mouseup', mouseTouchUpHandler);\n    });\n\n    // Display seek target indicator when mouse hovers or finger slides over seekbar\n    seekBar.on('touchmove mousemove', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      if (seeking) {\n        mouseTouchMoveHandler(e);\n      }\n\n      let position = 100 * this.getOffset(e);\n      this.setSeekPosition(position);\n\n      this.onSeekPreviewEvent(position, false);\n\n      if (this.hasLabel() && this.getLabel().isHidden()) {\n        this.getLabel().show();\n      }\n    });\n\n    // Hide seek target indicator when mouse or finger leaves seekbar\n    seekBar.on('touchend mouseleave', (e: MouseEvent | TouchEvent) => {\n      e.preventDefault();\n\n      this.setSeekPosition(0);\n\n      if (this.hasLabel()) {\n        this.getLabel().hide();\n      }\n    });\n\n    seekBarContainer.append(seekBar);\n\n    if (this.label) {\n      seekBarContainer.append(this.label.getDomElement());\n    }\n\n    return seekBarContainer;\n  }\n\n  /**\n   * Gets the horizontal offset of a mouse/touch event point from the left edge of the seek bar.\n   * @param eventPageX the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the left edge and 1 is the right edge\n   */\n  private getHorizontalOffset(eventPageX: number): number {\n    let elementOffsetPx = this.seekBar.offset().left;\n    let widthPx = this.seekBar.width();\n    let offsetPx = eventPageX - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the vertical offset of a mouse/touch event point from the bottom edge of the seek bar.\n   * @param eventPageY the pageX coordinate of an event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1], where 0 is the bottom edge and 1 is the top edge\n   */\n  private getVerticalOffset(eventPageY: number): number {\n    let elementOffsetPx = this.seekBar.offset().top;\n    let widthPx = this.seekBar.height();\n    let offsetPx = eventPageY - elementOffsetPx;\n    let offset = 1 / widthPx * offsetPx;\n\n    return 1 - this.sanitizeOffset(offset);\n  }\n\n  /**\n   * Gets the mouse or touch event offset for the current configuration (horizontal or vertical).\n   * @param e the event to calculate the offset from\n   * @returns {number} a number in the range of [0, 1]\n   * @see #getHorizontalOffset\n   * @see #getVerticalOffset\n   */\n  private getOffset(e: MouseEvent | TouchEvent): number {\n    if (BrowserUtils.isTouchSupported && this.isTouchEvent(e)) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.type === 'touchend' ? e.changedTouches[0].pageY : e.touches[0].pageY);\n      } else {\n        return this.getHorizontalOffset(e.type === 'touchend' ? e.changedTouches[0].pageX : e.touches[0].pageX);\n      }\n    }\n    else if (e instanceof MouseEvent) {\n      if (this.config.vertical) {\n        return this.getVerticalOffset(e.pageY);\n      } else {\n        return this.getHorizontalOffset(e.pageX);\n      }\n    }\n    else {\n      if (console) {\n        console.warn('invalid event');\n      }\n      return 0;\n    }\n  }\n\n  /**\n   * Sanitizes the mouse offset to the range of [0, 1].\n   *\n   * When tracking the mouse outside the seek bar, the offset can be outside the desired range and this method\n   * limits it to the desired range. E.g. a mouse event left of the left edge of a seek bar yields an offset below\n   * zero, but to display the seek target on the seek bar, we need to limit it to zero.\n   *\n   * @param offset the offset to sanitize\n   * @returns {number} the sanitized offset.\n   */\n  private sanitizeOffset(offset: number) {\n    // Since we track mouse moves over the whole document, the target can be outside the seek range,\n    // and we need to limit it to the [0, 1] range.\n    if (offset < 0) {\n      offset = 0;\n    } else if (offset > 1) {\n      offset = 1;\n    }\n\n    return offset;\n  }\n\n  /**\n   * Sets the position of the playback position indicator.\n   * @param percent a number between 0 and 100 as returned by the player\n   */\n  setPlaybackPosition(percent: number) {\n    this.playbackPositionPercentage = percent;\n\n    // Set position of the bar\n    this.setPosition(this.seekBarPlaybackPosition, percent);\n\n    // Set position of the marker\n    let totalSize = (this.config.vertical ? (this.seekBar.height() - this.seekBarPlaybackPositionMarker.height()) : this.seekBar.width());\n    let px = (totalSize) / 100 * percent;\n    if (this.config.vertical) {\n      px = this.seekBar.height() - px - this.seekBarPlaybackPositionMarker.height();\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'translateY(' + px + 'px)',\n        '-ms-transform': 'translateY(' + px + 'px)',\n        '-webkit-transform': 'translateY(' + px + 'px)',\n      } :\n      {\n        'transform': 'translateX(' + px + 'px)',\n        '-ms-transform': 'translateX(' + px + 'px)',\n        '-webkit-transform': 'translateX(' + px + 'px)',\n      };\n    this.seekBarPlaybackPositionMarker.css(style);\n  }\n\n  /**\n   * Refreshes the playback position. Can be used by subclasses to refresh the position when\n   * the size of the component changes.\n   */\n  protected refreshPlaybackPosition() {\n    this.setPlaybackPosition(this.playbackPositionPercentage);\n  }\n\n  /**\n   * Sets the position until which media is buffered.\n   * @param percent a number between 0 and 100\n   */\n  setBufferPosition(percent: number) {\n    this.setPosition(this.seekBarBufferPosition, percent);\n  }\n\n  /**\n   * Sets the position where a seek, if executed, would jump to.\n   * @param percent a number between 0 and 100\n   */\n  setSeekPosition(percent: number) {\n    this.setPosition(this.seekBarSeekPosition, percent);\n  }\n\n  /**\n   * Set the actual position (width or height) of a DOM element that represent a bar in the seek bar.\n   * @param element the element to set the position for\n   * @param percent a number between 0 and 100\n   */\n  private setPosition(element: DOM, percent: number) {\n    let scale = percent / 100;\n\n    // When the scale is exactly 1 or very near 1 (and the browser internally rounds it to 1), browsers seem to render\n    // the elements differently and the height gets slightly off, leading to mismatching heights when e.g. the buffer\n    // level bar has a width of 1 and the playback position bar has a width < 1. A jittering buffer level around 1\n    // leads to an even worse flickering effect.\n    // Various changes in CSS styling and DOM hierarchy did not solve the issue so the workaround is to avoid a scale\n    // of exactly 1.\n    if (scale >= 0.99999 && scale <= 1.00001) {\n      scale = 0.99999;\n    }\n\n    let style = this.config.vertical ?\n      // -ms-transform required for IE9\n      // -webkit-transform required for Android 4.4 WebView\n      {\n        'transform': 'scaleY(' + scale + ')',\n        '-ms-transform': 'scaleY(' + scale + ')',\n        '-webkit-transform': 'scaleY(' + scale + ')',\n      } :\n      {\n        'transform': 'scaleX(' + scale + ')',\n        '-ms-transform': 'scaleX(' + scale + ')',\n        '-webkit-transform': 'scaleX(' + scale + ')',\n      };\n    element.css(style);\n  }\n\n  /**\n   * Puts the seek bar into or out of seeking state by adding/removing a class to the DOM element. This can be used\n   * to adjust the styling while seeking.\n   *\n   * @param seeking should be true when entering seek state, false when exiting the seek state\n   */\n  setSeeking(seeking: boolean) {\n    if (seeking) {\n      this.getDomElement().addClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    } else {\n      this.getDomElement().removeClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n    }\n  }\n\n  /**\n   * Checks if the seek bar is currently in the seek state.\n   * @returns {boolean} true if in seek state, else false\n   */\n  isSeeking(): boolean {\n    return this.getDomElement().hasClass(this.prefixCss(SeekBar.CLASS_SEEKING));\n  }\n\n  /**\n   * Checks if the seek bar has a {@link SeekBarLabel}.\n   * @returns {boolean} true if the seek bar has a label, else false\n   */\n  hasLabel(): boolean {\n    return this.label != null;\n  }\n\n  /**\n   * Gets the label of this seek bar.\n   * @returns {SeekBarLabel} the label if this seek bar has a label, else null\n   */\n  getLabel(): SeekBarLabel | null {\n    return this.label;\n  }\n\n  protected onSeekEvent() {\n    this.seekBarEvents.onSeek.dispatch(this);\n  }\n\n  protected onSeekPreviewEvent(percentage: number, scrubbing: boolean) {\n    let snappedMarker = this.timelineMarkersHandler && this.timelineMarkersHandler.getMarkerAtPosition(percentage);\n\n    let seekPositionPercentage = percentage;\n\n    if (snappedMarker) {\n      if (snappedMarker.duration > 0) {\n        if (percentage < snappedMarker.position) {\n          // Snap the position to the start of the interval if the seek is within the left snap margin\n          // We know that we are within a snap margin when we are outside the marker interval but still\n          // have a snappedMarker\n          seekPositionPercentage = snappedMarker.position;\n        } else if (percentage > snappedMarker.position + snappedMarker.duration) {\n          // Snap the position to the end of the interval if the seek is within the right snap margin\n          seekPositionPercentage = snappedMarker.position + snappedMarker.duration;\n        }\n      } else {\n        // Position markers always snap to their marker position\n        seekPositionPercentage = snappedMarker.position;\n      }\n    }\n\n    if (this.label) {\n      this.label.getDomElement().css({\n        'left': seekPositionPercentage + '%',\n      });\n    }\n\n    this.seekBarEvents.onSeekPreview.dispatch(this, {\n      scrubbing: scrubbing,\n      position: seekPositionPercentage,\n      marker: snappedMarker,\n    });\n  }\n\n  protected onSeekedEvent(percentage: number) {\n    this.seekBarEvents.onSeeked.dispatch(this, percentage);\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek operation is started.\n   * @returns {Event<SeekBar, NoArgs>}\n   */\n  get onSeek(): Event<SeekBar, NoArgs> {\n    return this.seekBarEvents.onSeek.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired during a scrubbing seek (to indicate that the seek preview, i.e. the video frame,\n   * should be updated), or during a normal seek preview when the seek bar is hovered (and the seek target,\n   * i.e. the seek bar label, should be updated).\n   * @returns {Event<SeekBar, SeekPreviewEventArgs>}\n   */\n  get onSeekPreview(): Event<SeekBar, SeekPreviewEventArgs> {\n    return this.seekBarEvents.onSeekPreview.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when a scrubbing seek has finished or when a direct seek is issued.\n   * @returns {Event<SeekBar, number>}\n   */\n  get onSeeked(): Event<SeekBar, number> {\n    return this.seekBarEvents.onSeeked.getEvent();\n  }\n\n\n  protected onShowEvent(): void {\n    super.onShowEvent();\n\n    // Refresh the position of the playback position when the seek bar becomes visible. To correctly set the position,\n    // the DOM element must be fully initialized an have its size calculated, because the position is set as an absolute\n    // value calculated from the size. This required size is not known when it is hidden.\n    // For such cases, we refresh the position here in onShow because here it is guaranteed that the component knows\n    // its size and can set the position correctly.\n    this.refreshPlaybackPosition();\n  }\n\n /**\n   * Checks if TouchEvent is supported.\n   * @returns {boolean} true if TouchEvent not undefined, else false\n   */\n  isTouchEvent(e: UIEvent): e is TouchEvent {\n    return window.TouchEvent && e instanceof TouchEvent;\n  }\n}\n","import {PlayerAPI} from 'bitmovin-player';\n\nexport function getMinBufferLevel(player: PlayerAPI): number {\n\n    const playerDuration = player.getDuration();\n\n    const videoBufferLength = player.getVideoBufferLength();\n    const audioBufferLength = player.getAudioBufferLength();\n    // Calculate the buffer length which is the smaller length of the audio and video buffers. If one of these\n    // buffers is not available, we set it's value to MAX_VALUE to make sure that the other real value is taken\n    // as the buffer length.\n    let bufferLength = Math.min(\n        videoBufferLength != null ? videoBufferLength : Number.MAX_VALUE,\n        audioBufferLength != null ? audioBufferLength : Number.MAX_VALUE);\n    // If both buffer lengths are missing, we set the buffer length to zero\n    if (bufferLength === Number.MAX_VALUE) {\n        bufferLength = 0;\n    }\n\n    return 100 / playerDuration * bufferLength;\n}\n","import { UIUtils } from '../uiutils';\nimport { DOM } from '../dom';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeController } from '../volumecontroller';\n\nexport enum SeekBarType {\n  Vod,\n  Live,\n  Volume,\n}\n\ninterface Range {\n  min: number;\n  max: number;\n}\n\ninterface KeyStepIncrementsConfig {\n  leftRight: number;\n  upDown: number;\n}\n\nconst coerceValueIntoRange = (\n  value: number,\n  range: Range,\n  cb: (value: number) => void,\n) => {\n  if (value < range.min) {\n    cb(range.min);\n  } else if (value > range.max) {\n    cb(range.max);\n  } else {\n    cb(value);\n  }\n};\n\nexport class SeekBarController {\n  protected keyStepIncrements: KeyStepIncrementsConfig;\n  protected player: PlayerAPI;\n  protected volumeController: VolumeController;\n\n  constructor(\n    keyStepIncrements: KeyStepIncrementsConfig,\n    player: PlayerAPI,\n    volumeController: VolumeController,\n  ) {\n    this.keyStepIncrements = keyStepIncrements;\n    this.player = player;\n    this.volumeController = volumeController;\n  }\n\n  protected arrowKeyControls(\n    currentValue: number,\n    range: Range,\n    valueUpdate: (value: number) => void,\n  ) {\n    const controlValue = Math.floor(currentValue);\n\n    return {\n      left: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.leftRight, range, valueUpdate),\n      right: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.leftRight, range, valueUpdate),\n      up: () => coerceValueIntoRange(controlValue + this.keyStepIncrements.upDown, range, valueUpdate),\n      down: () => coerceValueIntoRange(controlValue - this.keyStepIncrements.upDown, range, valueUpdate),\n      home: () => coerceValueIntoRange(range.min, range, valueUpdate),\n      end: () => coerceValueIntoRange(range.max, range, valueUpdate),\n    };\n  }\n\n  protected seekBarControls(type: SeekBarType) {\n    if (type === SeekBarType.Live) {\n      return this.arrowKeyControls(this.player.getTimeShift(), { min: this.player.getMaxTimeShift(), max: 0 }, this.player.timeShift);\n    } else if (type === SeekBarType.Vod) {\n      return this.arrowKeyControls(this.player.getCurrentTime(), { min: 0, max: this.player.getDuration() }, this.player.seek);\n    } else if (type === SeekBarType.Volume && this.volumeController != null) {\n      const volumeTransition = this.volumeController.startTransition();\n      return this.arrowKeyControls(this.player.getVolume(), { min: 0, max: 100 }, volumeTransition.finish.bind(volumeTransition));\n    }\n  }\n\n  public setSeekBarControls(domElement: DOM, type: () => SeekBarType) {\n    domElement.on('keydown', (e: KeyboardEvent) => {\n      const controls = this.seekBarControls(type());\n      switch (e.keyCode) {\n        case UIUtils.KeyCode.LeftArrow: {\n          controls.left();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.RightArrow: {\n          controls.right();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.UpArrow: {\n          controls.up();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.DownArrow: {\n          controls.down();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Home: {\n          controls.home();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.End: {\n          controls.end();\n          e.preventDefault();\n          break;\n        }\n        case UIUtils.KeyCode.Space: {\n          this.player.isPlaying() ? this.player.pause() : this.player.play();\n          e.preventDefault();\n          break;\n        }\n      }\n    });\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {Label, LabelConfig} from './label';\nimport {Component, ComponentConfig} from './component';\nimport { UIInstanceManager } from '../uimanager';\nimport {StringUtils} from '../stringutils';\nimport {ImageLoader} from '../imageloader';\nimport {CssProperties} from '../dom';\nimport { PlayerAPI, Thumbnail } from 'bitmovin-player';\nimport { SeekBar, SeekPreviewEventArgs } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\n\n/**\n * Configuration interface for a {@link SeekBarLabel}.\n */\nexport interface SeekBarLabelConfig extends ContainerConfig {\n  // nothing yet\n}\n\n/**\n * A label for a {@link SeekBar} that can display the seek target time, a thumbnail, and title (e.g. chapter title).\n */\nexport class SeekBarLabel extends Container<SeekBarLabelConfig> {\n\n  private timeLabel: Label<LabelConfig>;\n  private titleLabel: Label<LabelConfig>;\n  private thumbnail: Component<ComponentConfig>;\n\n  private thumbnailImageLoader: ImageLoader;\n\n  private timeFormat: string;\n\n  private appliedMarkerCssClasses: string[] = [];\n  private player: PlayerAPI;\n  private uiManager: UIInstanceManager;\n\n  constructor(config: SeekBarLabelConfig = {}) {\n    super(config);\n\n    this.timeLabel = new Label({ cssClasses: ['seekbar-label-time'] });\n    this.titleLabel = new Label({ cssClasses: ['seekbar-label-title'] });\n    this.thumbnail = new Component({ cssClasses: ['seekbar-thumbnail'], role: 'img' });\n    this.thumbnailImageLoader = new ImageLoader();\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-seekbar-label',\n      components: [new Container({\n        components: [\n          this.thumbnail,\n          new Container({\n            components: [this.titleLabel, this.timeLabel],\n            cssClass: 'seekbar-label-metadata',\n          })],\n        cssClass: 'seekbar-label-inner',\n      })],\n      hidden: true,\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.player = player;\n    this.uiManager = uimanager;\n    uimanager.onSeekPreview.subscribeRateLimited(this.handleSeekPreview, 100);\n\n    let init = () => {\n      // Set time format depending on source duration\n      this.timeFormat = Math.abs(player.isLive() ? player.getMaxTimeShift() : player.getDuration()) >= 3600 ?\n        StringUtils.FORMAT_HHMMSS : StringUtils.FORMAT_MMSS;\n      // Set initial state of title and thumbnail to handle sourceLoaded when switching to a live-stream\n      this.setTitleText(null);\n      this.setThumbnail(null);\n    };\n\n    uimanager.getConfig().events.onUpdated.subscribe(init);\n    init();\n  }\n\n  private handleSeekPreview = (sender: SeekBar, args: SeekPreviewEventArgs) => {\n    if (this.player.isLive()) {\n      let maxTimeShift = this.player.getMaxTimeShift();\n      let timeShiftPreview = maxTimeShift - maxTimeShift * (args.position / 100);\n\n      this.setTime(timeShiftPreview);\n\n      // In case of a live stream the player expects the time passed into the getThumbnail as a wallClockTime and not\n      // as a relative timeShift value.\n      const convertTimeShiftPreviewToWallClockTime = (targetTimeShift: number): number => {\n        const currentTimeShift = this.player.getTimeShift();\n        const currentTime = this.player.getCurrentTime();\n\n        const wallClockTimeOfLiveEdge = currentTime - currentTimeShift;\n        return wallClockTimeOfLiveEdge + targetTimeShift;\n      };\n\n      const wallClockTime = convertTimeShiftPreviewToWallClockTime(timeShiftPreview);\n      this.setThumbnail(this.player.getThumbnail(wallClockTime));\n\n    } else {\n      let time = this.player.getDuration() * (args.position / 100);\n      this.setTime(time);\n\n      const seekableRangeStart = PlayerUtils.getSeekableRangeStart(this.player, 0);\n      const absoluteSeekTarget = time + seekableRangeStart;\n      this.setThumbnail(this.player.getThumbnail(absoluteSeekTarget));\n    }\n\n    if (args.marker) {\n      this.setTitleText(args.marker.marker.title);\n    } else {\n      this.setTitleText(null);\n    }\n\n    // Remove CSS classes from previous marker\n    if (this.appliedMarkerCssClasses.length > 0) {\n      this.getDomElement().removeClass(this.appliedMarkerCssClasses.join(' '));\n      this.appliedMarkerCssClasses = [];\n    }\n\n    // Add CSS classes of current marker\n    if (args.marker) {\n      const cssClasses = (args.marker.marker.cssClasses || []).map(cssClass => this.prefixCss(cssClass));\n      this.getDomElement().addClass(cssClasses.join(' '));\n      this.appliedMarkerCssClasses = cssClasses;\n    }\n  };\n\n  /**\n   * Sets arbitrary text on the label.\n   * @param text the text to show on the label\n   */\n  setText(text: string) {\n    this.timeLabel.setText(text);\n  }\n\n  /**\n   * Sets a time to be displayed on the label.\n   * @param seconds the time in seconds to display on the label\n   */\n  setTime(seconds: number) {\n    this.setText(StringUtils.secondsToTime(seconds, this.timeFormat));\n  }\n\n  /**\n   * Sets the text on the title label.\n   * @param text the text to show on the label\n   */\n  setTitleText(text = '') {\n    this.titleLabel.setText(text);\n  }\n\n  /**\n   * Sets or removes a thumbnail on the label.\n   * @param thumbnail the thumbnail to display on the label or null to remove a displayed thumbnail\n   */\n  setThumbnail(thumbnail: Thumbnail = null) {\n    let thumbnailElement = this.thumbnail.getDomElement();\n\n    if (thumbnail == null) {\n      thumbnailElement.css({\n        'background-image': null,\n        'display': null,\n        'width': null,\n        'height': null,\n      });\n    }\n    else {\n      // We use the thumbnail image loader to make sure the thumbnail is loaded and it's size is known before be can\n      // calculate the CSS properties and set them on the element.\n      this.thumbnailImageLoader.load(thumbnail.url, (url, width, height) => {\n        // can be checked like that because x/y/w/h are either all present or none\n        // https://www.w3.org/TR/media-frags/#naming-space\n        if (thumbnail.x !== undefined) {\n          thumbnailElement.css(this.thumbnailCssSprite(thumbnail, width, height));\n        } else {\n          thumbnailElement.css(this.thumbnailCssSingleImage(thumbnail, width, height));\n        }\n      });\n    }\n  }\n\n  private thumbnailCssSprite(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let thumbnailCountX = width / thumbnail.width;\n    let thumbnailCountY = height / thumbnail.height;\n\n    let thumbnailIndexX = thumbnail.x / thumbnail.width;\n    let thumbnailIndexY = thumbnail.y / thumbnail.height;\n\n    let sizeX = 100 * thumbnailCountX;\n    let sizeY = 100 * thumbnailCountY;\n\n    let offsetX = 100 * thumbnailIndexX;\n    let offsetY = 100 * thumbnailIndexY;\n\n    let aspectRatio = 1 / thumbnail.width * thumbnail.height;\n\n    // The thumbnail size is set by setting the CSS 'width' and 'padding-bottom' properties. 'padding-bottom' is\n    // used because it is relative to the width and can be used to set the aspect ratio of the thumbnail.\n    // A default value for width is set in the stylesheet and can be overwritten from there or anywhere else.\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `${sizeX}% ${sizeY}%`,\n      'background-position': `-${offsetX}% -${offsetY}%`,\n    };\n  }\n\n  private thumbnailCssSingleImage(thumbnail: Thumbnail, width: number, height: number): CssProperties {\n    let aspectRatio = 1 / width * height;\n\n    return {\n      'display': 'inherit',\n      'background-image': `url(${thumbnail.url})`,\n      'padding-bottom': `${100 * aspectRatio}%`,\n      'background-size': `100% 100%`,\n      'background-position': `0 0`,\n    };\n  }\n\n  release(): void {\n    super.release();\n\n    this.uiManager.onSeekPreview.unsubscribe(this.handleSeekPreview);\n  }\n}\n","import {ListSelector, ListSelectorConfig} from './listselector';\nimport {DOM} from '../dom';\nimport { i18n, LocalizableText } from '../localization/i18n';\n\n/**\n * A simple select box providing the possibility to select a single item out of a list of available items.\n *\n * DOM example:\n * <code>\n *     <select class='ui-selectbox'>\n *         <option value='key'>label</option>\n *         ...\n *     </select>\n * </code>\n */\n\nexport class SelectBox extends ListSelector<ListSelectorConfig> {\n\n  private selectElement: DOM;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-selectbox',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let selectElement = new DOM('select', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'aria-label': i18n.performLocalization(this.config.ariaLabel),\n    });\n\n    this.selectElement = selectElement;\n    this.updateDomItems();\n\n    selectElement.on('change', () => {\n      let value = selectElement.val();\n      this.onItemSelectedEvent(value, false);\n    });\n\n    return selectElement;\n  }\n\n  protected updateDomItems(selectedValue: string = null) {\n    // Delete all children\n    this.selectElement.empty();\n\n    // Add updated children\n    for (let item of this.items) {\n      let optionElement = new DOM('option', {\n        'value': String(item.key),\n      }).html(i18n.performLocalization(item.label));\n\n      if (item.key === String(selectedValue)) { // convert selectedValue to string to catch 'null'/null case\n        optionElement.attr('selected', 'selected');\n      }\n\n      this.selectElement.append(optionElement);\n    }\n  }\n\n  protected onItemAddedEvent(value: string) {\n    super.onItemAddedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemRemovedEvent(value: string) {\n    super.onItemRemovedEvent(value);\n    this.updateDomItems(this.selectedItem);\n  }\n\n  protected onItemSelectedEvent(value: string, updateDomItems: boolean = true) {\n    super.onItemSelectedEvent(value);\n    if (updateDomItems) {\n      this.updateDomItems(value);\n    }\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { SelectBox } from './selectbox';\nimport { UIInstanceManager } from '../uimanager';\nimport { Timeout } from '../timeout';\nimport { Event, EventDispatcher, NoArgs } from '../eventdispatcher';\nimport { SettingsPanelPage } from './settingspanelpage';\nimport { SettingsPanelItem } from './settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { Component, ComponentConfig } from './component';\n\n/**\n * Configuration interface for a {@link SettingsPanel}.\n */\nexport interface SettingsPanelConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the settings panel will be hidden when there is no user interaction.\n   * Set to -1 to disable automatic hiding.\n   * Default: 3 seconds (3000)\n   */\n  hideDelay?: number;\n\n  /**\n   * Flag to specify if there should be an animation when switching SettingsPanelPages.\n   * Default: true\n   */\n  pageTransitionAnimation?: boolean;\n}\n\nenum NavigationDirection {\n  Forwards,\n  Backwards,\n}\n\n/**\n * A panel containing a list of {@link SettingsPanelPage items}.\n *\n * To configure pages just pass them in the components array.\n *\n * Example:\n *  let settingsPanel = new SettingsPanel({\n *    hidden: true,\n *  });\n *\n *  let settingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  let secondSettingsPanelPage = new SettingsPanelPage({\n *    components: […]\n *  });\n *\n *  settingsPanel.addComponent(settingsPanelPage);\n *  settingsPanel.addComponent(secondSettingsPanelPage);\n *\n * For an example how to navigate between pages @see SettingsPanelPageNavigatorButton\n */\nexport class SettingsPanel extends Container<SettingsPanelConfig> {\n\n  private static readonly CLASS_ACTIVE_PAGE = 'active';\n\n  // navigation handling\n  private activePage: SettingsPanelPage;\n  private navigationStack: SettingsPanelPage[] = [];\n\n  private settingsPanelEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanel, NoArgs>(),\n  };\n\n  private hideTimeout: Timeout;\n\n  constructor(config: SettingsPanelConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel',\n      hideDelay: 3000,\n      pageTransitionAnimation: true,\n    } as SettingsPanelConfig, this.config);\n\n    this.activePage = this.getRootPage();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n\n    uimanager.onControlsHide.subscribe(() => this.hideHoveredSelectBoxes());\n\n    if (config.hideDelay > -1) {\n      this.hideTimeout = new Timeout(config.hideDelay, () => {\n        this.hide();\n        this.hideHoveredSelectBoxes();\n      });\n      this.getDomElement().on('mouseenter', () => {\n        // On mouse enter clear the timeout\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('mouseleave', () => {\n        // On mouse leave activate the timeout\n        this.hideTimeout.reset();\n      });\n      this.getDomElement().on('focusin', () => {\n        this.hideTimeout.clear();\n      });\n      this.getDomElement().on('focusout', () => {\n        this.hideTimeout.reset();\n      });\n    }\n\n    this.onHide.subscribe(() => {\n      if (config.hideDelay > -1) {\n        // Clear timeout when hidden from outside\n        this.hideTimeout.clear();\n      }\n\n      // Since we don't reset the actual navigation here we need to simulate a onInactive event in case some panel\n      // needs to do something when they become invisible / inactive.\n      this.activePage.onInactiveEvent();\n    });\n\n    this.onShow.subscribe(() => {\n      // Reset navigation when te panel gets visible to avoid a weird animation when hiding\n      this.resetNavigation(true);\n      // Since we don't need to navigate to the root page again we need to fire the onActive event when the settings\n      // panel gets visible.\n      this.activePage.onActiveEvent();\n\n      if (config.hideDelay > -1) {\n        // Activate timeout when shown\n        this.hideTimeout.start();\n      }\n    });\n\n    // pass event from root page through\n    this.getRootPage().onSettingsStateChanged.subscribe(() => {\n      this.onSettingsStateChangedEvent();\n    });\n\n    this.updateActivePageClass();\n  }\n\n  /**\n   * Returns the current active / visible page\n   * @return {SettingsPanelPage}\n   */\n  getActivePage(): SettingsPanelPage {\n    return this.activePage;\n  }\n\n  /**\n   * Sets the\n   * @deprecated Use {@link setActivePage} instead\n   * @param index\n   */\n  setActivePageIndex(index: number): void {\n    this.setActivePage(this.getPages()[index]);\n  }\n\n  /**\n   * Adds the passed page to the navigation stack and makes it visible.\n   * Use {@link popSettingsPanelPage} to navigate backwards.\n   *\n   * Results in no-op if the target page is the current page.\n   * @params page\n   */\n  setActivePage(targetPage: SettingsPanelPage): void {\n    if (targetPage === this.getActivePage()) {\n      console.warn('Page is already the current one ... skipping navigation');\n      return;\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.getActivePage(),\n      NavigationDirection.Forwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Resets the navigation stack by navigating back to the root page and displaying it.\n   */\n  popToRootSettingsPanelPage(): void {\n    this.resetNavigation((this.config as SettingsPanelConfig).pageTransitionAnimation);\n  }\n\n  /**\n   * Removes the current page from the navigation stack and makes the previous one visible.\n   * Results in a no-op if we are already on the root page.\n   */\n  popSettingsPanelPage() {\n    if (this.navigationStack.length === 0) {\n      console.warn('Already on the root page ... skipping navigation');\n      return;\n    }\n\n    let targetPage = this.navigationStack[this.navigationStack.length - 2];\n    // The root part isn't part of the navigation stack so handle it explicitly here\n    if (!targetPage) {\n      targetPage = this.getRootPage();\n    }\n\n    this.navigateToPage(\n      targetPage,\n      this.activePage,\n      NavigationDirection.Backwards,\n      !(this.config as SettingsPanelConfig).pageTransitionAnimation,\n    );\n  }\n\n  /**\n   * Checks if there are active settings within the root page of the settings panel.\n   * An active setting is a setting that is visible and enabled, which the user can interact with.\n   * @returns {boolean} true if there are active settings, false if the panel is functionally empty to a user\n   */\n  rootPageHasActiveSettings(): boolean {\n    return this.getRootPage().hasActiveSettings();\n  }\n\n  /**\n   * Return all configured pages\n   * @returns {SettingsPanelPage[]}\n   */\n  getPages(): SettingsPanelPage[] {\n    return <SettingsPanelPage[]>this.config.components.filter(component => component instanceof SettingsPanelPage);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanel, NoArgs> {\n    return this.settingsPanelEvents.onSettingsStateChanged.getEvent();\n  }\n\n  release(): void {\n    super.release();\n    if (this.hideTimeout) {\n      this.hideTimeout.clear();\n    }\n  }\n\n  // Support adding settingsPanelPages after initialization\n  addComponent(component: Component<ComponentConfig>) {\n    if (this.getPages().length === 0 && component instanceof SettingsPanelPage) {\n      this.activePage = component;\n    }\n    super.addComponent(component);\n  }\n\n  private updateActivePageClass(): void {\n    this.getPages().forEach((page: SettingsPanelPage) => {\n      if (page === this.activePage) {\n        page.getDomElement().addClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      } else {\n        page.getDomElement().removeClass(this.prefixCss(SettingsPanel.CLASS_ACTIVE_PAGE));\n      }\n    });\n  }\n\n  private resetNavigation(resetNavigationOnShow: boolean): void {\n    const sourcePage = this.getActivePage();\n    const rootPage = this.getRootPage();\n    if (sourcePage) {\n      // Since the onInactiveEvent was already fired in the onHide we need to suppress it here\n      if (!resetNavigationOnShow) {\n        sourcePage.onInactiveEvent();\n      }\n    }\n    this.navigationStack = [];\n    this.animateNavigation(rootPage, sourcePage, resetNavigationOnShow);\n    this.activePage = rootPage;\n    this.updateActivePageClass();\n  }\n\n  private navigateToPage(\n    targetPage: SettingsPanelPage,\n    sourcePage: SettingsPanelPage,\n    direction: NavigationDirection,\n    skipAnimation: boolean,\n  ): void {\n    this.activePage = targetPage;\n\n    if (direction === NavigationDirection.Forwards) {\n      this.navigationStack.push(targetPage);\n    } else {\n      this.navigationStack.pop();\n    }\n\n    this.animateNavigation(targetPage, sourcePage, skipAnimation);\n\n    this.updateActivePageClass();\n    targetPage.onActiveEvent();\n    sourcePage.onInactiveEvent();\n  }\n\n  /**\n   * @param targetPage\n   * @param sourcePage\n   * @param skipAnimation This is just an internal flag if we want to have an animation. It is set true when we reset\n   * the navigation within the onShow callback of the settingsPanel. In this case we don't want an actual animation but\n   * the recalculation of the dimension of the settingsPanel.\n   * This is independent of the pageTransitionAnimation flag.\n   */\n  private animateNavigation(targetPage: SettingsPanelPage, sourcePage: SettingsPanelPage, skipAnimation: boolean) {\n    if (!(this.config as SettingsPanelConfig).pageTransitionAnimation) {\n      return;\n    }\n\n    const settingsPanelDomElement = this.getDomElement();\n    const settingsPanelHTMLElement = this.getDomElement().get(0);\n\n    // get current dimension\n    const settingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const settingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // calculate target size of the settings panel\n    sourcePage.getDomElement().css('display', 'none');\n    this.getDomElement().css({ width: '', height: '' }); // let css auto settings kick in again\n\n    const targetPageHtmlElement = targetPage.getDomElement().get(0);\n    // clone the targetPage DOM element so that we can calculate the width / height how they will be after\n    // switching the page. We are using a clone to prevent (mostly styling) side-effects on the real DOM element\n    const clone = targetPageHtmlElement.cloneNode(true) as HTMLElement;\n    // append to parent so we get the 'real' size\n    const containerWrapper = targetPageHtmlElement.parentNode;\n    containerWrapper.appendChild(clone);\n    // set clone visible\n    clone.style.display = 'block';\n\n    // collect target dimension\n    const targetSettingsPanelWidth = settingsPanelHTMLElement.scrollWidth;\n    const targetSettingsPanelHeight = settingsPanelHTMLElement.scrollHeight;\n\n    // remove clone from the DOM\n    clone.parentElement.removeChild(clone); // .remove() is not working in IE\n    sourcePage.getDomElement().css('display', '');\n\n    // set the values back to the current ones that the browser animates it (browsers don't animate 'auto' values)\n    settingsPanelDomElement.css({\n      width: settingsPanelWidth + 'px',\n      height: settingsPanelHeight + 'px',\n    });\n\n    if (!skipAnimation) {\n      // We need to force the browser to reflow between setting the width and height that we actually get a animation\n      this.forceBrowserReflow();\n    }\n\n    // set the values to the target dimension\n    settingsPanelDomElement.css({\n      width: targetSettingsPanelWidth + 'px',\n      height: targetSettingsPanelHeight + 'px',\n    });\n  }\n\n  private forceBrowserReflow(): void {\n    // Force the browser to reflow the layout\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n    this.getDomElement().get(0).offsetLeft;\n  }\n\n  /**\n   * Hack for IE + Firefox\n   * when the settings panel fades out while an item of a select box is still hovered, the select box will not fade out\n   * while the settings panel does. This would leave a floating select box, which is just weird\n   */\n  private hideHoveredSelectBoxes(): void {\n    this.getComputedItems().forEach((item: SettingsPanelItem) => {\n      if (item.isActive() && (item as any).setting instanceof SelectBox) {\n        const selectBox = (item as any).setting as SelectBox;\n        const oldDisplay = selectBox.getDomElement().css('display');\n        if (oldDisplay === 'none') {\n          // if oldDisplay is already 'none', no need to set to 'none' again. It could lead to race condition\n          // wherein the display is irreversibly set to 'none' when browser tab/window is not active because\n          // requestAnimationFrame is either delayed or paused in some browsers in inactive state\n          return;\n        }\n\n        // updating the display to none marks the select-box as inactive, so it will be hidden with the rest\n        // we just have to make sure to reset this as soon as possible\n        selectBox.getDomElement().css('display', 'none');\n        if (window.requestAnimationFrame) {\n          requestAnimationFrame(() => {\n            selectBox.getDomElement().css('display', oldDisplay);\n          });\n        } else {\n          // IE9 has no requestAnimationFrame, set the value directly. It has no optimization about ignoring DOM-changes\n          // between animationFrames\n          selectBox.getDomElement().css('display', oldDisplay);\n        }\n      }\n    });\n  }\n\n  // collect all items from all pages (see hideHoveredSelectBoxes)\n  private getComputedItems(): SettingsPanelItem[] {\n    const allItems: SettingsPanelItem[] = [];\n    for (let page of this.getPages()) {\n      allItems.push(...page.getItems());\n    }\n    return allItems;\n  }\n\n  private getRootPage(): SettingsPanelPage {\n    return this.getPages()[0];\n  }\n\n  protected onSettingsStateChangedEvent() {\n    this.settingsPanelEvents.onSettingsStateChanged.dispatch(this);\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {Component, ComponentConfig} from './component';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { Label, LabelConfig } from './label';\nimport {UIInstanceManager} from '../uimanager';\nimport {SelectBox} from './selectbox';\nimport {ListBox} from './listbox';\nimport {VideoQualitySelectBox} from './videoqualityselectbox';\nimport {AudioQualitySelectBox} from './audioqualityselectbox';\nimport {PlaybackSpeedSelectBox} from './playbackspeedselectbox';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * An item for a {@link SettingsPanelPage},\n * Containing an optional {@link Label} and a component that configures a setting.\n * If the components is a {@link SelectBox} it will handle the logic of displaying it or not\n */\nexport class SettingsPanelItem extends Container<ContainerConfig> {\n\n  private label: Component<ComponentConfig>;\n  private setting: Component<ComponentConfig>;\n\n  private settingsPanelItemEvents = {\n    onActiveChanged: new EventDispatcher<SettingsPanelItem, NoArgs>(),\n  };\n\n  constructor(label: LocalizableText | Component<ComponentConfig>, setting: Component<ComponentConfig>, config: ContainerConfig = {}) {\n    super(config);\n\n    this.setting = setting;\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settings-panel-item',\n      role: 'menuitem',\n    }, this.config);\n\n    if (label !== null) {\n      if (label instanceof Component) {\n        this.label = label;\n      } else {\n        this.label = new Label({ text: label, for: this.setting.getConfig().id } as LabelConfig);\n      }\n      this.addComponent(this.label);\n    }\n\n    this.addComponent(this.setting);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    if (this.setting instanceof SelectBox || this.setting instanceof ListBox) {\n      let handleConfigItemChanged = () => {\n        if (!(this.setting instanceof SelectBox) && !(this.setting instanceof ListBox)) {\n          return;\n        }\n        // The minimum number of items that must be available for the setting to be displayed\n        // By default, at least two items must be available, else a selection is not possible\n        let minItemsToDisplay = 2;\n        // Audio/video quality select boxes contain an additional 'auto' mode, which in combination with a single\n        // available quality also does not make sense\n        if ((this.setting instanceof VideoQualitySelectBox && this.setting.hasAutoItem())\n          || this.setting instanceof AudioQualitySelectBox) {\n          minItemsToDisplay = 3;\n        }\n\n        if (this.setting.itemCount() < minItemsToDisplay) {\n          // Hide the setting if no meaningful choice is available\n          this.hide();\n        } else if (this.setting instanceof PlaybackSpeedSelectBox\n          && !uimanager.getConfig().playbackSpeedSelectionEnabled) {\n          // Hide the PlaybackSpeedSelectBox if disabled in config\n          this.hide();\n        } else {\n          this.show();\n        }\n\n        // Visibility might have changed and therefore the active state might have changed so we fire the event\n        // TODO fire only when state has really changed (e.g. check if visibility has really changed)\n        this.onActiveChangedEvent();\n\n        this.getDomElement().attr('aria-haspopup', 'true');\n      };\n\n      this.setting.onItemAdded.subscribe(handleConfigItemChanged);\n      this.setting.onItemRemoved.subscribe(handleConfigItemChanged);\n\n      // Initialize hidden state\n      handleConfigItemChanged();\n    }\n  }\n\n  /**\n   * Checks if this settings panel item is active, i.e. visible and enabled and a user can interact with it.\n   * @returns {boolean} true if the panel is active, else false\n   */\n  isActive(): boolean {\n    return this.isShown();\n  }\n\n  protected onActiveChangedEvent() {\n    this.settingsPanelItemEvents.onActiveChanged.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the 'active' state of this item changes.\n   * @see #isActive\n   * @returns {Event<SettingsPanelItem, NoArgs>}\n   */\n  get onActiveChanged(): Event<SettingsPanelItem, NoArgs> {\n    return this.settingsPanelItemEvents.onActiveChanged.getEvent();\n  }\n}\n","import {Container, ContainerConfig} from './container';\nimport {SettingsPanelItem} from './settingspanelitem';\nimport {UIInstanceManager} from '../uimanager';\nimport {Event, EventDispatcher, NoArgs} from '../eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { BrowserUtils } from '../browserutils';\n\n/**\n * A panel containing a list of {@link SettingsPanelItem items} that represent labelled settings.\n */\nexport class SettingsPanelPage extends Container<ContainerConfig> {\n\n  private static readonly CLASS_LAST = 'last';\n\n  private settingsPanelPageEvents = {\n    onSettingsStateChanged: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onActive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n    onInactive: new EventDispatcher<SettingsPanelPage, NoArgs>(),\n  };\n\n  constructor(config: ContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig<ContainerConfig>(config, {\n      cssClass: 'ui-settings-panel-page',\n      role: 'menu',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    // Fire event when the state of a settings-item has changed\n    let settingsStateChangedHandler = () => {\n      this.onSettingsStateChangedEvent();\n\n      // Attach marker class to last visible item\n      let lastShownItem = null;\n      for (let component of this.getItems()) {\n        component.getDomElement().removeClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n        if (component.isShown()) {\n          lastShownItem = component;\n        }\n      }\n      if (lastShownItem) {\n        lastShownItem.getDomElement().addClass(this.prefixCss(SettingsPanelPage.CLASS_LAST));\n      }\n    };\n    for (let component of this.getItems()) {\n      component.onActiveChanged.subscribe(settingsStateChangedHandler);\n    }\n  }\n\n  hasActiveSettings(): boolean {\n    for (let component of this.getItems()) {\n      if (component.isActive()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  getItems(): SettingsPanelItem[] {\n    return <SettingsPanelItem[]>this.config.components.filter(component => component instanceof SettingsPanelItem);\n  }\n\n  onSettingsStateChangedEvent() {\n    this.settingsPanelPageEvents.onSettingsStateChanged.dispatch(this);\n  }\n\n  get onSettingsStateChanged(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onSettingsStateChanged.getEvent();\n  }\n\n  onActiveEvent() {\n    const activeItems = this.getItems().filter((item) => item.isActive());\n\n    this.settingsPanelPageEvents.onActive.dispatch(this);\n    // Disable focus for iOS and iPadOS 13. They open select boxes automatically on focus and we want to avoid that.\n    if (activeItems.length > 0 && !BrowserUtils.isIOS && !(BrowserUtils.isMacIntel && BrowserUtils.isTouchSupported)) {\n      activeItems[0].getDomElement().focusToFirstInput();\n    }\n  }\n\n  get onActive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onActive.getEvent();\n  }\n\n  onInactiveEvent() {\n    this.settingsPanelPageEvents.onInactive.dispatch(this);\n  }\n\n  get onInactive(): Event<SettingsPanelPage, NoArgs> {\n    return this.settingsPanelPageEvents.onInactive.getEvent();\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport class SettingsPanelPageBackButton extends SettingsPanelPageNavigatorButton {\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpagebackbutton',\n      text: 'back',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      this.popPage();\n    });\n  }\n}\n","import {Button, ButtonConfig} from './button';\nimport {SettingsPanel} from './settingspanel';\nimport {SettingsPanelPage} from './settingspanelpage';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\n\n/**\n * Configuration interface for a {@link SettingsPanelPageNavigatorButton}\n */\nexport interface SettingsPanelPageNavigatorConfig extends ButtonConfig {\n  /**\n   * Container `SettingsPanel` where the navigation takes place\n   */\n  container: SettingsPanel;\n  /**\n   * Page where the button should navigate to\n   * If empty it will navigate to the root page (not intended to use as navigate back behavior)\n   */\n  targetPage?: SettingsPanelPage;\n\n  /**\n   * WCAG20 standard: Establishes relationships between objects and their label(s)\n   */\n  ariaLabelledBy?: string;\n}\n\n/**\n * Can be used to navigate between SettingsPanelPages\n *\n * Example:\n *  let settingPanelNavigationButton = new SettingsPanelPageNavigatorButton({\n *    container: settingsPanel,\n *    targetPage: settingsPanelPage,\n *  });\n *\n *  settingsPanelPage.addComponent(settingPanelNavigationButton);\n *\n * Don't forget to add the settingPanelNavigationButton to the settingsPanelPage.\n */\nexport class SettingsPanelPageNavigatorButton extends Button<SettingsPanelPageNavigatorConfig> {\n  private readonly container: SettingsPanel;\n  private readonly targetPage?: SettingsPanelPage;\n\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n    this.config = this.mergeConfig(config, {} as SettingsPanelPageNavigatorConfig, this.config);\n\n    this.container = (this.config as SettingsPanelPageNavigatorConfig).container;\n    this.targetPage = (this.config as SettingsPanelPageNavigatorConfig).targetPage;\n  }\n\n  /**\n   * navigate one level back\n   */\n  popPage() {\n    this.container.popSettingsPanelPage();\n  }\n\n  /**\n   * navigate to the target page\n   */\n  pushTargetPage() {\n    this.container.setActivePage(this.targetPage);\n  }\n}\n","import {UIInstanceManager} from '../uimanager';\nimport {SettingsPanelPageNavigatorButton, SettingsPanelPageNavigatorConfig} from './settingspanelpagenavigatorbutton';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\nexport class SettingsPanelPageOpenButton extends SettingsPanelPageNavigatorButton {\n  constructor(config: SettingsPanelPageNavigatorConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingspanelpageopenbutton',\n      text: i18n.getLocalizer('open'),\n      role: 'menuitem',\n    } as SettingsPanelPageNavigatorConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.getDomElement().attr('aria-haspopup', 'true');\n    this.getDomElement().attr('aria-owns', this.config.targetPage.getConfig().id);\n\n    this.onClick.subscribe(() => {\n      this.pushTargetPage();\n    });\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {SettingsPanel} from './settingspanel';\nimport {UIInstanceManager} from '../uimanager';\nimport {Component, ComponentConfig} from './component';\nimport {ArrayUtils} from '../arrayutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link SettingsToggleButton}.\n */\nexport interface SettingsToggleButtonConfig extends ToggleButtonConfig {\n  /**\n   * The settings panel whose visibility the button should toggle.\n   */\n  settingsPanel: SettingsPanel;\n\n  /**\n   * Decides if the button should be automatically hidden when the settings panel does not contain any active settings.\n   * Default: true\n   */\n  autoHideWhenNoActiveSettings?: boolean;\n}\n\n/**\n * A button that toggles visibility of a settings panel.\n */\nexport class SettingsToggleButton extends ToggleButton<SettingsToggleButtonConfig> {\n\n  private visibleSettingsPanels: SettingsPanel[] = [];\n\n  constructor(config: SettingsToggleButtonConfig) {\n    super(config);\n\n    if (!config.settingsPanel) {\n      throw new Error('Required SettingsPanel is missing');\n    }\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-settingstogglebutton',\n      text: i18n.getLocalizer('settings'),\n      settingsPanel: null,\n      autoHideWhenNoActiveSettings: true,\n      role: 'pop-up button',\n    }, <SettingsToggleButtonConfig>this.config);\n\n    /**\n     * WCAG20 standard defines which popup menu (element id) is owned by the button\n     */\n    this.getDomElement().attr('aria-owns', config.settingsPanel.getActivePage().getConfig().id);\n\n    /**\n     * WCAG20 standard defines that a button has a popup menu bound to it\n     */\n    this.getDomElement().attr('aria-haspopup', 'true');\n\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let settingsPanel = config.settingsPanel;\n\n    this.onClick.subscribe(() => {\n      // only hide other `SettingsPanel`s if a new one will be opened\n      if (!settingsPanel.isShown()) {\n        // Hide all open SettingsPanels before opening this button's panel\n        // (We need to iterate a copy because hiding them will automatically remove themselves from the array\n        // due to the subscribeOnce above)\n        this.visibleSettingsPanels.slice().forEach(settingsPanel => settingsPanel.hide());\n      }\n      settingsPanel.toggleHidden();\n    });\n    settingsPanel.onShow.subscribe(() => {\n      // Set toggle status to on when the settings panel shows\n      this.on();\n    });\n    settingsPanel.onHide.subscribe(() => {\n      // Set toggle status to off when the settings panel hides\n      this.off();\n    });\n\n    // Ensure that only one `SettingPanel` is visible at once\n    // Keep track of shown SettingsPanels\n    uimanager.onComponentShow.subscribe((sender: Component<ComponentConfig>) => {\n      if (sender instanceof SettingsPanel) {\n        this.visibleSettingsPanels.push(sender);\n        sender.onHide.subscribeOnce(() => ArrayUtils.remove(this.visibleSettingsPanels, sender));\n      }\n    });\n\n    // Handle automatic hiding of the button if there are no settings for the user to interact with\n    if (config.autoHideWhenNoActiveSettings) {\n      // Setup handler to show/hide button when the settings change\n      let settingsPanelItemsChangedHandler = () => {\n        if (settingsPanel.rootPageHasActiveSettings()) {\n          if (this.isHidden()) {\n            this.show();\n          }\n        } else {\n          if (this.isShown()) {\n            this.hide();\n          }\n        }\n      };\n      // Wire the handler to the event\n      settingsPanel.onSettingsStateChanged.subscribe(settingsPanelItemsChangedHandler);\n      // Call handler for first init at startup\n      settingsPanelItemsChangedHandler();\n    }\n  }\n}\n","import {Component, ComponentConfig} from './component';\n\n/**\n * A dummy component that just reserves some space and does nothing else.\n */\nexport class Spacer extends Component<ComponentConfig> {\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-spacer',\n    }, this.config);\n  }\n\n\n  protected onShowEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHideEvent(): void {\n    // disable event firing by overwriting and not calling super\n  }\n\n  protected onHoverChangedEvent(hovered: boolean): void {\n    // disable event firing by overwriting and not calling super\n  }\n}","import {ListBox} from './listbox';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * A element that is similar to a select box where the user can select a subtitle\n */\nexport class SubtitleListBox extends ListBox {\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { Container, ContainerConfig } from './container';\nimport { UIInstanceManager } from '../uimanager';\nimport { Label, LabelConfig } from './label';\nimport { ComponentConfig, Component } from './component';\nimport { ControlBar } from './controlbar';\nimport { EventDispatcher } from '../eventdispatcher';\nimport { DOM, Size } from '../dom';\nimport { PlayerAPI, SubtitleCueEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\nimport { VttUtils } from '../vttutils';\nimport { VTTProperties } from 'bitmovin-player/types/subtitles/vtt/API';\n\n/**\n * Overlays the player to display subtitles.\n */\nexport class SubtitleOverlay extends Container<ContainerConfig> {\n\n  private subtitleManager: ActiveSubtitleManager;\n  private previewSubtitleActive: boolean;\n  private previewSubtitle: SubtitleLabel;\n\n  private preprocessLabelEventCallback = new EventDispatcher<SubtitleCueEvent, SubtitleLabel>();\n  private subtitleContainerManager: SubtitleRegionContainerManager;\n\n  private static readonly CLASS_CONTROLBAR_VISIBLE = 'controlbar-visible';\n  private static readonly CLASS_CEA_608 = 'cea608';\n\n  // The number of rows in a cea608 grid\n  private static readonly CEA608_NUM_ROWS = 15;\n  // The number of columns in a cea608 grid\n  private static readonly CEA608_NUM_COLUMNS = 32;\n  // The offset in percent for one row (which is also the height of a row)\n  private static readonly CEA608_ROW_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_ROWS;\n  // The offset in percent for one column (which is also the width of a column)\n  private static readonly CEA608_COLUMN_OFFSET = 100 / SubtitleOverlay.CEA608_NUM_COLUMNS;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.previewSubtitleActive = false;\n    this.previewSubtitle = new SubtitleLabel({ text: i18n.getLocalizer('subtitle.example') });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-overlay',\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let subtitleManager = new ActiveSubtitleManager();\n    this.subtitleManager = subtitleManager;\n\n    this.subtitleContainerManager = new SubtitleRegionContainerManager(this);\n\n    player.on(player.exports.PlayerEvent.CueEnter, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      subtitleManager.cueEnter(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (this.previewSubtitleActive) {\n        this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      }\n\n      this.show();\n\n      this.subtitleContainerManager.addLabel(label, this.getDomElement().size());\n      this.updateComponents();\n    });\n\n    player.on(player.exports.PlayerEvent.CueUpdate, (event: SubtitleCueEvent) => {\n      const label = this.generateLabel(event);\n      const labelToReplace = subtitleManager.cueUpdate(event, label);\n\n      this.preprocessLabelEventCallback.dispatch(event, label);\n\n      if (labelToReplace) {\n        this.subtitleContainerManager.replaceLabel(labelToReplace, label);\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.CueExit, (event: SubtitleCueEvent) => {\n      let labelToRemove = subtitleManager.cueExit(event);\n\n      if (labelToRemove) {\n        this.subtitleContainerManager.removeLabel(labelToRemove);\n        this.updateComponents();\n      }\n\n      if (!subtitleManager.hasCues) {\n        if (!this.previewSubtitleActive) {\n          this.hide();\n        } else {\n          this.subtitleContainerManager.addLabel(this.previewSubtitle);\n          this.updateComponents();\n        }\n      }\n    });\n\n    let subtitleClearHandler = () => {\n      this.hide();\n      this.subtitleContainerManager.clear();\n      subtitleManager.clear();\n      this.removeComponents();\n      this.updateComponents();\n    };\n\n    player.on(player.exports.PlayerEvent.AudioChanged, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.Seek, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.TimeShift, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.PlaybackFinished, subtitleClearHandler);\n    player.on(player.exports.PlayerEvent.SourceUnloaded, subtitleClearHandler);\n\n    uimanager.onComponentShow.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n    uimanager.onComponentHide.subscribe((component: Component<ComponentConfig>) => {\n      if (component instanceof ControlBar) {\n        this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CONTROLBAR_VISIBLE));\n      }\n    });\n\n    this.configureCea608Captions(player, uimanager);\n    // Init\n    subtitleClearHandler();\n  }\n\n  generateLabel(event: SubtitleCueEvent): SubtitleLabel {\n    // Sanitize cue data (must be done before the cue ID is generated in subtitleManager.cueEnter / update)\n    if (event.position) {\n      // Sometimes the positions are undefined, we assume them to be zero\n      event.position.row = event.position.row || 0;\n      event.position.column = event.position.column || 0;\n    }\n\n    const label = new SubtitleLabel({\n      // Prefer the HTML subtitle text if set, else try generating a image tag as string from the image attribute,\n      // else use the plain text\n      text: event.html || ActiveSubtitleManager.generateImageTagText(event.image) || event.text,\n      vtt: event.vtt,\n      region: event.region,\n      regionStyle: event.regionStyle,\n    });\n\n    return label;\n  }\n\n  configureCea608Captions(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    // The calculated font size\n    let fontSize = 0;\n    // The required letter spacing spread the text characters evenly across the grid\n    let fontLetterSpacing = 0;\n    // Flag telling if a font size calculation is required of if the current values are valid\n    let fontSizeCalculationRequired = true;\n    // Flag telling if the CEA-608 mode is enabled\n    let enabled = false;\n\n    const updateCEA608FontSize = () => {\n      const dummyLabel = new SubtitleLabel({ text: 'X' });\n      dummyLabel.getDomElement().css({\n        // By using a large font size we do not need to use multiple letters and can get still an\n        // accurate measurement even though the returned size is an integer value\n        'font-size': '200px',\n        'line-height': '200px',\n        'visibility': 'hidden',\n      });\n      this.addComponent(dummyLabel);\n      this.updateComponents();\n      this.show();\n\n      const dummyLabelCharWidth = dummyLabel.getDomElement().width();\n      const dummyLabelCharHeight = dummyLabel.getDomElement().height();\n      const fontSizeRatio = dummyLabelCharWidth / dummyLabelCharHeight;\n\n      this.removeComponent(dummyLabel);\n      this.updateComponents();\n      if (!this.subtitleManager.hasCues) {\n        this.hide();\n      }\n\n      // We subtract 1px here to avoid line breaks at the right border of the subtitle overlay that can happen\n      // when texts contain whitespaces. It's probably some kind of pixel rounding issue in the browser's\n      // layouting, but the actual reason could not be determined. Aiming for a target width - 1px would work in\n      // most browsers, but Safari has a \"quantized\" font size rendering with huge steps in between so we need\n      // to subtract some more pixels to avoid line breaks there as well.\n      const subtitleOverlayWidth = this.getDomElement().width() - 10;\n      const subtitleOverlayHeight = this.getDomElement().height();\n\n      // The size ratio of the letter grid\n      const fontGridSizeRatio = (dummyLabelCharWidth * SubtitleOverlay.CEA608_NUM_COLUMNS) /\n        (dummyLabelCharHeight * SubtitleOverlay.CEA608_NUM_ROWS);\n      // The size ratio of the available space for the grid\n      const subtitleOverlaySizeRatio = subtitleOverlayWidth / subtitleOverlayHeight;\n\n      if (subtitleOverlaySizeRatio > fontGridSizeRatio) {\n        // When the available space is wider than the text grid, the font size is simply\n        // determined by the height of the available space.\n        fontSize = subtitleOverlayHeight / SubtitleOverlay.CEA608_NUM_ROWS;\n\n        // Calculate the additional letter spacing required to evenly spread the text across the grid's width\n        const gridSlotWidth = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS;\n        const fontCharWidth = fontSize * fontSizeRatio;\n        fontLetterSpacing = gridSlotWidth - fontCharWidth;\n      } else {\n        // When the available space is not wide enough, texts would vertically overlap if we take\n        // the height as a base for the font size, so we need to limit the height. We do that\n        // by determining the font size by the width of the available space.\n        fontSize = subtitleOverlayWidth / SubtitleOverlay.CEA608_NUM_COLUMNS / fontSizeRatio;\n        fontLetterSpacing = 0;\n      }\n\n      // Update font-size of all active subtitle labels\n      for (let label of this.getComponents()) {\n        if (label instanceof SubtitleLabel) {\n          label.getDomElement().css({\n            'font-size': `${fontSize}px`,\n            'letter-spacing': `${fontLetterSpacing}px`,\n          });\n        }\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      if (enabled) {\n        updateCEA608FontSize();\n      } else {\n        fontSizeCalculationRequired = true;\n      }\n    });\n\n    this.preprocessLabelEventCallback.subscribe((event: SubtitleCueEvent, label: SubtitleLabel) => {\n      const isCEA608 = event.position != null;\n      if (!isCEA608) {\n        // Skip all non-CEA608 cues\n        return;\n      }\n\n      if (!enabled) {\n        enabled = true;\n        this.getDomElement().addClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n\n        // We conditionally update the font size by this flag here to avoid updating every time a subtitle\n        // is added into an empty overlay. Because we reset the overlay when all subtitles are gone, this\n        // would trigger an unnecessary update every time, but it's only required under certain conditions,\n        // e.g. after the player size has changed.\n        if (fontSizeCalculationRequired) {\n          updateCEA608FontSize();\n          fontSizeCalculationRequired = false;\n        }\n      }\n\n      label.getDomElement().css({\n        'left': `${event.position.column * SubtitleOverlay.CEA608_COLUMN_OFFSET}%`,\n        'top': `${event.position.row * SubtitleOverlay.CEA608_ROW_OFFSET}%`,\n        'font-size': `${fontSize}px`,\n        'letter-spacing': `${fontLetterSpacing}px`,\n      });\n    });\n\n    const reset = () => {\n      this.getDomElement().removeClass(this.prefixCss(SubtitleOverlay.CLASS_CEA_608));\n      enabled = false;\n    };\n\n    player.on(player.exports.PlayerEvent.CueExit, () => {\n      if (!this.subtitleManager.hasCues) {\n        // Disable CEA-608 mode when all subtitles are gone (to allow correct formatting and\n        // display of other types of subtitles, e.g. the formatting preview subtitle)\n        reset();\n      }\n    });\n\n    player.on(player.exports.PlayerEvent.SourceUnloaded, reset);\n    player.on(player.exports.PlayerEvent.SubtitleEnabled, reset);\n    player.on(player.exports.PlayerEvent.SubtitleDisabled, reset);\n  }\n\n  enablePreviewSubtitleLabel(): void {\n    if (!this.subtitleManager.hasCues) {\n      this.previewSubtitleActive = true;\n      this.subtitleContainerManager.addLabel(this.previewSubtitle);\n      this.updateComponents();\n      this.show();\n    }\n  }\n\n  removePreviewSubtitleLabel(): void {\n    if (this.previewSubtitleActive) {\n      this.previewSubtitleActive = false;\n      this.subtitleContainerManager.removeLabel(this.previewSubtitle);\n      this.updateComponents();\n    }\n  }\n}\n\ninterface ActiveSubtitleCue {\n  event: SubtitleCueEvent;\n  label: SubtitleLabel;\n}\n\ninterface ActiveSubtitleCueMap {\n  [id: string]: ActiveSubtitleCue[];\n}\n\ninterface SubtitleLabelConfig extends LabelConfig {\n  vtt?: VTTProperties;\n  region?: string;\n  regionStyle?: string;\n}\n\nexport class SubtitleLabel extends Label<SubtitleLabelConfig> {\n\n  constructor(config: SubtitleLabelConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitle-label',\n    }, this.config);\n  }\n\n  get vtt(): VTTProperties {\n    return this.config.vtt;\n  }\n\n  get region(): string {\n    return this.config.region;\n  }\n\n  get regionStyle(): string {\n    return this.config.regionStyle;\n  }\n}\n\nclass ActiveSubtitleManager {\n\n  private activeSubtitleCueMap: ActiveSubtitleCueMap;\n  private activeSubtitleCueCount: number;\n\n  constructor() {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n\n  /**\n   * Calculates a unique ID for a subtitle cue, which is needed to associate an CueEnter with its CueExit\n   * event so we can remove the correct subtitle in CueExit when multiple subtitles are active at the same time.\n   * The start time plus the text should make a unique identifier, and in the only case where a collision\n   * can happen, two similar texts will be displayed at a similar time and a similar position (or without position).\n   * The start time should always be known, because it is required to schedule the CueEnter event. The end time\n   * must not necessarily be known and therefore cannot be used for the ID.\n   * @param event\n   * @return {string}\n   */\n  private static calculateId(event: SubtitleCueEvent): string {\n    let id = event.start + '-' + event.text;\n\n    if (event.position) {\n      id += '-' + event.position.row + '-' + event.position.column;\n    }\n\n    return id;\n  }\n\n  cueEnter(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    this.addCueToMap(event, label);\n  }\n\n  cueUpdate(event: SubtitleCueEvent, label: SubtitleLabel): SubtitleLabel | undefined {\n    const labelToReplace = this.popCueFromMap(event);\n\n    if (labelToReplace) {\n      this.addCueToMap(event, label);\n      return labelToReplace;\n    }\n\n    return undefined;\n  }\n\n  private addCueToMap(event: SubtitleCueEvent, label: SubtitleLabel): void {\n    let id = ActiveSubtitleManager.calculateId(event);\n\n    // Create array for id if it does not exist\n    this.activeSubtitleCueMap[id] = this.activeSubtitleCueMap[id] || [];\n\n    // Add cue\n    this.activeSubtitleCueMap[id].push({ event, label });\n    this.activeSubtitleCueCount++;\n  }\n\n  private popCueFromMap(event: SubtitleCueEvent): SubtitleLabel | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      // Remove cue\n      /* We apply the FIFO approach here and remove the oldest cue from the associated id. When there are multiple cues\n       * with the same id, there is no way to know which one of the cues is to be deleted, so we just hope that FIFO\n       * works fine. Theoretically it can happen that two cues with colliding ids are removed at different times, in\n       * the wrong order. This rare case has yet to be observed. If it ever gets an issue, we can take the unstable\n       * cue end time (which can change between CueEnter and CueExit IN CueUpdate) and use it as an\n       * additional hint to try and remove the correct one of the colliding cues.\n       */\n      let activeSubtitleCue = activeSubtitleCues.shift();\n      this.activeSubtitleCueCount--;\n\n      return activeSubtitleCue.label;\n    }\n  }\n\n  static generateImageTagText(imageData: string): string | undefined {\n    if (!imageData) {\n      return;\n    }\n\n    const imgTag = new DOM('img', {\n      src: imageData,\n    });\n    imgTag.css('width', '100%');\n    return imgTag.get(0).outerHTML; // return the html as string\n  }\n\n  /**\n   * Returns the label associated with an already added cue.\n   * @param event\n   * @return {SubtitleLabel}\n   */\n  getCues(event: SubtitleCueEvent): SubtitleLabel[] | undefined {\n    let id = ActiveSubtitleManager.calculateId(event);\n    let activeSubtitleCues = this.activeSubtitleCueMap[id];\n    if (activeSubtitleCues && activeSubtitleCues.length > 0) {\n      return activeSubtitleCues.map((cue) => cue.label);\n    }\n  }\n\n  /**\n   * Removes the subtitle cue from the manager and returns the label that should be removed from the subtitle overlay,\n   * or null if there is no associated label existing (e.g. because all labels have been {@link #clear cleared}.\n   * @param event\n   * @return {SubtitleLabel|null}\n   */\n  cueExit(event: SubtitleCueEvent): SubtitleLabel {\n    return this.popCueFromMap(event);\n  }\n\n  /**\n   * Returns the number of active subtitle cues.\n   * @return {number}\n   */\n  get cueCount(): number {\n    // We explicitly count the cues to save an Array.reduce on every cueCount call (which can happen frequently)\n    return this.activeSubtitleCueCount;\n  }\n\n  /**\n   * Returns true if there are active subtitle cues, else false.\n   * @return {boolean}\n   */\n  get hasCues(): boolean {\n    return this.cueCount > 0;\n  }\n\n  /**\n   * Removes all subtitle cues from the manager.\n   */\n  clear(): void {\n    this.activeSubtitleCueMap = {};\n    this.activeSubtitleCueCount = 0;\n  }\n}\n\nexport class SubtitleRegionContainerManager {\n  private subtitleRegionContainers: { [regionName: string]: SubtitleRegionContainer } = {};\n\n  /**\n   * @param subtitleOverlay Reference to the subtitle overlay for adding and removing the containers.\n   */\n  constructor(private subtitleOverlay: SubtitleOverlay) {\n    this.subtitleOverlay = subtitleOverlay;\n  }\n\n  private getRegion(label: SubtitleLabel): { regionContainerId: string, regionName: string } {\n    if (label.vtt) {\n      return {\n        regionContainerId: label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt',\n        regionName: 'vtt',\n      };\n    }\n\n    return {\n      regionContainerId: label.region || 'default',\n      regionName: label.region || 'default',\n    };\n  }\n\n  /**\n   * Creates and wraps a subtitle label into a container div based on the subtitle region.\n   * If the subtitle has positioning information it is added to the container.\n   * @param label The subtitle label to wrap\n   */\n  addLabel(label: SubtitleLabel, overlaySize?: Size): void {\n    const { regionContainerId, regionName } = this.getRegion(label);\n    const cssClasses = [`subtitle-position-${regionName}`];\n\n    if (label.vtt && label.vtt.region) {\n      cssClasses.push(`vtt-region-${label.vtt.region.id}`);\n    }\n\n    if (!this.subtitleRegionContainers[regionContainerId]) {\n      const regionContainer = new SubtitleRegionContainer({\n        cssClasses,\n      });\n\n      this.subtitleRegionContainers[regionContainerId] = regionContainer;\n\n      if (label.regionStyle) {\n        regionContainer.getDomElement().attr('style', label.regionStyle);\n      } else if (label.vtt && !label.vtt.region) {\n        /**\n         * If there is no region present to wrap the Cue Box, the Cue box becomes the\n         * region itself. Therefore the positioning values have to come from the box.\n         */\n        regionContainer.getDomElement().css('position', 'static');\n      } else {\n        // getDomElement needs to be called at least once to ensure the component exists\n        regionContainer.getDomElement();\n      }\n\n      for (const regionContainerId in this.subtitleRegionContainers) {\n        this.subtitleOverlay.addComponent(this.subtitleRegionContainers[regionContainerId]);\n      }\n    }\n\n    this.subtitleRegionContainers[regionContainerId].addLabel(label, overlaySize);\n  }\n\n  replaceLabel(previousLabel: SubtitleLabel, newLabel: SubtitleLabel): void {\n    const { regionContainerId } = this.getRegion(previousLabel);\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(previousLabel);\n    this.subtitleRegionContainers[regionContainerId].addLabel(newLabel);\n  }\n\n  /**\n   * Removes a subtitle label from a container.\n   */\n  removeLabel(label: SubtitleLabel): void {\n    let regionContainerId;\n\n    if (label.vtt) {\n      regionContainerId = label.vtt.region && label.vtt.region.id ? label.vtt.region.id : 'vtt';\n    } else {\n      regionContainerId = label.region || 'default';\n    }\n\n    this.subtitleRegionContainers[regionContainerId].removeLabel(label);\n\n    // Remove container if no more labels are displayed\n    if (this.subtitleRegionContainers[regionContainerId].isEmpty()) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionContainerId]);\n      delete this.subtitleRegionContainers[regionContainerId];\n    }\n  }\n\n  /**\n   * Removes all subtitle containers.\n   */\n  clear(): void {\n    for (const regionName in this.subtitleRegionContainers) {\n      this.subtitleOverlay.removeComponent(this.subtitleRegionContainers[regionName]);\n    }\n\n    this.subtitleRegionContainers = {};\n  }\n}\n\nexport class SubtitleRegionContainer extends Container<ContainerConfig> {\n  private labelCount = 0;\n\n  constructor(config: ContainerConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'subtitle-region-container',\n    }, this.config);\n  }\n\n  addLabel(labelToAdd: SubtitleLabel, overlaySize?: Size) {\n    this.labelCount++;\n\n    if (labelToAdd.vtt) {\n      if (labelToAdd.vtt.region && overlaySize) {\n        VttUtils.setVttRegionStyles(this, labelToAdd.vtt.region, overlaySize);\n      }\n\n      VttUtils.setVttCueBoxStyles(labelToAdd, overlaySize);\n    }\n\n    this.addComponent(labelToAdd);\n    this.updateComponents();\n  }\n\n  removeLabel(labelToRemove: SubtitleLabel): void {\n    this.labelCount--;\n    this.removeComponent(labelToRemove);\n    this.updateComponents();\n  }\n\n  public isEmpty(): boolean {\n    return this.labelCount === 0;\n  }\n}\n","import {SelectBox} from './selectbox';\nimport {ListSelectorConfig} from './listselector';\nimport {UIInstanceManager} from '../uimanager';\nimport {SubtitleSwitchHandler} from '../subtitleutils';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between available subtitle and caption tracks.\n */\nexport class SubtitleSelectBox extends SelectBox {\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitleselectbox'],\n      ariaLabel: i18n.getLocalizer('subtitle.select'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    new SubtitleSwitchHandler(player, this, uimanager);\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class BackgroundColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.backgroundColor.isSet() && this.settingsManager.backgroundOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'bgcolor-' + this.settingsManager.backgroundColor.value + this.settingsManager.backgroundOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundColor.value = key;\n    });\n\n    this.settingsManager.backgroundColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.backgroundOpacity.clear();\n      } else if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.backgroundOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.backgroundOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundColor.isSet()) {\n      this.selectItem(this.settingsManager.backgroundColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class BackgroundOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsbackgroundopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.backgroundOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.backgroundOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.backgroundColor.clear();\n      } else if (!this.settingsManager.backgroundColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.backgroundColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.backgroundOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.backgroundOpacity.isSet()) {\n      this.selectItem(this.settingsManager.backgroundOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different character edge.\n */\nexport class CharacterEdgeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingscharacteredgeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('raised', i18n.getLocalizer('settings.subtitles.characterEdge.raised'));\n    this.addItem('depressed', i18n.getLocalizer('settings.subtitles.characterEdge.depressed'));\n    this.addItem('uniform', i18n.getLocalizer('settings.subtitles.characterEdge.uniform'));\n    this.addItem('dropshadowed', i18n.getLocalizer('settings.subtitles.characterEdge.dropshadowed'));\n\n    this.settingsManager.characterEdge.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('characteredge-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.characterEdge.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.characterEdge.isSet()) {\n      this.selectItem(this.settingsManager.characterEdge.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.fontColor.isSet() && this.settingsManager.fontOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'fontcolor-' + this.settingsManager.fontColor.value + this.settingsManager.fontOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontColor.value = key;\n    });\n\n    this.settingsManager.fontColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.fontOpacity.clear();\n      } else if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.fontOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.fontOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontColor.isSet()) {\n      this.selectItem(this.settingsManager.fontColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font family.\n */\nexport class FontFamilySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontfamilyselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('monospacedserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedserif'));\n    this.addItem('proportionalserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('monospacedsansserif', i18n.getLocalizer('settings.subtitles.font.family.monospacedsansserif'));\n    this.addItem('proportionalsansserif', i18n.getLocalizer('settings.subtitles.font.family.proportionalserif'));\n    this.addItem('casual', i18n.getLocalizer('settings.subtitles.font.family.casual'));\n    this.addItem('cursive', i18n.getLocalizer('settings.subtitles.font.family.cursive'));\n    this.addItem('smallcapital', i18n.getLocalizer('settings.subtitles.font.family.smallcapital'));\n\n    this.settingsManager.fontFamily.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontfamily-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontFamily.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontFamily.isSet()) {\n      this.selectItem(this.settingsManager.fontFamily.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.fontOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.fontColor.clear();\n      } else if (!this.settingsManager.fontColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.fontColor.value = 'white';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.fontOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontOpacity.isSet()) {\n      this.selectItem(this.settingsManager.fontOpacity.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different font colors.\n */\nexport class FontSizeSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingsfontsizeselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('150', i18n.getLocalizer('percent', { value: 150 }));\n    this.addItem('200', i18n.getLocalizer('percent', { value: 200 }));\n    this.addItem('300', i18n.getLocalizer('percent', { value: 300 }));\n    this.addItem('400', i18n.getLocalizer('percent', { value: 400 }));\n\n    this.settingsManager.fontSize.onChanged.subscribe((sender, property) => {\n      if (property.isSet()) {\n        this.toggleOverlayClass('fontsize-' + property.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n\n      // Select the item in case the property was set from outside\n      this.selectItem(property.value);\n    });\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.fontSize.value = key;\n    });\n\n    // Load initial value\n    if (this.settingsManager.fontSize.isSet()) {\n      this.selectItem(this.settingsManager.fontSize.value);\n    }\n  }\n}\n","import {SubtitleOverlay} from '../subtitleoverlay';\nimport {ListSelectorConfig} from '../listselector';\nimport {SelectBox} from '../selectbox';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\n\nexport interface SubtitleSettingSelectBoxConfig extends ListSelectorConfig {\n  overlay: SubtitleOverlay;\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * Base class for all subtitles settings select box\n **/\nexport class SubtitleSettingSelectBox extends SelectBox {\n\n  protected settingsManager: SubtitleSettingsManager;\n  protected overlay: SubtitleOverlay;\n  private currentCssClass: string;\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.settingsManager = config.settingsManager;\n    this.overlay = config.overlay;\n  }\n\n  /**\n   * Removes a previously set class and adds the passed in class.\n   * @param cssClass The new class to replace the previous class with or null to just remove the previous class\n   */\n  protected toggleOverlayClass(cssClass: string): void {\n    // Remove previous class if existing\n    if (this.currentCssClass) {\n      this.overlay.getDomElement().removeClass(this.currentCssClass);\n      this.currentCssClass = null;\n    }\n\n    // Add new class if specified. If the new class is null, we don't add anything.\n    if (cssClass) {\n      this.currentCssClass = this.prefixCss(cssClass);\n      this.overlay.getDomElement().addClass(this.currentCssClass);\n    }\n  }\n}\n","import {LabelConfig} from '../label';\nimport {Container, ContainerConfig} from '../container';\nimport {DOM} from '../../dom';\nimport {SettingsPanelPageOpenButton} from '../settingspanelpageopenbutton';\nimport { LocalizableText, i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsLabelConfig extends LabelConfig {\n  opener: SettingsPanelPageOpenButton;\n}\n\nexport class SubtitleSettingsLabel extends Container<ContainerConfig> {\n\n  private opener: SettingsPanelPageOpenButton;\n\n  private text: LocalizableText;\n\n  private for: string;\n\n  constructor(config: SubtitleSettingsLabelConfig) {\n    super(config);\n\n    this.opener = config.opener;\n    this.text = config.text;\n    this.for = config.for;\n\n    this.config = this.mergeConfig(<ContainerConfig>config, {\n      cssClass: 'ui-label',\n      components: [\n        this.opener,\n      ],\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    let labelElement = new DOM('label', {\n      'id': this.config.id,\n      'class': this.getCssClasses(),\n      'for': this.for,\n    }).append(\n      new DOM('span', {}).html(i18n.performLocalization(this.text)),\n      this.opener.getDomElement(),\n    );\n\n    return labelElement;\n  }\n}\n","import {StorageUtils} from '../../storageutils';\nimport {Component, ComponentConfig} from '../component';\nimport {EventDispatcher, Event} from '../../eventdispatcher';\n\ninterface SubtitleSettings {\n  fontColor?: string;\n  fontOpacity?: string;\n  fontFamily?: string;\n  fontSize?: string;\n  characterEdge?: string;\n  backgroundColor?: string;\n  backgroundOpacity?: string;\n  windowColor?: string;\n  windowOpacity?: string;\n}\n\ninterface Properties {\n  [name: string]: SubtitleSettingsProperty<string>;\n}\n\nexport class SubtitleSettingsManager {\n\n  private userSettings: SubtitleSettings;\n  private localStorageKey: string;\n\n  private _properties: Properties = {\n    fontColor: new SubtitleSettingsProperty<string>(this),\n    fontOpacity: new SubtitleSettingsProperty<string>(this),\n    fontFamily: new SubtitleSettingsProperty<string>(this),\n    fontSize: new SubtitleSettingsProperty<string>(this),\n    characterEdge: new SubtitleSettingsProperty<string>(this),\n    backgroundColor: new SubtitleSettingsProperty<string>(this),\n    backgroundOpacity: new SubtitleSettingsProperty<string>(this),\n    windowColor: new SubtitleSettingsProperty<string>(this),\n    windowOpacity: new SubtitleSettingsProperty<string>(this),\n  };\n\n  constructor() {\n    this.userSettings = {};\n    this.localStorageKey = DummyComponent.instance().prefixCss('subtitlesettings');\n\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].onChanged.subscribe((sender, property) => {\n        if (property.isSet()) {\n          (<any>this.userSettings)[propertyName] = property.value;\n        } else {\n          // Delete the property from the settings object if unset to avoid serialization of null values\n          delete (<any>this.userSettings)[propertyName];\n        }\n\n        // Save the settings object when a property has changed\n        this.save();\n      });\n    }\n\n    this.load();\n  }\n\n  public reset(): void {\n    for (let propertyName in this._properties) {\n      this._properties[propertyName].clear();\n    }\n  }\n\n  public get fontColor(): SubtitleSettingsProperty<string> {\n    return this._properties.fontColor;\n  }\n\n  public get fontOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.fontOpacity;\n  }\n\n  public get fontFamily(): SubtitleSettingsProperty<string> {\n    return this._properties.fontFamily;\n  }\n\n  public get fontSize(): SubtitleSettingsProperty<string> {\n    return this._properties.fontSize;\n  }\n\n  public get characterEdge(): SubtitleSettingsProperty<string> {\n    return this._properties.characterEdge;\n  }\n\n  public get backgroundColor(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundColor;\n  }\n\n  public get backgroundOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.backgroundOpacity;\n  }\n\n  public get windowColor(): SubtitleSettingsProperty<string> {\n    return this._properties.windowColor;\n  }\n\n  public get windowOpacity(): SubtitleSettingsProperty<string> {\n    return this._properties.windowOpacity;\n  }\n\n  /**\n   * Saves the settings to local storage.\n   */\n  public save(): void {\n    StorageUtils.setObject(this.localStorageKey, this.userSettings);\n  }\n\n  /**\n   * Loads the settings from local storage\n   */\n  public load(): void {\n    this.userSettings = StorageUtils.getObject<SubtitleSettings>(this.localStorageKey) || {};\n\n    // Apply the loaded settings\n    for (let property in this.userSettings) {\n      this._properties[property].value = (<any>this.userSettings)[property];\n    }\n  }\n}\n\n/**\n * A dummy component whose sole purpose is to expose the {@link #prefixCss} method to the\n * {@link SubtitleSettingsManager}.\n */\nclass DummyComponent extends Component<ComponentConfig> {\n\n  private static _instance: DummyComponent;\n\n  public static instance(): DummyComponent {\n    if (!DummyComponent._instance) {\n      DummyComponent._instance = new DummyComponent();\n    }\n\n    return DummyComponent._instance;\n  }\n\n  public prefixCss(cssClassOrId: string): string {\n    return super.prefixCss(cssClassOrId);\n  }\n}\n\nexport class SubtitleSettingsProperty<T> {\n\n  private _manager: SubtitleSettingsManager;\n  private _onChanged: EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>;\n  private _value: T;\n\n  constructor(manager: SubtitleSettingsManager) {\n    this._manager = manager;\n    this._onChanged = new EventDispatcher<SubtitleSettingsManager, SubtitleSettingsProperty<T>>();\n  }\n\n  public isSet(): boolean {\n    return this._value != null;\n  }\n\n  public clear(): void {\n    this._value = null;\n    this.onChangedEvent(null);\n  }\n\n  public get value(): T {\n    return this._value;\n  }\n\n  public set value(value: T) {\n    if (typeof value === 'string' && value === 'null') {\n      value = null;\n    }\n\n    this._value = value;\n    this.onChangedEvent(value);\n  }\n\n  protected onChangedEvent(value: T) {\n    this._onChanged.dispatch(this._manager, this);\n  }\n\n  public get onChanged(): Event<SubtitleSettingsManager, SubtitleSettingsProperty<T>> {\n    return this._onChanged.getEvent();\n  }\n}","import {SettingsPanelPage} from '../settingspanelpage';\nimport {SettingsPanel} from '../settingspanel';\nimport {SubtitleOverlay} from '../subtitleoverlay';\nimport {ContainerConfig} from '../container';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Component, ComponentConfig} from '../component';\nimport {FontSizeSelectBox} from './fontsizeselectbox';\nimport {FontFamilySelectBox} from './fontfamilyselectbox';\nimport {FontColorSelectBox} from './fontcolorselectbox';\nimport {FontOpacitySelectBox} from './fontopacityselectbox';\nimport {CharacterEdgeSelectBox} from './characteredgeselectbox';\nimport {BackgroundColorSelectBox} from './backgroundcolorselectbox';\nimport {BackgroundOpacitySelectBox} from './backgroundopacityselectbox';\nimport {WindowColorSelectBox} from './windowcolorselectbox';\nimport {WindowOpacitySelectBox} from './windowopacityselectbox';\nimport {SubtitleSettingsResetButton} from './subtitlesettingsresetbutton';\nimport {UIInstanceManager} from '../../uimanager';\nimport {SettingsPanelPageBackButton} from '../settingspanelpagebackbutton';\nimport {SettingsPanelItem} from '../settingspanelitem';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsPanelPageConfig extends ContainerConfig {\n  settingsPanel: SettingsPanel;\n  overlay: SubtitleOverlay;\n}\n\nexport class SubtitleSettingsPanelPage extends SettingsPanelPage {\n\n  private readonly overlay: SubtitleOverlay;\n  private readonly settingsPanel: SettingsPanel;\n\n  constructor(config: SubtitleSettingsPanelPageConfig) {\n    super(config);\n\n    this.overlay = config.overlay;\n    this.settingsPanel = config.settingsPanel;\n\n    let manager = new SubtitleSettingsManager();\n\n    this.config = this.mergeConfig(config, {\n      components: <Component<ComponentConfig>[]>[\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.size'), new FontSizeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.family'), new FontFamilySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.color'), new FontColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.font.opacity'), new FontOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.characterEdge'), new CharacterEdgeSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.color'), new BackgroundColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.background.opacity'), new BackgroundOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.color'), new WindowColorSelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(i18n.getLocalizer('settings.subtitles.window.opacity'), new WindowOpacitySelectBox({\n          overlay: this.overlay, settingsManager: manager,\n        })),\n        new SettingsPanelItem(new SettingsPanelPageBackButton({\n          container: this.settingsPanel,\n          text: i18n.getLocalizer('back'),\n        }), new SubtitleSettingsResetButton({\n          settingsManager: manager,\n        }), {\n          role: 'menubar',\n        }),\n      ],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onActive.subscribe(() => {\n      this.overlay.enablePreviewSubtitleLabel();\n    });\n\n    this.onInactive.subscribe(() => {\n      this.overlay.removePreviewSubtitleLabel();\n    });\n  }\n}","import {UIInstanceManager} from '../../uimanager';\nimport {SubtitleSettingsManager} from './subtitlesettingsmanager';\nimport {Button, ButtonConfig} from '../button';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\nexport interface SubtitleSettingsResetButtonConfig extends ButtonConfig {\n  settingsManager: SubtitleSettingsManager;\n}\n\n/**\n * A button that resets all subtitle settings to their defaults.\n */\nexport class SubtitleSettingsResetButton extends Button<ButtonConfig> {\n\n  constructor(config: SubtitleSettingsResetButtonConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-subtitlesettingsresetbutton',\n      text: i18n.getLocalizer('reset'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.onClick.subscribe(() => {\n      (<SubtitleSettingsResetButtonConfig>this.config).settingsManager.reset();\n    });\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background colors.\n */\nexport class WindowColorSelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowcolorselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('white', i18n.getLocalizer('colors.white'));\n    this.addItem('black', i18n.getLocalizer('colors.black'));\n    this.addItem('red', i18n.getLocalizer('colors.red'));\n    this.addItem('green', i18n.getLocalizer('colors.green'));\n    this.addItem('blue', i18n.getLocalizer('colors.blue'));\n    this.addItem('cyan', i18n.getLocalizer('colors.cyan'));\n    this.addItem('yellow', i18n.getLocalizer('colors.yellow'));\n    this.addItem('magenta', i18n.getLocalizer('colors.magenta'));\n\n\n\n    let setColorAndOpacity = () => {\n      if (this.settingsManager.windowColor.isSet() && this.settingsManager.windowOpacity.isSet()) {\n        this.toggleOverlayClass(\n          'windowcolor-' + this.settingsManager.windowColor.value + this.settingsManager.windowOpacity.value);\n      } else {\n        this.toggleOverlayClass(null);\n      }\n    };\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowColor.value = key;\n    });\n\n    this.settingsManager.windowColor.onChanged.subscribe((sender, property) => {\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowColor.isSet()) {\n        // ... clear the opacity when the color is not set\n        this.settingsManager.windowOpacity.clear();\n      } else if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... set an opacity when the color is set\n        this.settingsManager.windowOpacity.value = '100';\n      }\n      this.selectItem(property.value);\n      setColorAndOpacity();\n    });\n\n    this.settingsManager.windowOpacity.onChanged.subscribe(() => {\n      setColorAndOpacity();\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowColor.isSet()) {\n      this.selectItem(this.settingsManager.windowColor.value);\n    }\n  }\n}\n","import { SubtitleSettingSelectBox, SubtitleSettingSelectBoxConfig } from './subtitlesettingselectbox';\nimport {UIInstanceManager} from '../../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../../localization/i18n';\n\n/**\n * A select box providing a selection of different background opacity.\n */\nexport class WindowOpacitySelectBox extends SubtitleSettingSelectBox {\n\n  constructor(config: SubtitleSettingSelectBoxConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-subtitlesettingswindowopacityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    this.addItem(null, i18n.getLocalizer('default'));\n    this.addItem('100', i18n.getLocalizer('percent', { value: 100 }));\n    this.addItem('75', i18n.getLocalizer('percent', { value: 75 }));\n    this.addItem('50', i18n.getLocalizer('percent', { value: 50 }));\n    this.addItem('25', i18n.getLocalizer('percent', { value: 25 }));\n    this.addItem('0', i18n.getLocalizer('percent', { value: 0 }));\n\n    this.onItemSelected.subscribe((sender, key: string) => {\n      this.settingsManager.windowOpacity.value = key;\n\n      // Color and opacity go together, so we need to...\n      if (!this.settingsManager.windowOpacity.isSet()) {\n        // ... clear the color when the opacity is not set\n        this.settingsManager.windowColor.clear();\n      } else if (!this.settingsManager.windowColor.isSet()) {\n        // ... set a color when the opacity is set\n        this.settingsManager.windowColor.value = 'black';\n      }\n    });\n\n    // Update selected item when value is set from somewhere else\n    this.settingsManager.windowOpacity.onChanged.subscribe((sender, property) => {\n      this.selectItem(property.value);\n    });\n\n    // Load initial value\n    if (this.settingsManager.windowOpacity.isSet()) {\n      this.selectItem(this.settingsManager.windowOpacity.value);\n    }\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { UIInstanceManager } from '../uimanager';\nimport { DOM } from '../dom';\nimport { ComponentConfig } from './component';\nimport { TimelineMarker } from '../uiconfig';\nimport { SeekBarMarker } from './seekbar';\nimport { PlayerUtils } from '../playerutils';\nimport { Timeout } from '../timeout';\n\nexport interface MarkersConfig extends ComponentConfig {\n  /**\n   * Used for seekBar marker snapping range percentage\n   */\n  snappingRange?: number;\n}\n\nexport class TimelineMarkersHandler {\n  private markersContainer: DOM;\n  private timelineMarkers: SeekBarMarker[];\n  private player: PlayerAPI;\n  private uimanager: UIInstanceManager;\n  private pausedTimeshiftUpdater: Timeout;\n  private getSeekBarWidth: () => number;\n  protected config: MarkersConfig;\n\n  constructor(config: MarkersConfig, getSeekBarWidth: () => number, markersContainer: DOM) {\n    this.config = config;\n    this.getSeekBarWidth = getSeekBarWidth;\n    this.markersContainer = markersContainer;\n    this.timelineMarkers = [];\n  }\n\n  public initialize(player: PlayerAPI, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.uimanager = uimanager;\n    this.configureMarkers();\n  }\n\n  private configureMarkers(): void {\n    // Remove markers when unloaded\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakStarted, () => this.clearMarkers());\n    this.player.on(this.player.exports.PlayerEvent.AdBreakFinished, () => this.updateMarkers());\n    // Update markers when the size of the seekbar changes\n    this.player.on(this.player.exports.PlayerEvent.PlayerResized, () => this.updateMarkersDOM());\n\n    this.player.on(this.player.exports.PlayerEvent.SourceLoaded, () => {\n      if (this.player.isLive()) {\n        // Update marker position as timeshift range changes\n        this.player.on(this.player.exports.PlayerEvent.TimeChanged, () => this.updateMarkers());\n        // Update marker postion when paused as timeshift range changes\n        this.configureLivePausedTimeshiftUpdater(() => this.updateMarkers());\n      }\n    });\n    this.uimanager.getConfig().events.onUpdated.subscribe(() => this.updateMarkers());\n    this.uimanager.onRelease.subscribe(() => this.uimanager.getConfig().events.onUpdated.unsubscribe(() => this.updateMarkers()));\n\n    // Init markers at startup\n    this.updateMarkers();\n  }\n\n  public getMarkerAtPosition(percentage: number): SeekBarMarker | null {\n    const snappingRange = this.config.snappingRange;\n\n    const matchingMarker = this.timelineMarkers.find(marker => {\n      const hasDuration = marker.duration > 0;\n      // Handle interval markers\n      const intervalMarkerMatch =\n        hasDuration &&\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + marker.duration + snappingRange;\n\n      // Handle position markers\n      const positionMarkerMatch =\n        percentage >= marker.position - snappingRange &&\n        percentage <= marker.position + snappingRange;\n\n      return intervalMarkerMatch || positionMarkerMatch;\n    });\n\n    return matchingMarker || null;\n  }\n\n  private clearMarkers(): void {\n    this.timelineMarkers = [];\n    this.markersContainer.empty();\n  }\n\n  private removeMarkerFromConfig(marker: TimelineMarker): void {\n    this.uimanager.getConfig().metadata.markers = this.uimanager.getConfig().metadata.markers.filter(_marker => marker !== _marker);\n  }\n\n  private filterRemovedMarkers(): void {\n    this.timelineMarkers = this.timelineMarkers.filter(seekbarMarker => {\n      const matchingMarker = this.uimanager.getConfig().metadata.markers.find(_marker => seekbarMarker.marker === _marker);\n      if (!matchingMarker) {\n        this.removeMarkerFromDOM(seekbarMarker);\n      }\n      return matchingMarker;\n    });\n  }\n\n  private removeMarkerFromDOM(marker: SeekBarMarker): void {\n    if (marker.element) {\n      marker.element.remove();\n    }\n  }\n\n  private updateMarkers(): void {\n    if (!shouldProcessMarkers(this.player, this.uimanager)) {\n      this.clearMarkers();\n      return;\n    }\n\n    this.filterRemovedMarkers();\n\n    this.uimanager.getConfig().metadata.markers.forEach(marker => {\n      const { markerPosition, markerDuration } = getMarkerPositions(this.player, marker);\n\n      if (shouldRemoveMarker(markerPosition, markerDuration)) {\n        this.removeMarkerFromConfig(marker);\n      } else if (markerPosition <= 100) {\n        const matchingMarker = this.timelineMarkers.find(seekbarMarker => seekbarMarker.marker === marker);\n\n        if (matchingMarker) {\n          matchingMarker.position = markerPosition;\n          matchingMarker.duration = markerDuration;\n\n          this.updateMarkerDOM(matchingMarker);\n        } else {\n          const newMarker: SeekBarMarker = { marker, position: markerPosition, duration: markerDuration };\n          this.timelineMarkers.push(newMarker);\n\n          this.createMarkerDOM(newMarker);\n        }\n      }\n    });\n  }\n\n  private getMarkerCssProperties(marker: SeekBarMarker): { [propertyName: string]: string } {\n    const seekBarWidthPx = this.getSeekBarWidth();\n\n    const positionInPx = (seekBarWidthPx / 100) * (marker.position < 0 ? 0 : marker.position);\n    const cssProperties: { [propertyName: string]: string } = {\n      'transform': `translateX(${positionInPx}px)`,\n    };\n\n    if (marker.duration > 0) {\n      const markerWidthPx = Math.round(seekBarWidthPx / 100 * marker.duration);\n      cssProperties['width'] = `${markerWidthPx}px`;\n    }\n\n    return cssProperties;\n  }\n\n  private updateMarkerDOM(marker: SeekBarMarker): void {\n    marker.element.css(this.getMarkerCssProperties(marker));\n  }\n\n  private createMarkerDOM(marker: SeekBarMarker): void {\n    const markerClasses = ['seekbar-marker'].concat(marker.marker.cssClasses || [])\n      .map(cssClass => this.prefixCss(cssClass));\n\n    const markerElement = new DOM('div', {\n      'class': markerClasses.join(' '),\n      'data-marker-time': String(marker.marker.time),\n      'data-marker-title': String(marker.marker.title),\n    }).css(this.getMarkerCssProperties(marker));\n\n    if (marker.marker.imageUrl) {\n      const removeImage = () => {\n        imageElement.remove();\n      };\n\n      const imageElement = new DOM('img', {\n        'class': this.prefixCss('seekbar-marker-image'),\n        'src': marker.marker.imageUrl,\n      }).on('error', removeImage);\n\n      markerElement.append(imageElement);\n    }\n\n    marker.element = markerElement;\n    this.markersContainer.append(markerElement);\n  }\n\n  private updateMarkersDOM(): void {\n    this.timelineMarkers.forEach(marker => {\n      if (marker.element) {\n        this.updateMarkerDOM(marker);\n      } else {\n        this.createMarkerDOM(marker);\n      }\n    });\n  }\n\n  private configureLivePausedTimeshiftUpdater(\n    handler: () => void,\n  ): void {\n    // Regularly update the marker position while the timeout is active\n    this.pausedTimeshiftUpdater = new Timeout(1000, handler, true);\n\n    this.player.on(this.player.exports.PlayerEvent.Paused, () => {\n      if (this.player.isLive() && this.player.getMaxTimeShift() < 0) {\n        this.pausedTimeshiftUpdater.start();\n      }\n    });\n\n    // Stop updater when playback continues (no matter if the updater was started before)\n    this.player.on(this.player.exports.PlayerEvent.Play, () => this.pausedTimeshiftUpdater.clear());\n    this.player.on(this.player.exports.PlayerEvent.Destroy, () => this.pausedTimeshiftUpdater.clear());\n  }\n\n  protected prefixCss(cssClassOrId: string): string {\n    return this.config.cssPrefix + '-' + cssClassOrId;\n  }\n}\n\nfunction getMarkerPositions(player: PlayerAPI, marker: TimelineMarker) {\n  const duration = getDuration(player);\n\n  const markerPosition = 100 / duration * getMarkerTime(marker, player, duration); // convert absolute time to percentage\n  let markerDuration = 100 / duration * marker.duration;\n\n  if (markerPosition < 0 && !isNaN(markerDuration)) {\n    // Shrink marker duration for on live streams as they reach end\n    markerDuration = markerDuration + markerPosition;\n  }\n\n  if (100 - markerPosition < markerDuration) {\n    // Shrink marker if it overflows timeline\n    markerDuration = 100 - markerPosition;\n  }\n\n  return { markerDuration, markerPosition };\n}\n\nfunction getMarkerTime(marker: TimelineMarker, player: PlayerAPI, duration: number): number {\n  if (!player.isLive()) {\n    return marker.time;\n  }\n\n  return duration - (PlayerUtils.getSeekableRangeRespectingLive(player).end - marker.time);\n}\n\nfunction getDuration(player: PlayerAPI): number {\n  if (!player.isLive()) {\n    return player.getDuration();\n  }\n  const { start, end } = PlayerUtils.getSeekableRangeRespectingLive(player);\n\n  return end - start;\n}\n\nfunction shouldRemoveMarker(markerPosition: number, markerDuration: number): boolean {\n  return (markerDuration < 0 || isNaN(markerDuration)) && markerPosition < 0;\n}\n\nfunction shouldProcessMarkers(player: PlayerAPI, uimanager: UIInstanceManager): boolean {\n  // Don't generate timeline markers if we don't yet have a duration\n  // The duration check is for buggy platforms where the duration is not available instantly (Chrome on Android 4.3)\n  const validToProcess = player.getDuration() !== Infinity || player.isLive();\n  const hasMarkers = uimanager.getConfig().metadata.markers.length > 0;\n\n  return validToProcess && hasMarkers;\n}\n","import {Container, ContainerConfig} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {MetadataLabel, MetadataLabelContent} from './metadatalabel';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link TitleBar}.\n */\nexport interface TitleBarConfig extends ContainerConfig {\n  /**\n   * Specifies if the title bar should stay hidden when no metadata label contains any text. Does not make a lot\n   * of sense if the title bar contains other components than just MetadataLabels (like in the default configuration).\n   * Default: false\n   */\n  keepHiddenWithoutMetadata?: boolean;\n}\n\n/**\n * Displays a title bar containing a label with the title of the video.\n */\nexport class TitleBar extends Container<TitleBarConfig> {\n\n  constructor(config: TitleBarConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-titlebar',\n      hidden: true,\n      components: [\n        new MetadataLabel({ content: MetadataLabelContent.Title }),\n        new MetadataLabel({ content: MetadataLabelContent.Description }),\n      ],\n      keepHiddenWithoutMetadata: false,\n    }, <TitleBarConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let config = this.getConfig();\n    let shouldBeShown = !this.isHidden();\n    let hasMetadataText = true; // Flag to track if any metadata label contains text\n\n    let checkMetadataTextAndUpdateVisibility = () => {\n      hasMetadataText = false;\n\n      // Iterate through metadata labels and check if at least one of them contains text\n      for (let component of this.getComponents()) {\n        if (component instanceof MetadataLabel) {\n          if (!component.isEmpty()) {\n            hasMetadataText = true;\n            break;\n          }\n        }\n      }\n\n      if (this.isShown()) {\n        // Hide a visible titlebar if it does not contain any text and the hidden flag is set\n        if (config.keepHiddenWithoutMetadata && !hasMetadataText) {\n          this.hide();\n        }\n      } else if (shouldBeShown) {\n        // Show a hidden titlebar if it should actually be shown\n        this.show();\n      }\n    };\n\n    // Listen to text change events to update the hasMetadataText flag when the metadata dynamically changes\n    for (let component of this.getComponents()) {\n      if (component instanceof MetadataLabel) {\n        component.onTextChanged.subscribe(checkMetadataTextAndUpdateVisibility);\n      }\n    }\n\n    uimanager.onControlsShow.subscribe(() => {\n      shouldBeShown = true;\n      if (!(config.keepHiddenWithoutMetadata && !hasMetadataText)) {\n        this.show();\n      }\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      shouldBeShown = false;\n      this.hide();\n    });\n\n    // init\n    checkMetadataTextAndUpdateVisibility();\n  }\n}","import {Button, ButtonConfig} from './button';\nimport {NoArgs, EventDispatcher, Event} from '../eventdispatcher';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { LocalizableText } from '../localization/i18n';\n\n/**\n * Configuration interface for a toggle button component.\n */\nexport interface ToggleButtonConfig extends ButtonConfig {\n  /**\n   * The CSS class that marks the on-state of the button.\n   */\n  onClass?: string;\n  /**\n   * The CSS class that marks the off-state of the button.\n   */\n  offClass?: string;\n  /**\n   * WCAG20 standard for defining info about the component (usually the name)\n   *\n   * It is recommended to use `onAriaLabel` and `offAriaLabel` for toggle buttons\n   * as the component can then update them as the button is used.\n   *\n   * If both `ariaLabel` and `onAriaLabel` are set, `onAriaLabel` is used.\n   */\n  ariaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the on-state of the button.\n   */\n  onAriaLabel?: LocalizableText;\n  /**\n   * The aria label that marks the off-state of the button.\n   */\n  offAriaLabel?: LocalizableText;\n  /**\n   * The text as string or as localize callback on the button.\n   */\n  text?: LocalizableText;\n}\n\n/**\n * A button that can be toggled between 'on' and 'off' states.\n */\nexport class ToggleButton<Config extends ToggleButtonConfig> extends Button<Config> {\n\n  private onState: boolean;\n\n  private toggleButtonEvents = {\n    onToggle: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOn: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n    onToggleOff: new EventDispatcher<ToggleButton<Config>, NoArgs>(),\n  };\n\n  constructor(config: Config) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-togglebutton',\n      onClass: 'on',\n      offClass: 'off',\n    };\n\n    if (config.onAriaLabel) {\n      config.ariaLabel = config.onAriaLabel;\n    }\n\n    this.config = this.mergeConfig(config, defaultConfig as Config, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n    const config = this.getConfig();\n    this.getDomElement().addClass(this.prefixCss(config.offClass));\n  }\n\n  /**\n   * Toggles the button to the 'on' state.\n   */\n  on() {\n    if (this.isOff()) {\n      const config = this.getConfig();\n\n      this.onState = true;\n      this.getDomElement().removeClass(this.prefixCss(config.offClass));\n      this.getDomElement().addClass(this.prefixCss(config.onClass));\n\n      this.onToggleEvent();\n      this.onToggleOnEvent();\n\n      this.setAriaAttr('pressed', 'true');\n\n      if (this.config.onAriaLabel) {\n        this.setAriaLabel(this.config.onAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggles the button to the 'off' state.\n   */\n  off() {\n    if (this.isOn()) {\n      const config = this.getConfig();\n\n      this.onState = false;\n      this.getDomElement().removeClass(this.prefixCss(config.onClass));\n      this.getDomElement().addClass(this.prefixCss(config.offClass));\n\n      this.onToggleEvent();\n      this.onToggleOffEvent();\n\n      this.setAriaAttr('pressed', 'false');\n\n      if (this.config.offAriaLabel) {\n        this.setAriaLabel(this.config.offAriaLabel);\n      }\n    }\n  }\n\n  /**\n   * Toggle the button 'on' if it is 'off', or 'off' if it is 'on'.\n   */\n  toggle() {\n    if (this.isOn()) {\n      this.off();\n    } else {\n      this.on();\n    }\n  }\n\n  /**\n   * Checks if the toggle button is in the 'on' state.\n   * @returns {boolean} true if button is 'on', false if 'off'\n   */\n  isOn(): boolean {\n    return this.onState;\n  }\n\n  /**\n   * Checks if the toggle button is in the 'off' state.\n   * @returns {boolean} true if button is 'off', false if 'on'\n   */\n  isOff(): boolean {\n    return !this.isOn();\n  }\n\n  protected onClickEvent() {\n    super.onClickEvent();\n\n    // Fire the toggle event together with the click event\n    // (they are technically the same, only the semantics are different)\n    this.onToggleEvent();\n  }\n\n  protected onToggleEvent() {\n    this.toggleButtonEvents.onToggle.dispatch(this);\n  }\n\n  protected onToggleOnEvent() {\n    this.toggleButtonEvents.onToggleOn.dispatch(this);\n  }\n\n  protected onToggleOffEvent() {\n    this.toggleButtonEvents.onToggleOff.dispatch(this);\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggle(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggle.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'on'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOn(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOn.getEvent();\n  }\n\n  /**\n   * Gets the event that is fired when the button is toggled 'off'.\n   * @returns {Event<ToggleButton<Config>, NoArgs>}\n   */\n  get onToggleOff(): Event<ToggleButton<Config>, NoArgs> {\n    return this.toggleButtonEvents.onToggleOff.getEvent();\n  }\n}","import {Component, ComponentConfig} from './component';\nimport {DOM} from '../dom';\n\n/**\n * Animated analog TV static noise.\n */\nexport class TvNoiseCanvas extends Component<ComponentConfig> {\n\n  private canvas: DOM;\n\n  private canvasElement: HTMLCanvasElement;\n  private canvasContext: CanvasRenderingContext2D;\n  private canvasWidth = 160;\n  private canvasHeight = 90;\n  private interferenceHeight = 50;\n  private lastFrameUpdate: number = 0;\n  private frameInterval: number = 60;\n  private useAnimationFrame: boolean = !!window.requestAnimationFrame;\n  private noiseAnimationWindowPos: number;\n  private frameUpdateHandlerId: number;\n\n  constructor(config: ComponentConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-tvnoisecanvas',\n    }, this.config);\n  }\n\n  protected toDomElement(): DOM {\n    return this.canvas = new DOM('canvas', { 'class': this.getCssClasses() });\n  }\n\n  start(): void {\n    this.canvasElement = <HTMLCanvasElement>this.canvas.get(0);\n    this.canvasContext = this.canvasElement.getContext('2d');\n    this.noiseAnimationWindowPos = -this.canvasHeight;\n    this.lastFrameUpdate = 0;\n\n    this.canvasElement.width = this.canvasWidth;\n    this.canvasElement.height = this.canvasHeight;\n\n    this.renderFrame();\n  }\n\n  stop(): void {\n    if (this.useAnimationFrame) {\n      cancelAnimationFrame(this.frameUpdateHandlerId);\n    } else {\n      clearTimeout(this.frameUpdateHandlerId);\n    }\n  }\n\n  private renderFrame(): void {\n    // This code has been copied from the player controls.js and simplified\n\n    if (this.lastFrameUpdate + this.frameInterval > new Date().getTime()) {\n      // It's too early to render the next frame\n      this.scheduleNextRender();\n      return;\n    }\n\n    let currentPixelOffset;\n    let canvasWidth = this.canvasWidth;\n    let canvasHeight = this.canvasHeight;\n\n    // Create texture\n    let noiseImage = this.canvasContext.createImageData(canvasWidth, canvasHeight);\n\n    // Fill texture with noise\n    for (let y = 0; y < canvasHeight; y++) {\n      for (let x = 0; x < canvasWidth; x++) {\n        currentPixelOffset = (canvasWidth * y * 4) + x * 4;\n        noiseImage.data[currentPixelOffset] = Math.random() * 255;\n        if (y < this.noiseAnimationWindowPos || y > this.noiseAnimationWindowPos + this.interferenceHeight) {\n          noiseImage.data[currentPixelOffset] *= 0.85;\n        }\n        noiseImage.data[currentPixelOffset + 1] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 2] = noiseImage.data[currentPixelOffset];\n        noiseImage.data[currentPixelOffset + 3] = 50;\n      }\n    }\n\n    // Put texture onto canvas\n    this.canvasContext.putImageData(noiseImage, 0, 0);\n\n    this.lastFrameUpdate = new Date().getTime();\n    this.noiseAnimationWindowPos += 7;\n    if (this.noiseAnimationWindowPos > canvasHeight) {\n      this.noiseAnimationWindowPos = -canvasHeight;\n    }\n\n    this.scheduleNextRender();\n  }\n\n  private scheduleNextRender(): void {\n    if (this.useAnimationFrame) {\n      this.frameUpdateHandlerId = window.requestAnimationFrame(this.renderFrame.bind(this));\n    } else {\n      this.frameUpdateHandlerId = window.setTimeout(this.renderFrame.bind(this), this.frameInterval);\n    }\n  }\n}","import {ContainerConfig, Container} from './container';\nimport {UIInstanceManager} from '../uimanager';\nimport {DOM} from '../dom';\nimport {Timeout} from '../timeout';\nimport {PlayerUtils} from '../playerutils';\nimport { CancelEventArgs, EventDispatcher } from '../eventdispatcher';\nimport { PlayerAPI, PlayerResizedEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link UIContainer}.\n */\nexport interface UIContainerConfig extends ContainerConfig {\n  /**\n   * The delay in milliseconds after which the control bar will be hidden when there is no user interaction.\n   * Set to -1 for the UI to be always shown.\n   * Default: 5 seconds (5000)\n   */\n  hideDelay?: number;\n  /**\n   * An array of player states in which the UI will not be hidden, no matter what the {@link hideDelay} is.\n   */\n  hidePlayerStateExceptions?: PlayerUtils.PlayerState[];\n  /**\n   * The HTML element on which user interaction events (e.g. mouse and touch events) will be tracked to detect\n   * interaction with the UI. These basically trigger showing and hiding of the UI.\n   * Default: the UI container itself\n   */\n  userInteractionEventSource?: HTMLElement;\n}\n\n/**\n * The base container that contains all of the UI. The UIContainer is passed to the {@link UIManager} to build and\n * setup the UI.\n */\nexport class UIContainer extends Container<UIContainerConfig> {\n\n  private static readonly STATE_PREFIX = 'player-state-';\n\n  private static readonly FULLSCREEN = 'fullscreen';\n  private static readonly BUFFERING = 'buffering';\n  private static readonly REMOTE_CONTROL = 'remote-control';\n  private static readonly CONTROLS_SHOWN = 'controls-shown';\n  private static readonly CONTROLS_HIDDEN = 'controls-hidden';\n\n  private uiHideTimeout: Timeout;\n  private playerStateChange: EventDispatcher<UIContainer, PlayerUtils.PlayerState>;\n\n  private userInteractionEventSource: DOM;\n  private userInteractionEvents: { name: string, handler: EventListenerOrEventListenerObject }[];\n\n  constructor(config: UIContainerConfig) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <UIContainerConfig>{\n      cssClass: 'ui-uicontainer',\n      role: 'region',\n      ariaLabel: i18n.getLocalizer('player'),\n      hideDelay: 5000,\n    }, this.config);\n\n    this.playerStateChange = new EventDispatcher<UIContainer, PlayerUtils.PlayerState>();\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    const config = this.getConfig();\n\n    if (config.userInteractionEventSource) {\n      this.userInteractionEventSource = new DOM(config.userInteractionEventSource);\n    } else {\n      this.userInteractionEventSource = this.getDomElement();\n    }\n\n    super.configure(player, uimanager);\n\n    this.configureUIShowHide(player, uimanager);\n    this.configurePlayerStates(player, uimanager);\n  }\n\n  private configureUIShowHide(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let config = this.getConfig();\n\n    if (config.hideDelay === -1) {\n      uimanager.onConfigured.subscribe(() => uimanager.onControlsShow.dispatch(this));\n      return;\n    }\n\n    let isUiShown = false;\n    let isSeeking = false;\n    let isFirstTouch = true;\n    let playerState: PlayerUtils.PlayerState;\n\n    const hidingPrevented = (): boolean => {\n      return config.hidePlayerStateExceptions && config.hidePlayerStateExceptions.indexOf(playerState) > -1;\n    };\n\n    let showUi = () => {\n      if (!isUiShown) {\n        // Let subscribers know that they should reveal themselves\n        uimanager.onControlsShow.dispatch(this);\n        isUiShown = true;\n      }\n      // Don't trigger timeout while seeking (it will be triggered once the seek is finished) or casting\n      if (!isSeeking && !player.isCasting() && !hidingPrevented()) {\n        this.uiHideTimeout.start();\n      }\n    };\n\n    let hideUi = () => {\n      // Hide the UI only if it is shown, and if not casting\n      if (isUiShown && !player.isCasting()) {\n        // Issue a preview event to check if we are good to hide the controls\n        let previewHideEventArgs = <CancelEventArgs>{};\n        uimanager.onPreviewControlsHide.dispatch(this, previewHideEventArgs);\n\n        if (!previewHideEventArgs.cancel) {\n          // If the preview wasn't canceled, let subscribers know that they should now hide themselves\n          uimanager.onControlsHide.dispatch(this);\n          isUiShown = false;\n        } else {\n          // If the hide preview was canceled, continue to show UI\n          showUi();\n        }\n      }\n    };\n\n    // Timeout to defer UI hiding by the configured delay time\n    this.uiHideTimeout = new Timeout(config.hideDelay, hideUi);\n\n    this.userInteractionEvents = [{\n      // On touch displays, the first touch reveals the UI\n      name: 'touchend',\n      handler: (e) => {\n        if (!isUiShown) {\n          // Only if the UI is hidden, we prevent other actions (except for the first touch) and reveal the UI\n          // instead. The first touch is not prevented to let other listeners receive the event and trigger an\n          // initial action, e.g. the huge playback button can directly start playback instead of requiring a double\n          // tap which 1. reveals the UI and 2. starts playback.\n          if (isFirstTouch && !player.isPlaying()) {\n            isFirstTouch = false;\n          } else {\n            e.preventDefault();\n          }\n          showUi();\n        }\n      },\n    }, {\n      // When the mouse enters, we show the UI\n      name: 'mouseenter',\n      handler: () => {\n        showUi();\n      },\n    }, {\n      // When the mouse moves within, we show the UI\n      name: 'mousemove',\n      handler: () => {\n        showUi();\n      },\n    }, {\n      name: 'focusin',\n      handler: () => {\n        showUi();\n      },\n    }, {\n      name: 'keydown',\n      handler: () => {\n        showUi();\n      },\n    }, {\n      // When the mouse leaves, we can prepare to hide the UI, except a seek is going on\n      name: 'mouseleave',\n      handler: () => {\n        // When a seek is going on, the seek scrub pointer may exit the UI area while still seeking, and we do not\n        // hide the UI in such cases\n        if (!isSeeking && !hidingPrevented()) {\n          this.uiHideTimeout.start();\n        }\n      },\n    }];\n\n    this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.on(event.name, event.handler));\n\n    uimanager.onSeek.subscribe(() => {\n      this.uiHideTimeout.clear(); // Don't hide UI while a seek is in progress\n      isSeeking = true;\n    });\n    uimanager.onSeeked.subscribe(() => {\n      isSeeking = false;\n      if (!hidingPrevented()) {\n        this.uiHideTimeout.start(); // Re-enable UI hide timeout after a seek\n      }\n    });\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      showUi(); // Show UI when a Cast session has started (UI will then stay permanently on during the session)\n    });\n    this.playerStateChange.subscribe((_, state) => {\n      playerState = state;\n      if (hidingPrevented()) {\n        // Entering a player state that prevents hiding and forces the controls to be shown\n        this.uiHideTimeout.clear();\n        showUi();\n      } else {\n        // Entering a player state that allows hiding\n        this.uiHideTimeout.start();\n      }\n    });\n  }\n\n  private configurePlayerStates(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    let container = this.getDomElement();\n\n    // Convert player states into CSS class names\n    let stateClassNames = <any>[];\n    for (let state in PlayerUtils.PlayerState) {\n      if (isNaN(Number(state))) {\n        let enumName = PlayerUtils.PlayerState[<any>PlayerUtils.PlayerState[state]];\n        stateClassNames[PlayerUtils.PlayerState[state]] =\n          this.prefixCss(UIContainer.STATE_PREFIX + enumName.toLowerCase());\n      }\n    }\n\n    let removeStates = () => {\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Idle]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Prepared]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Playing]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Paused]);\n      container.removeClass(stateClassNames[PlayerUtils.PlayerState.Finished]);\n    };\n\n    const updateState = (state: PlayerUtils.PlayerState) => {\n      removeStates();\n      container.addClass(stateClassNames[state]);\n      this.playerStateChange.dispatch(this, state);\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, () => {\n      updateState(PlayerUtils.PlayerState.Prepared);\n    });\n    player.on(player.exports.PlayerEvent.Play, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Playing, () => {\n      updateState(PlayerUtils.PlayerState.Playing);\n    });\n    player.on(player.exports.PlayerEvent.Paused, () => {\n      updateState(PlayerUtils.PlayerState.Paused);\n    });\n    player.on(player.exports.PlayerEvent.PlaybackFinished, () => {\n      updateState(PlayerUtils.PlayerState.Finished);\n    });\n    player.on(player.exports.PlayerEvent.SourceUnloaded, () => {\n      updateState(PlayerUtils.PlayerState.Idle);\n    });\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      updateState(PlayerUtils.getState(player));\n    });\n\n    // Fullscreen marker class\n    player.on(player.exports.PlayerEvent.ViewModeChanged, () => {\n      if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n        container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n      } else {\n        container.removeClass(this.prefixCss(UIContainer.FULLSCREEN));\n      }\n    });\n    // Init fullscreen state\n    if (player.getViewMode() === player.exports.ViewMode.Fullscreen) {\n      container.addClass(this.prefixCss(UIContainer.FULLSCREEN));\n    }\n\n    // Buffering marker class\n    player.on(player.exports.PlayerEvent.StallStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    player.on(player.exports.PlayerEvent.StallEnded, () => {\n      container.removeClass(this.prefixCss(UIContainer.BUFFERING));\n    });\n    // Init buffering state\n    if (player.isStalled()) {\n      container.addClass(this.prefixCss(UIContainer.BUFFERING));\n    }\n\n    // RemoteControl marker class\n    player.on(player.exports.PlayerEvent.CastStarted, () => {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    player.on(player.exports.PlayerEvent.CastStopped, () => {\n      container.removeClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    });\n    // Init RemoteControl state\n    if (player.isCasting()) {\n      container.addClass(this.prefixCss(UIContainer.REMOTE_CONTROL));\n    }\n\n    // Controls visibility marker class\n    uimanager.onControlsShow.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n    });\n    uimanager.onControlsHide.subscribe(() => {\n      container.removeClass(this.prefixCss(UIContainer.CONTROLS_SHOWN));\n      container.addClass(this.prefixCss(UIContainer.CONTROLS_HIDDEN));\n    });\n\n    // Layout size classes\n    let updateLayoutSizeClasses = (width: number, height: number) => {\n      container.removeClass(this.prefixCss('layout-max-width-400'));\n      container.removeClass(this.prefixCss('layout-max-width-600'));\n      container.removeClass(this.prefixCss('layout-max-width-800'));\n      container.removeClass(this.prefixCss('layout-max-width-1200'));\n\n      if (width <= 400) {\n        container.addClass(this.prefixCss('layout-max-width-400'));\n      } else if (width <= 600) {\n        container.addClass(this.prefixCss('layout-max-width-600'));\n      } else if (width <= 800) {\n        container.addClass(this.prefixCss('layout-max-width-800'));\n      } else if (width <= 1200) {\n        container.addClass(this.prefixCss('layout-max-width-1200'));\n      }\n    };\n    player.on(player.exports.PlayerEvent.PlayerResized, (e: PlayerResizedEvent) => {\n      // Convert strings (with \"px\" suffix) to ints\n      let width = Math.round(Number(e.width.substring(0, e.width.length - 2)));\n      let height = Math.round(Number(e.height.substring(0, e.height.length - 2)));\n\n      updateLayoutSizeClasses(width, height);\n    });\n    // Init layout state\n    updateLayoutSizeClasses(new DOM(player.getContainer()).width(), new DOM(player.getContainer()).height());\n  }\n\n  release(): void {\n    // Explicitly unsubscribe user interaction event handlers because they could be attached to an external element\n    // that isn't owned by the UI and therefore not removed on release.\n    if (this.userInteractionEvents) {\n      this.userInteractionEvents.forEach((event) => this.userInteractionEventSource.off(event.name, event.handler));\n    }\n\n    super.release();\n\n    if (this.uiHideTimeout) {\n      this.uiHideTimeout.clear();\n    }\n  }\n\n  protected toDomElement(): DOM {\n    let container = super.toDomElement();\n\n    // Detect flexbox support (not supported in IE9)\n    if (document && typeof document.createElement('p').style.flex !== 'undefined') {\n      container.addClass(this.prefixCss('flexbox'));\n    } else {\n      container.addClass(this.prefixCss('no-flexbox'));\n    }\n\n    return container;\n  }\n}\n","import { SelectBox } from './selectbox';\nimport { ListSelectorConfig } from './listselector';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A select box providing a selection between 'auto' and the available video qualities.\n */\nexport class VideoQualitySelectBox extends SelectBox {\n\n  private hasAuto: boolean;\n\n  constructor(config: ListSelectorConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClasses: ['ui-videoqualityselectbox'],\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const labeling = function (resolution: any) {\n      return resolution.height + 'p';\n    };\n\n    let selectCurrentVideoQuality = () => {\n      this.selectItem(player.getVideoQuality().id);\n    };\n\n    let updateVideoQualities = () => {\n      let videoQualities = player.getAvailableVideoQualities();\n\n      this.clearItems();\n\n      // Progressive streams do not support automatic quality selection\n      this.hasAuto = player.getStreamType() !== 'progressive';\n\n      if (this.hasAuto) {\n        // Add entry for automatic quality switching (default setting)\n        this.addItem('auto', i18n.getLocalizer('auto'));\n      }\n\n      // Add video qualities\n      for (let videoQuality of videoQualities) {\n        this.addItem(videoQuality.id, labeling(videoQuality));\n      }\n\n      // Select initial quality\n      selectCurrentVideoQuality();\n    };\n\n    this.onItemSelected.subscribe((sender: VideoQualitySelectBox, value: string) => {\n      player.setVideoQuality(value);\n    });\n\n    // Update qualities when source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, updateVideoQualities);\n    // Update qualities when the period within a source changes\n    player.on(player.exports.PlayerEvent.PeriodSwitched, updateVideoQualities);\n    // Update quality selection when quality is changed (from outside)\n    player.on(player.exports.PlayerEvent.VideoQualityChanged, selectCurrentVideoQuality);\n\n    if ((player.exports.PlayerEvent as any).VideoQualityAdded) {\n      // Update qualities when their availability changed\n      // TODO: remove any cast after next player release\n      player.on((player.exports.PlayerEvent as any).VideoQualityAdded, updateVideoQualities);\n      player.on((player.exports.PlayerEvent as any).VideoQualityRemoved, updateVideoQualities);\n    }\n\n    uimanager.getConfig().events.onUpdated.subscribe(updateVideoQualities);\n  }\n\n  /**\n   * Returns true if the select box contains an 'auto' item for automatic quality selection mode.\n   * @return {boolean}\n   */\n  hasAutoItem(): boolean {\n    return this.hasAuto;\n  }\n}","import {Container, ContainerConfig} from './container';\nimport {VolumeSlider} from './volumeslider';\nimport {VolumeToggleButton} from './volumetogglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport {Timeout} from '../timeout';\nimport { PlayerAPI } from 'bitmovin-player';\n\n/**\n * Configuration interface for a {@link VolumeControlButton}.\n */\nexport interface VolumeControlButtonConfig extends ContainerConfig {\n  /**\n   * The delay after which the volume slider will be hidden when there is no user interaction.\n   * Care must be taken that the delay is long enough so users can reach the slider from the toggle button, e.g. by\n   * mouse movement. If the delay is too short, the sliders disappears before the mouse pointer has reached it and\n   * the user is not able to use it.\n   * Default: 500ms\n   */\n  hideDelay?: number;\n  /**\n   * Specifies if the volume slider should be vertically or horizontally aligned.\n   * Default: true\n   */\n  vertical?: boolean;\n}\n\n/**\n * A composite volume control that consists of and internally manages a volume control button that can be used\n * for muting, and a (depending on the CSS style, e.g. slide-out) volume control bar.\n */\nexport class VolumeControlButton extends Container<VolumeControlButtonConfig> {\n\n  private volumeToggleButton: VolumeToggleButton;\n  private volumeSlider: VolumeSlider;\n\n  private volumeSliderHideTimeout: Timeout;\n\n  constructor(config: VolumeControlButtonConfig = {}) {\n    super(config);\n\n    this.volumeToggleButton = new VolumeToggleButton();\n    this.volumeSlider = new VolumeSlider({\n      vertical: config.vertical != null ? config.vertical : true,\n      hidden: true,\n    });\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-volumecontrolbutton',\n      components: [this.volumeToggleButton, this.volumeSlider],\n      hideDelay: 500,\n    }, <VolumeControlButtonConfig>this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let volumeToggleButton = this.getVolumeToggleButton();\n    let volumeSlider = this.getVolumeSlider();\n\n    this.volumeSliderHideTimeout = new Timeout(this.getConfig().hideDelay, () => {\n      volumeSlider.hide();\n    });\n\n    /*\n     * Volume Slider visibility handling\n     *\n     * The volume slider shall be visible while the user hovers the mute toggle button, while the user hovers the\n     * volume slider, and while the user slides the volume slider. If none of these situations are true, the slider\n     * shall disappear.\n     */\n    let volumeSliderHovered = false;\n    volumeToggleButton.getDomElement().on('mouseenter', () => {\n      // Show volume slider when mouse enters the button area\n      if (volumeSlider.isHidden()) {\n        volumeSlider.show();\n      }\n      // Avoid hiding of the slider when button is hovered\n      this.volumeSliderHideTimeout.clear();\n    });\n    volumeToggleButton.getDomElement().on('mouseleave', () => {\n      // Hide slider delayed when button is left\n      this.volumeSliderHideTimeout.reset();\n    });\n    volumeSlider.getDomElement().on('mouseenter', () => {\n      // When the slider is entered, cancel the hide timeout activated by leaving the button\n      this.volumeSliderHideTimeout.clear();\n      volumeSliderHovered = true;\n    });\n    volumeSlider.getDomElement().on('mouseleave', () => {\n      // When mouse leaves the slider, only hide it if there is no slide operation in progress\n      if (volumeSlider.isSeeking()) {\n        this.volumeSliderHideTimeout.clear();\n      } else {\n        this.volumeSliderHideTimeout.reset();\n      }\n      volumeSliderHovered = false;\n    });\n    volumeSlider.onSeeked.subscribe(() => {\n      // When a slide operation is done and the slider not hovered (mouse outside slider), hide slider delayed\n      if (!volumeSliderHovered) {\n        this.volumeSliderHideTimeout.reset();\n      }\n    });\n  }\n\n  release(): void {\n    super.release();\n    this.volumeSliderHideTimeout.clear();\n  }\n\n  /**\n   * Provides access to the internally managed volume toggle button.\n   * @returns {VolumeToggleButton}\n   */\n  getVolumeToggleButton(): VolumeToggleButton {\n    return this.volumeToggleButton;\n  }\n\n  /**\n   * Provides access to the internally managed volume silder.\n   * @returns {VolumeSlider}\n   */\n  getVolumeSlider(): VolumeSlider {\n    return this.volumeSlider;\n  }\n}","import { SeekBar, SeekBarConfig, SeekPreviewEventArgs } from './seekbar';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { VolumeTransition } from '../volumecontroller';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for the {@link VolumeSlider} component.\n */\nexport interface VolumeSliderConfig extends SeekBarConfig {\n  /**\n   * Specifies if the volume slider should be automatically hidden when volume control is prohibited by the\n   * browser or platform. This currently only applies to iOS.\n   * Default: true\n   */\n  hideIfVolumeControlProhibited?: boolean;\n}\n\n/**\n * A simple volume slider component to adjust the player's volume setting.\n */\nexport class VolumeSlider extends SeekBar {\n  private volumeTransition: VolumeTransition;\n\n  constructor(config: VolumeSliderConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, <VolumeSliderConfig>{\n      cssClass: 'ui-volumeslider',\n      hideIfVolumeControlProhibited: true,\n      ariaLabel: i18n.getLocalizer('settings.audio.volume'),\n      tabIndex: 0,\n    }, this.config);\n  }\n\n  private setVolumeAriaSliderValues(value: number) {\n    this.getDomElement().attr('aria-valuenow', Math.ceil(value).toString());\n    this.getDomElement().attr('aria-valuetext', `${i18n.performLocalization(i18n.getLocalizer('seekBar.value'))}: ${Math.ceil(value)}`);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager, false);\n\n    this.setAriaSliderMinMax('0', '100');\n\n    let config = <VolumeSliderConfig>this.getConfig();\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    if (config.hideIfVolumeControlProhibited && !this.detectVolumeControlAvailability()) {\n      this.hide();\n\n      // We can just return from here, because the user will never interact with the control and any configured\n      // functionality would only eat resources for no reason.\n      return;\n    }\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.setVolumeAriaSliderValues(0);\n        this.setPlaybackPosition(0);\n      } else {\n        this.setPlaybackPosition(args.volume);\n        this.setVolumeAriaSliderValues(args.volume);\n      }\n    });\n\n    this.onSeek.subscribe(() => {\n      this.volumeTransition = volumeController.startTransition();\n    });\n\n    this.onSeekPreview.subscribeRateLimited(this.updateVolumeWhileScrubbing, 50);\n    this.onSeeked.subscribe((sender, percentage) => {\n      if (this.volumeTransition) {\n        this.volumeTransition.finish(percentage);\n      }\n    });\n\n    // Update the volume slider marker when the player resized, a source is loaded,\n    // or the UI is configured. Check the seekbar for a detailed description.\n    player.on(player.exports.PlayerEvent.PlayerResized, () => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onConfigured.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.getConfig().events.onUpdated.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    uimanager.onComponentShow.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n    uimanager.onComponentHide.subscribe(() => {\n      this.refreshPlaybackPosition();\n    });\n\n    // Init volume bar\n    volumeController.onChangedEvent();\n  }\n\n  private updateVolumeWhileScrubbing = (sender: VolumeSlider, args: SeekPreviewEventArgs) => {\n    if (args.scrubbing && this.volumeTransition) {\n      this.volumeTransition.update(args.position);\n    }\n  };\n\n  private detectVolumeControlAvailability(): boolean {\n    /*\n     * \"On iOS devices, the audio level is always under the user’s physical control. The volume property is not\n     * settable in JavaScript. Reading the volume property always returns 1.\"\n     * https://developer.apple.com/library/content/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html\n     */\n    // as muted autoplay gets paused as soon as we unmute it, we may not touch the volume of the actual player so we\n    // probe a dummy audio element\n    const dummyVideoElement = document.createElement('video');\n    // try setting the volume to 0.7 and if it's still 1 we are on a volume control restricted device\n    dummyVideoElement.volume = 0.7;\n    return dummyVideoElement.volume !== 1;\n  }\n\n  release(): void {\n    super.release();\n\n    this.onSeekPreview.unsubscribe(this.updateVolumeWhileScrubbing);\n  }\n}\n","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport { UIInstanceManager } from '../uimanager';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles audio muting.\n */\nexport class VolumeToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    const defaultConfig: ToggleButtonConfig = {\n      cssClass: 'ui-volumetogglebutton',\n      text: i18n.getLocalizer('settings.audio.mute'),\n      onClass: 'muted',\n      offClass: 'unmuted',\n      ariaLabel: i18n.getLocalizer('settings.audio.mute'),\n    };\n\n    this.config = this.mergeConfig(config, defaultConfig, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    const volumeController = uimanager.getConfig().volumeController;\n\n    volumeController.onChanged.subscribe((_, args) => {\n      if (args.muted) {\n        this.on();\n      } else {\n        this.off();\n      }\n\n      const volumeLevelTens = Math.ceil(args.volume / 10);\n      this.getDomElement().data(this.prefixCss('volume-level-tens'), String(volumeLevelTens));\n    });\n\n    this.onClick.subscribe(() => {\n      volumeController.toggleMuted();\n    });\n\n    // Startup init\n    volumeController.onChangedEvent();\n  }\n}","import {ToggleButton, ToggleButtonConfig} from './togglebutton';\nimport {UIInstanceManager} from '../uimanager';\nimport { PlayerAPI, PlayerEventBase, WarningEvent } from 'bitmovin-player';\nimport { i18n } from '../localization/i18n';\n\n/**\n * A button that toggles the video view between normal/mono and VR/stereo.\n */\nexport class VRToggleButton extends ToggleButton<ToggleButtonConfig> {\n\n  constructor(config: ToggleButtonConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-vrtogglebutton',\n      text: i18n.getLocalizer('vr'),\n    }, this.config);\n  }\n\n  configure(player: PlayerAPI, uimanager: UIInstanceManager): void {\n    super.configure(player, uimanager);\n\n    let isVRConfigured = () => {\n      // VR availability cannot be checked through getVRStatus() because it is asynchronously populated and not\n      // available at UI initialization. As an alternative, we check the VR settings in the config.\n      // TODO use getVRStatus() through isVRStereoAvailable() once the player has been rewritten and the status is\n      // available in Ready\n      const source = player.getSource();\n      return source && Boolean(source.vr);\n    };\n\n    let isVRStereoAvailable = () => {\n      const source = player.getSource();\n      return player.vr && Boolean(source.vr);\n    };\n\n    let vrStateHandler = (ev: PlayerEventBase) => {\n      if (ev.type === player.exports.PlayerEvent.Warning\n        && (ev as WarningEvent).code !== player.exports.WarningCode.VR_RENDERING_ERROR) {\n        return;\n      }\n\n      if (isVRConfigured() && isVRStereoAvailable()) {\n        this.show(); // show button in case it is hidden\n\n        if (player.vr && player.vr.getStereo()) {\n          this.on();\n        } else {\n          this.off();\n        }\n      } else {\n        this.hide(); // hide button if no stereo mode available\n      }\n    };\n\n    let vrButtonVisibilityHandler = () => {\n      if (isVRConfigured()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    };\n\n    player.on(player.exports.PlayerEvent.VRStereoChanged, vrStateHandler);\n    player.on(player.exports.PlayerEvent.Warning, vrStateHandler);\n    // Hide button when VR source goes away\n    player.on(player.exports.PlayerEvent.SourceUnloaded, vrButtonVisibilityHandler);\n    uimanager.getConfig().events.onUpdated.subscribe(vrButtonVisibilityHandler);\n\n    this.onClick.subscribe(() => {\n      if (!isVRStereoAvailable()) {\n        if (console) {\n          console.log('No VR content');\n        }\n      } else {\n        if (player.vr && player.vr.getStereo()) {\n          player.vr.setStereo(false);\n        } else {\n          player.vr.setStereo(true);\n        }\n      }\n    });\n\n    // Set startup visibility\n    vrButtonVisibilityHandler();\n  }\n}","import {ClickOverlay, ClickOverlayConfig} from './clickoverlay';\nimport { i18n } from '../localization/i18n';\n\n/**\n * Configuration interface for a {@link ClickOverlay}.\n */\nexport interface WatermarkConfig extends ClickOverlayConfig {\n  // nothing yet\n}\n\n/**\n * A watermark overlay with a clickable logo.\n */\nexport class Watermark extends ClickOverlay {\n\n  constructor(config: WatermarkConfig = {}) {\n    super(config);\n\n    this.config = this.mergeConfig(config, {\n      cssClass: 'ui-watermark',\n      url: 'http://bitmovin.com',\n      role: 'link',\n      text: 'logo',\n      ariaLabel: i18n.getLocalizer('watermarkLink'),\n    }, <WatermarkConfig>this.config);\n  }\n}","import {VRToggleButton} from './components/vrtogglebutton';\nimport {SettingsToggleButton} from './components/settingstogglebutton';\nimport {VolumeSlider} from './components/volumeslider';\nimport {PlaybackTimeLabel, PlaybackTimeLabelMode} from './components/playbacktimelabel';\nimport {AirPlayToggleButton} from './components/airplaytogglebutton';\nimport {ErrorMessageOverlay} from './components/errormessageoverlay';\nimport {ControlBar} from './components/controlbar';\nimport {CastToggleButton} from './components/casttogglebutton';\nimport {FullscreenToggleButton} from './components/fullscreentogglebutton';\nimport {RecommendationOverlay} from './components/recommendationoverlay';\nimport {PlaybackSpeedSelectBox} from './components/playbackspeedselectbox';\nimport {AudioQualitySelectBox} from './components/audioqualityselectbox';\nimport {CastStatusOverlay} from './components/caststatusoverlay';\nimport {UIContainer} from './components/uicontainer';\nimport {Watermark} from './components/watermark';\nimport {SubtitleOverlay} from './components/subtitleoverlay';\nimport {SettingsPanel} from './components/settingspanel';\nimport {SeekBarLabel} from './components/seekbarlabel';\nimport {PlaybackToggleOverlay} from './components/playbacktoggleoverlay';\nimport {PictureInPictureToggleButton} from './components/pictureinpicturetogglebutton';\nimport {Spacer} from './components/spacer';\nimport {Container} from './components/container';\nimport {VolumeToggleButton} from './components/volumetogglebutton';\nimport {PlaybackToggleButton} from './components/playbacktogglebutton';\nimport {SeekBar} from './components/seekbar';\nimport {VideoQualitySelectBox} from './components/videoqualityselectbox';\nimport {UIConditionContext, UIManager} from './uimanager';\nimport {TitleBar} from './components/titlebar';\nimport {BufferingOverlay} from './components/bufferingoverlay';\nimport {SubtitleListBox} from './components/subtitlelistbox';\nimport {AudioTrackListBox} from './components/audiotracklistbox';\nimport {SettingsPanelItem} from './components/settingspanelitem';\nimport {SettingsPanelPage} from './components/settingspanelpage';\nimport { UIFactory } from './uifactory';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport namespace DemoFactory {\n\n  export function buildDemoWithSeparateAudioSubtitlesButtons(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: UIFactory.modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth\n          && context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: UIFactory.modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUIWithSeparateAudioSubtitlesButtons(),\n    }], config);\n  }\n\n  function modernUIWithSeparateAudioSubtitlesButtons() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem('Video Quality', new VideoQualitySelectBox()),\n            new SettingsPanelItem('Speed', new PlaybackSpeedSelectBox()),\n            new SettingsPanelItem('Audio Quality', new AudioQualitySelectBox()),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let subtitleListBox = new SubtitleListBox();\n    let subtitleSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, subtitleListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let audioTrackListBox = new AudioTrackListBox();\n    let audioTrackSettingsPanel = new SettingsPanel({\n      components: [\n        new SettingsPanelPage({\n          components: [\n            new SettingsPanelItem(null, audioTrackListBox),\n          ],\n        }),\n      ],\n      hidden: true,\n    });\n\n    let controlBar = new ControlBar({\n      components: [\n        audioTrackSettingsPanel,\n        subtitleSettingsPanel,\n        settingsPanel,\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n        new Container({\n          components: [\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new SettingsToggleButton({\n              settingsPanel: audioTrackSettingsPanel,\n              cssClass: 'ui-audiotracksettingstogglebutton',\n            }),\n            new SettingsToggleButton({\n              settingsPanel: subtitleSettingsPanel,\n              cssClass: 'ui-subtitlesettingstogglebutton',\n            }),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new CastStatusOverlay(),\n        controlBar,\n        new TitleBar(),\n        new RecommendationOverlay(),\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n    });\n  }\n}","export interface Offset {\n  left: number;\n  top: number;\n}\n\nexport interface Size {\n  width: number;\n  height: number;\n}\n\nexport interface CssProperties {\n  [propertyName: string]: string;\n}\n\n/**\n * Simple DOM manipulation and DOM element event handling modeled after jQuery (as replacement for jQuery).\n *\n * Like jQuery, DOM operates on single elements and lists of elements. For example: creating an element returns a DOM\n * instance with a single element, selecting elements returns a DOM instance with zero, one, or many elements. Similar\n * to jQuery, setters usually affect all elements, while getters operate on only the first element.\n * Also similar to jQuery, most methods (except getters) return the DOM instance facilitating easy chaining of method\n * calls.\n *\n * Built with the help of: http://youmightnotneedjquery.com/\n */\nexport class DOM {\n\n  private document: Document;\n\n  /**\n   * The list of elements that the instance wraps. Take care that not all methods can operate on the whole list,\n   * getters usually just work on the first element.\n   */\n  private elements: HTMLElement[];\n\n  /**\n   * Creates a DOM element.\n   * @param tagName the tag name of the DOM element\n   * @param attributes a list of attributes of the element\n   */\n  constructor(tagName: string, attributes: {[name: string]: string});\n  /**\n   * Selects all elements from the DOM that match the specified selector.\n   * @param selector the selector to match DOM elements with\n   */\n  constructor(selector: string);\n  /**\n   * Wraps a plain HTMLElement with a DOM instance.\n   * @param element the HTMLElement to wrap with DOM\n   */\n  constructor(element: HTMLElement);\n  /**\n   * Wraps a list of plain HTMLElements with a DOM instance.\n   * @param elements the HTMLElements to wrap with DOM\n   */\n  constructor(elements: HTMLElement[]);\n  /**\n   * Wraps the document with a DOM instance. Useful to attach event listeners to the document.\n   * @param document the document to wrap\n   */\n  constructor(document: Document);\n  constructor(something: string | HTMLElement | HTMLElement[] | Document, attributes?: {[name: string]: string}) {\n    this.document = document; // Set the global document to the local document field\n\n    if (something instanceof Array) {\n      if (something.length > 0 && something[0] instanceof HTMLElement) {\n        let elements = something;\n        this.elements = elements;\n      }\n    }\n    else if (something instanceof HTMLElement) {\n      let element = something;\n      this.elements = [element];\n    }\n    else if (something instanceof Document) {\n      // When a document is passed in, we do not do anything with it, but by setting this.elements to null\n      // we give the event handling method a means to detect if the events should be registered on the document\n      // instead of elements.\n      this.elements = null;\n    }\n    else if (attributes) {\n      let tagName = something;\n      let element = document.createElement(tagName);\n\n      for (let attributeName in attributes) {\n        let attributeValue = attributes[attributeName];\n        if (attributeValue != null) {\n          element.setAttribute(attributeName, attributeValue);\n        }\n      }\n\n      this.elements = [element];\n    }\n    else {\n      let selector = something;\n      this.elements = this.findChildElements(selector);\n    }\n  }\n\n  /**\n   * Gets the number of elements that this DOM instance currently holds.\n   * @returns {number} the number of elements\n   */\n  get length(): number {\n    return this.elements ? this.elements.length : 0;\n  }\n\n  /**\n   * Gets the HTML elements that this DOM instance currently holds.\n   * @returns {HTMLElement[]} the raw HTML elements\n   */\n  get(): HTMLElement[];\n  /**\n   * Gets an HTML element from the list elements that this DOM instance currently holds.\n   * @param index The zero-based index into the element list. Can be negative to return an element from the end,\n   *    e.g. -1 returns the last element.\n   */\n  get(index: number): HTMLElement;\n  get(index?: number): HTMLElement | HTMLElement[] {\n    if (index === undefined) {\n      return this.elements;\n    } else if (!this.elements || index >= this.elements.length || index < -this.elements.length) {\n      return undefined;\n    } else if (index < 0) {\n      return this.elements[this.elements.length - index];\n    } else {\n      return this.elements[index];\n    }\n  }\n\n  /**\n   * A shortcut method for iterating all elements. Shorts this.elements.forEach(...) to this.forEach(...).\n   * @param handler the handler to execute an operation on an element\n   */\n  private forEach(handler: (element: HTMLElement) => void): void {\n    if (!this.elements) {\n      return;\n    }\n    this.elements.forEach((element) => {\n      handler(element);\n    });\n  }\n\n  private findChildElementsOfElement(element: HTMLElement | Document, selector: string): HTMLElement[] {\n    let childElements = element.querySelectorAll(selector);\n\n    // Convert NodeList to Array\n    // https://toddmotto.com/a-comprehensive-dive-into-nodelists-arrays-converting-nodelists-and-understanding-the-dom/\n    return [].slice.call(childElements);\n  }\n\n  private findChildElements(selector: string): HTMLElement[] {\n    let allChildElements = <HTMLElement[]>[];\n\n    if (this.elements) {\n      this.forEach((element) => {\n        allChildElements = allChildElements.concat(this.findChildElementsOfElement(element, selector));\n      });\n    }\n    else {\n      return this.findChildElementsOfElement(document, selector);\n    }\n\n    return allChildElements;\n  }\n\n  /**\n   * Finds all child elements of all elements matching the supplied selector.\n   * @param selector the selector to match with child elements\n   * @returns {DOM} a new DOM instance representing all matched children\n   */\n  find(selector: string): DOM {\n    let allChildElements = this.findChildElements(selector);\n    return new DOM(allChildElements);\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  focusToFirstInput() {\n    const inputElements = this.findChildElements('button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n\n    if (inputElements.length > 0) {\n      inputElements[0].focus();\n    }\n  }\n\n  /**\n   * Focuses to the first input element\n   */\n  scrollTo(x: number, y: number) {\n    this.elements[0].scrollTo(x, y);\n  }\n\n  /**\n   * Returns a string of the inner HTML content of the first element.\n   */\n  html(): string;\n  /**\n   * Sets the inner HTML content of all elements.\n   * @param content a string of plain text or HTML markup\n   */\n  html(content: string): DOM;\n  html(content?: string): string | DOM {\n    if (arguments.length > 0) {\n      return this.setHtml(content);\n    }\n    else {\n      return this.getHtml();\n    }\n  }\n\n  private getHtml(): string | null {\n    return this.elements[0].innerHTML;\n  }\n\n  private setHtml(content: string): DOM {\n    if (content === undefined || content == null) {\n      // Set to empty string to avoid innerHTML getting set to 'undefined' (all browsers) or 'null' (IE9)\n      content = '';\n    }\n\n    this.forEach((element) => {\n      element.innerHTML = content;\n    });\n\n    return this;\n  }\n\n  /**\n   * Clears the inner HTML of all elements (deletes all children).\n   * @returns {DOM}\n   */\n  empty(): DOM {\n    this.forEach((element) => {\n      element.innerHTML = '';\n    });\n    return this;\n  }\n\n  /**\n   * Returns the current value of the first form element, e.g. the selected value of a select box or the text if an\n   * input field.\n   * @returns {string} the value of a form element\n   */\n  val(): string {\n    let element = this.elements[0];\n\n    if (element instanceof HTMLSelectElement || element instanceof HTMLInputElement) {\n      return element.value;\n    }\n    else {\n      // TODO add support for missing form elements\n      throw new Error(`val() not supported for ${typeof element}`);\n    }\n  }\n\n  /**\n   * Returns the value of an attribute on the first element.\n   * @param attribute\n   */\n  attr(attribute: string): string | null;\n  /**\n   * Sets an attribute on all elements.\n   * @param attribute the name of the attribute\n   * @param value the value of the attribute\n   */\n  attr(attribute: string, value: string): DOM;\n  attr(attribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setAttr(attribute, value);\n    }\n    else {\n      return this.getAttr(attribute);\n    }\n  }\n\n  /**\n   * Removes the attribute of the element.\n   * @param attribute\n   */\n  removeAttr(attribute: string) {\n    this.forEach((element) => {\n      element.removeAttribute(attribute);\n    });\n  }\n\n  private getAttr(attribute: string): string | null {\n    return this.elements[0].getAttribute(attribute);\n  }\n\n  private setAttr(attribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute(attribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Returns the value of a data element on the first element.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   */\n  data(dataAttribute: string): string | null;\n  /**\n   * Sets a data attribute on all elements.\n   * @param dataAttribute the name of the data attribute without the 'data-' prefix\n   * @param value the value of the data attribute\n   */\n  data(dataAttribute: string, value: string): DOM;\n  data(dataAttribute: string, value?: string): string | null | DOM {\n    if (arguments.length > 1) {\n      return this.setData(dataAttribute, value);\n    }\n    else {\n      return this.getData(dataAttribute);\n    }\n  }\n\n  private getData(dataAttribute: string): string | null {\n    return this.elements[0].getAttribute('data-' + dataAttribute);\n  }\n\n  private setData(dataAttribute: string, value: string): DOM {\n    this.forEach((element) => {\n      element.setAttribute('data-' + dataAttribute, value);\n    });\n    return this;\n  }\n\n  /**\n   * Appends one or more DOM elements as children to all elements.\n   * @param childElements the chrild elements to append\n   * @returns {DOM}\n   */\n  append(...childElements: DOM[]): DOM {\n    this.forEach((element) => {\n      childElements.forEach((childElement) => {\n        childElement.elements.forEach((_, index) => {\n          element.appendChild(childElement.elements[index]);\n        });\n      });\n    });\n    return this;\n  }\n\n  /**\n   * Removes all elements from the DOM.\n   */\n  remove(): void {\n    this.forEach((element) => {\n      let parent = element.parentNode;\n      if (parent) {\n        parent.removeChild(element);\n      }\n    });\n  }\n\n  /**\n   * Returns the offset of the first element from the document's top left corner.\n   * @returns {Offset}\n   */\n  offset(): Offset {\n    let element = this.elements[0];\n    let elementRect = element.getBoundingClientRect();\n    let htmlRect = document.body.parentElement.getBoundingClientRect();\n\n    // Virtual viewport scroll handling (e.g. pinch zoomed viewports in mobile browsers or desktop Chrome/Edge)\n    // 'normal' zooms and virtual viewport zooms (aka layout viewport) result in different\n    // element.getBoundingClientRect() results:\n    //  - with normal scrolls, the clientRect decreases with an increase in scroll(Top|Left)/page(X|Y)Offset\n    //  - with pinch zoom scrolls, the clientRect stays the same while scroll/pageOffset changes\n    // This means, that the combination of clientRect + scroll/pageOffset does not work to calculate the offset\n    // from the document's upper left origin when pinch zoom is used.\n    // To work around this issue, we do not use scroll/pageOffset but get the clientRect of the html element and\n    // subtract it from the element's rect, which always results in the offset from the document origin.\n    // NOTE: the current way of offset calculation was implemented specifically to track event positions on the\n    // seek bar, and it might break compatibility with jQuery's offset() method. If this ever turns out to be a\n    // problem, this method should be reverted to the old version and the offset calculation moved to the seek bar.\n\n    return {\n      top: elementRect.top - htmlRect.top,\n      left: elementRect.left - htmlRect.left,\n    };\n  }\n\n  /**\n   * Returns the width of the first element.\n   * @returns {number} the width of the first element\n   */\n  width(): number {\n    // TODO check if this is the same as jQuery's width() (probably not)\n    return this.elements[0].offsetWidth;\n  }\n\n  /**\n   * Returns the height of the first element.\n   * @returns {number} the height of the first element\n   */\n  height(): number {\n    // TODO check if this is the same as jQuery's height() (probably not)\n    return this.elements[0].offsetHeight;\n  }\n\n  /**\n   * Returns the size of the first element.\n   * @return {Size} the size of the first element\n   */\n  size(): Size {\n    return { width: this.width(), height: this.height() };\n  }\n\n  /**\n   * Attaches an event handler to one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to listen to\n   * @param eventHandler the event handler to call when the event fires\n   * @returns {DOM}\n   */\n  on(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.addEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.addEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removes an event handler from one or more events on all elements.\n   * @param eventName the event name (or multiple names separated by space) to remove the handler from\n   * @param eventHandler the event handler to remove\n   * @returns {DOM}\n   */\n  off(eventName: string, eventHandler: EventListenerOrEventListenerObject): DOM {\n    let events = eventName.split(' ');\n\n    events.forEach((event) => {\n      if (this.elements == null) {\n        this.document.removeEventListener(event, eventHandler);\n      }\n      else {\n        this.forEach((element) => {\n          element.removeEventListener(event, eventHandler);\n        });\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds the specified class(es) to all elements.\n   * @param className the class(es) to add, multiple classes separated by space\n   * @returns {DOM}\n   */\n  addClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.add(...classNames);\n        }\n      }\n      else {\n        element.className += ' ' + className;\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Removed the specified class(es) from all elements.\n   * @param className the class(es) to remove, multiple classes separated by space\n   * @returns {DOM}\n   */\n  removeClass(className: string): DOM {\n    this.forEach((element) => {\n      if (element.classList) {\n        const classNames = className.split(' ')\n          .filter(className => className.length > 0);\n\n        if (classNames.length > 0) {\n          element.classList.remove(...classNames);\n        }\n      }\n      else {\n        element.className = element.className.replace(\n          new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Checks if any of the elements has the specified class.\n   * @param className the class name to check\n   * @returns {boolean} true if one of the elements has the class attached, else if no element has it attached\n   */\n  hasClass(className: string): boolean {\n    let hasClass = false;\n\n    this.forEach((element) => {\n      if (element.classList) {\n        if (element.classList.contains(className)) {\n          // Since we are inside a handler, we can't just 'return true'. Instead, we save it to a variable\n          // and return it at the end of the function body.\n          hasClass = true;\n        }\n      }\n      else {\n        if (new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className)) {\n          // See comment above\n          hasClass = true;\n        }\n      }\n    });\n\n    return hasClass;\n  }\n\n  /**\n   * Returns the value of a CSS property of the first element.\n   * @param propertyName the name of the CSS property to retrieve the value of\n   */\n  css(propertyName: string): string | null;\n  /**\n   * Sets the value of a CSS property on all elements.\n   * @param propertyName the name of the CSS property to set the value for\n   * @param value the value to set for the given CSS property\n   */\n  css(propertyName: string, value: string): DOM;\n  /**\n   * Sets a collection of CSS properties and their values on all elements.\n   * @param propertyValueCollection an object containing pairs of property names and their values\n   */\n  css(propertyValueCollection: CssProperties): DOM;\n  css(propertyNameOrCollection: string | CssProperties, value?: string): string | null | DOM {\n    if (typeof propertyNameOrCollection === 'string') {\n      let propertyName = propertyNameOrCollection;\n\n      if (arguments.length === 2) {\n        return this.setCss(propertyName, value);\n      }\n      else {\n        return this.getCss(propertyName);\n      }\n    }\n    else {\n      let propertyValueCollection = propertyNameOrCollection;\n      return this.setCssCollection(propertyValueCollection);\n    }\n  }\n\n  private getCss(propertyName: string): string | null {\n    return getComputedStyle(this.elements[0])[<any>propertyName];\n  }\n\n  private setCss(propertyName: string, value: string): DOM {\n    this.forEach((element) => {\n      // <any> cast to resolve TS7015: http://stackoverflow.com/a/36627114/370252\n      element.style[<any>propertyName] = value;\n    });\n    return this;\n  }\n\n  private setCssCollection(ruleValueCollection: {[ruleName: string]: string}): DOM {\n    this.forEach((element) => {\n      // http://stackoverflow.com/a/34490573/370252\n      Object.assign(element.style, ruleValueCollection);\n    });\n\n    return this;\n  }\n}\n","import {ErrorMessageMap, ErrorMessageTranslator} from './components/errormessageoverlay';\nimport { ErrorEvent } from 'bitmovin-player';\nimport { MobileV3PlayerErrorEvent, MobileV3SourceErrorEvent } from './mobilev3playerapi';\n\nexport namespace ErrorUtils {\n\n  export const defaultErrorMessages: ErrorMessageMap = {\n    1000: 'Error is unknown',\n    1001: 'The player API is not available after a call to PlayerAPI.destroy.',\n    1100: 'General setup error',\n    1101: 'There was an error when inserting the HTML video element',\n    1102: 'No configuration was provided',\n    1103: 'The license is not valid',\n    1104: 'The the domain-locked player is not authorized to playback on this domain',\n    1105: 'The domain is not allowlisted',\n    1106: 'The license server URL is invalid',\n    1107: 'The impression server URL is invalid',\n    1108: 'Could not initialize a rendering engine',\n    1109: 'The used flash version does not support playback',\n    1110: 'Native Flash is not authorized by a valid Adobe token',\n    1111: 'Flash doesn\\'t have sufficient resources',\n    1112: 'Flash container API not available',\n    1113: 'Protocol not supported. This site has been loaded using \"file\" protocol, but unfortunately this is not supported. Please load the page using a web server (using http or https)',\n    1200: 'General source error',\n    1201: 'No valid source was provided',\n    1202: 'The downloaded manifest is invalid',\n    1203: 'There was no technology detected to playback the provided source',\n    1204: 'The stream type is not supported',\n    1205: 'The forced technology is not supported',\n    1206: 'No stream found for supported technologies.',\n    1207: 'The downloaded segment is empty',\n    1208: 'The manifest could not be loaded',\n    1209: 'Progressive stream type not supported or the stream has an error',\n    1210: 'HLS stream has an error',\n    1211: 'The encryption method is not supported',\n    1300: 'General playback error',\n    1301: 'Video decoder or demuxer had an error with the content',\n    1302: 'General error if Flash renderer has an error',\n    1303: 'Flash doesn\\'t have sufficient resources',\n    1304: 'The transmuxer could not be initialized',\n    1400: 'Network error while downloading',\n    1401: 'The manifest download timed out',\n    1402: 'The segment download timed out',\n    1403: 'The progressive stream download timed out',\n    1404: 'The Certificate could not be loaded',\n    2000: 'General DRM error',\n    2001: 'Required DRM configuration is missing',\n    2002: 'The licensing server URL is missing',\n    2003: 'License request failed',\n    2004: 'Key or KeyId is missing',\n    2005: 'Key size is not supported',\n    2006: 'Unable to instantiate a key system supporting the required combinations',\n    2007: 'Unable to create or initialize key session',\n    2008: 'The MediaKey object could not be created/initialized',\n    2009: 'Key error',\n    2010: 'The key system is not supported',\n    2011: 'The certificate is not valid',\n    2012: 'Invalid header key/value pair for PlayReady license request',\n    2013: 'Content cannot be played back because the output is restricted on this machine',\n    2014: 'DRM error for the Flash renderer',\n    2100: 'General VR error',\n    2101: 'Player technology not compatible with VR playback',\n    3000: 'General module error',\n    3001: 'The definition of the module is invalid (e.g. incomplete).',\n    3002: 'The module definition specifies dependencies but the module is not provided via a function for deferred loading.',\n    3003: 'A module cannot be loaded because it has not been added to the player core.',\n    3004: 'A module cannot be loaded because one or more dependencies are missing.',\n    3100: 'An Advertising module error has occurred. Refer to the attached AdvertisingError.',\n  };\n\n  export const defaultMobileV3ErrorMessageTranslator = (error: MobileV3PlayerErrorEvent | MobileV3SourceErrorEvent) => {\n    return error.message;\n  };\n\n  export const defaultWebErrorMessageTranslator: ErrorMessageTranslator = (error: ErrorEvent) => {\n    const errorMessage = ErrorUtils.defaultErrorMessages[error.code];\n\n    if (errorMessage) {\n      // Use the error message text if there is one\n      return `${errorMessage}\\n(${error.name})`; // default error message style\n    } else {\n      // Fallback to error code/name if no message is defined\n      return `${error.code} ${error.name}`;\n    }\n  };\n}\n","import {ArrayUtils} from './arrayutils';\nimport { Timeout } from './timeout';\n/**\n * Function interface for event listeners on the {@link EventDispatcher}.\n */\nexport interface EventListener<Sender, Args> {\n  (sender: Sender, args: Args): void;\n}\n\n/**\n * Empty type for creating {@link EventDispatcher event dispatchers} that do not carry any arguments.\n */\nexport interface NoArgs {\n}\n\n/**\n * Event args for an event that can be canceled.\n */\nexport interface CancelEventArgs extends NoArgs {\n  /**\n   * Gets or sets a flag whether the event should be canceled.\n   */\n  cancel?: boolean;\n}\n\n/**\n * Public interface that represents an event. Can be used to subscribe to and unsubscribe from events.\n */\nexport interface Event<Sender, Args> {\n  /**\n   * Subscribes an event listener to this event dispatcher.\n   * @param listener the listener to add\n   */\n  subscribe(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that is only called once.\n   * @param listener the listener to add\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>): void;\n\n  /**\n   * Subscribes an event listener to this event dispatcher that will be called at a limited rate with a minimum\n   * interval of the specified milliseconds.\n   * @param listener the listener to add\n   * @param rateMs the rate in milliseconds to which calling of the listeners should be limited\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number): void;\n\n  /**\n   * Unsubscribes a subscribed event listener from this dispatcher.\n   * @param listener the listener to remove\n   * @returns {boolean} true if the listener was successfully unsubscribed, false if it isn't subscribed on this\n   *   dispatcher\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean;\n}\n\n/**\n * Event dispatcher to subscribe and trigger events. Each event should have its own dispatcher.\n */\nexport class EventDispatcher<Sender, Args> implements Event<Sender, Args> {\n\n  private listeners: EventListenerWrapper<Sender, Args>[] = [];\n\n  constructor() {\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribe(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeOnce(listener: EventListener<Sender, Args>) {\n    this.listeners.push(new EventListenerWrapper(listener, true));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  subscribeRateLimited(listener: EventListener<Sender, Args>, rateMs: number) {\n    this.listeners.push(new RateLimitedEventListenerWrapper(listener, rateMs));\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  unsubscribe(listener: EventListener<Sender, Args>): boolean {\n    // Iterate through listeners, compare with parameter, and remove if found\n    // NOTE: In case we ever remove all matching listeners instead of just the first, we need to reverse-iterate here\n    for (let i = 0; i < this.listeners.length; i++) {\n      let subscribedListener = this.listeners[i];\n      if (subscribedListener.listener === listener) {\n        subscribedListener.clear();\n        ArrayUtils.remove(this.listeners, subscribedListener);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Removes all listeners from this dispatcher.\n   */\n  unsubscribeAll(): void {\n    // In case of RateLimitedEventListenerWrapper we need to make sure that the timeout callback won't be called\n    for (let listener of this.listeners) {\n      listener.clear();\n    }\n\n    this.listeners = [];\n  }\n\n  /**\n   * Dispatches an event to all subscribed listeners.\n   * @param sender the source of the event\n   * @param args the arguments for the event\n   */\n  dispatch(sender: Sender, args: Args = null) {\n    let listenersToRemove = [];\n\n    // Call every listener\n    // We iterate over a copy of the array of listeners to avoid the case where events are not fired on listeners when\n    // listeners are unsubscribed from within the event handlers during a dispatch (because the indices change and\n    // listeners are shifted within the array).\n    // This means that listener x+1 will still be called if unsubscribed from within the handler of listener x, as well\n    // as listener y+1 will not be called when subscribed from within the handler of listener y.\n    // Array.slice(0) is the fastest array copy method according to: https://stackoverflow.com/a/21514254/370252\n    const listeners = this.listeners.slice(0);\n    for (let listener of listeners) {\n      listener.fire(sender, args);\n\n      if (listener.isOnce()) {\n        listenersToRemove.push(listener);\n      }\n    }\n\n    // Remove one-time listener\n    for (let listenerToRemove of listenersToRemove) {\n      ArrayUtils.remove(this.listeners, listenerToRemove);\n    }\n  }\n\n  /**\n   * Returns the event that this dispatcher manages and on which listeners can subscribe and unsubscribe event handlers.\n   * @returns {Event}\n   */\n  getEvent(): Event<Sender, Args> {\n    // For now, just cast the event dispatcher to the event interface. At some point in the future when the\n    // codebase grows, it might make sense to split the dispatcher into separate dispatcher and event classes.\n    return <Event<Sender, Args>>this;\n  }\n}\n\n/**\n * A basic event listener wrapper to manage listeners within the {@link EventDispatcher}. This is a 'private' class\n * for internal dispatcher use and it is therefore not exported.\n */\nclass EventListenerWrapper<Sender, Args> {\n\n  private eventListener: EventListener<Sender, Args>;\n  private once: boolean;\n\n  constructor(listener: EventListener<Sender, Args>, once: boolean = false) {\n    this.eventListener = listener;\n    this.once = once;\n  }\n\n  /**\n   * Returns the wrapped event listener.\n   * @returns {EventListener<Sender, Args>}\n   */\n  get listener(): EventListener<Sender, Args> {\n    return this.eventListener;\n  }\n\n  /**\n   * Fires the wrapped event listener with the given arguments.\n   * @param sender\n   * @param args\n   */\n  fire(sender: Sender, args: Args) {\n    this.eventListener(sender, args);\n  }\n\n  /**\n   * Checks if this listener is scheduled to be called only once.\n   * @returns {boolean} once if true\n   */\n  isOnce(): boolean {\n    return this.once;\n  }\n\n  clear(): void {\n  }\n}\n\ninterface EventAttributes<Sender, Args> {\n  sender: Sender;\n  args: Args;\n}\n\n/**\n * Extends the basic {@link EventListenerWrapper} with rate-limiting functionality.\n */\nclass RateLimitedEventListenerWrapper<Sender, Args> extends EventListenerWrapper<Sender, Args> {\n\n  private readonly rateMs: number;\n  private readonly rateLimitingEventListener: EventListener<Sender, Args>;\n\n  // save last seen event attributes\n  private lastSeenEvent: EventAttributes<Sender, Args>;\n\n  private rateLimitTimout: Timeout;\n\n  constructor(listener: EventListener<Sender, Args>, rateMs: number) {\n    super(listener); // sets the event listener sink\n\n    this.rateMs = rateMs;\n\n    // starting limiting the events to the given value\n    const startRateLimiting = () => {\n      this.rateLimitTimout.start();\n    };\n\n    // timout for limiting the events\n    this.rateLimitTimout = new Timeout(this.rateMs, () => {\n      if (this.lastSeenEvent) {\n        this.fireSuper(this.lastSeenEvent.sender, this.lastSeenEvent.args);\n        startRateLimiting(); // start rateLimiting again to keep rate limit active even after firing the last seen event\n        this.lastSeenEvent = null;\n      }\n    });\n\n    // In case the events stopping during the rateLimiting we need to track the last seen one and delegate after the\n    // rate limiting is finished. This prevents missing the last update due to the rate limit.\n    this.rateLimitingEventListener = (sender: Sender, args: Args) => {\n      // only fire events if the rateLimiting is not running\n      if (this.shouldFireEvent()) {\n        this.fireSuper(sender, args);\n        startRateLimiting();\n        return;\n      }\n\n      this.lastSeenEvent = {\n        sender: sender,\n        args: args,\n      };\n    };\n  }\n\n  private shouldFireEvent(): boolean {\n    return !this.rateLimitTimout.isActive();\n  }\n\n  private fireSuper(sender: Sender, args: Args) {\n    // Fire the actual external event listener\n    super.fire(sender, args);\n  }\n\n  fire(sender: Sender, args: Args) {\n    // Fire the internal rate-limiting listener instead of the external event listener\n    this.rateLimitingEventListener(sender, args);\n  }\n\n  clear(): void {\n    super.clear();\n    this.rateLimitTimout.clear();\n  }\n}\n","const FocusVisibleCssClassName = '{{PREFIX}}-focus-visible';\n\nexport class FocusVisibilityTracker {\n  private readonly eventHandlerMap: { [eventName: string]: EventListenerOrEventListenerObject };\n  private lastInteractionWasKeyboard: boolean = true;\n\n  constructor(private bitmovinUiPrefix: string) {\n    this.eventHandlerMap = {\n      mousedown: this.onMouseOrPointerOrTouch,\n      pointerdown: this.onMouseOrPointerOrTouch,\n      touchstart: this.onMouseOrPointerOrTouch,\n      keydown: this.onKeyDown,\n      focus: this.onFocus,\n      blur: this.onBlur,\n    };\n    this.registerEventListeners();\n  }\n\n  private onKeyDown = (e: KeyboardEvent) => {\n    if (e.metaKey || e.altKey || e.ctrlKey) {\n      return;\n    }\n\n    this.lastInteractionWasKeyboard = true;\n  };\n\n  private onMouseOrPointerOrTouch = () => (this.lastInteractionWasKeyboard = false);\n\n  private onFocus = ({ target: element }: FocusEvent) => {\n    if (\n      this.lastInteractionWasKeyboard &&\n      isHtmlElement(element) &&\n      isBitmovinUi(element, this.bitmovinUiPrefix) &&\n      !element.classList.contains(FocusVisibleCssClassName)\n    ) {\n      element.classList.add(FocusVisibleCssClassName);\n    }\n  };\n\n  private onBlur = ({ target: element }: FocusEvent) => {\n    if (isHtmlElement(element)) {\n      element.classList.remove(FocusVisibleCssClassName);\n    }\n  };\n\n  private registerEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.addEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  private unregisterEventListeners(): void {\n    for (const event in this.eventHandlerMap) {\n      document.removeEventListener(event, this.eventHandlerMap[event], true);\n    }\n  }\n\n  public release(): void {\n    this.unregisterEventListeners();\n  }\n}\n\nfunction isBitmovinUi(element: Element, bitmovinUiPrefix: string): boolean {\n  return element.id.indexOf(bitmovinUiPrefix) === 0;\n}\n\nfunction isHtmlElement(element: unknown): element is HTMLElement & { classList: DOMTokenList } {\n  return (\n    element instanceof HTMLElement && element.classList instanceof DOMTokenList\n  );\n}\n","export namespace Guid {\n\n  let guid = 1;\n\n  export function next() {\n    return guid++;\n  }\n}\n","import {DOM} from './dom';\n\nexport interface ImageLoadedCallback {\n  (url: string, width: number, height: number): void;\n}\n\ninterface ImageLoaderState {\n  url: string;\n  image: DOM;\n  loadedCallback: ImageLoadedCallback;\n  loaded: boolean;\n  width: number;\n  height: number;\n}\n\n/**\n * Tracks the loading state of images.\n */\nexport class ImageLoader {\n\n  private state: { [url: string]: ImageLoaderState; } = {};\n\n  /**\n   * Loads an image and call the callback once the image is loaded. If the image is already loaded, the callback\n   * is called immediately, else it is called once loading has finished. Calling this method multiple times for the\n   * same image while it is loading calls only let callback passed into the last call.\n   * @param url The url to the image to load\n   * @param loadedCallback The callback that is called when the image is loaded\n   */\n  load(url: string, loadedCallback: ImageLoadedCallback): void {\n    if (!this.state[url]) {\n      // When the image was never attempted to be loaded before, we create a state and store it in the state map\n      // for later use when the same image is requested to be loaded again.\n      let state: ImageLoaderState = {\n        url: url,\n        image: new DOM('img', {}),\n        loadedCallback: loadedCallback,\n        loaded: false,\n        width: 0,\n        height: 0,\n      };\n      this.state[url] = state;\n\n      // Listen to the load event, update the state and call the callback once the image is loaded\n      state.image.on('load', (e) => {\n        state.loaded = true;\n        state.width = (<HTMLImageElement>state.image.get(0)).width;\n        state.height = (<HTMLImageElement>state.image.get(0)).height;\n\n        this.callLoadedCallback(state);\n      });\n\n      // Set the image URL to start the loading\n      state.image.attr('src', state.url);\n    } else {\n      // We have a state for the requested image, so it is either already loaded or currently loading\n      let state = this.state[url];\n\n      // We overwrite the callback to make sure that only the callback of the latest call gets executed.\n      // Earlier callbacks become invalid once a new load call arrives, and they are not called as long as the image\n      // is not loaded.\n      state.loadedCallback = loadedCallback;\n\n      // When the image is already loaded, we directly execute the callback instead of waiting for the load event\n      if (state.loaded) {\n        this.callLoadedCallback(state);\n      }\n    }\n  }\n\n  private callLoadedCallback(state: ImageLoaderState): void {\n    state.loadedCallback(state.url, state.width, state.height);\n  }\n}\n","import vocabularyDe from './languages/de.json';\nimport vocabularyEn from './languages/en.json';\nimport { LocalizationConfig } from '../uimanager.js';\n\nexport const defaultVocabularies: Vocabularies = {\n  'en': vocabularyEn,\n  'de': vocabularyDe,\n};\n\nconst defaultLocalizationConfig: LocalizationConfig = {\n  language: 'en',\n  vocabularies: defaultVocabularies,\n};\n\ntype Localizer = () => string;\nexport type LocalizableText = string | Localizer;\n\ninterface Vocabulary {\n  'settings.video.quality': string;\n  'settings.audio.quality': string;\n  'settings.audio.track': string;\n  'settings.audio.mute': string;\n  'settings.audio.volume': string;\n  'settings.subtitles': string;\n  'settings.subtitles.font.color': string;\n  'settings.subtitles.font.opacity': string;\n  'settings.subtitles.background.color': string;\n  'settings.subtitles.background.opacity': string;\n  'settings.subtitles.font.size': string;\n  'settings.subtitles.characterEdge': string;\n  'settings.subtitles.characterEdge.raised': string;\n  'settings.subtitles.characterEdge.depressed': string;\n  'settings.subtitles.characterEdge.uniform': string;\n  'settings.subtitles.characterEdge.dropshadowed': string;\n  'settings.subtitles.font.family': string;\n  'settings.subtitles.font.family.monospacedserif': string;\n  'settings.subtitles.font.family.proportionalserif': string;\n  'settings.subtitles.font.family.monospacedsansserif': string;\n  'settings.subtitles.font.family.proportionalsansserif': string;\n  'settings.subtitles.font.family.casual': string;\n  'settings.subtitles.font.family.cursive': string;\n  'settings.subtitles.font.family.smallcapital': string;\n  'settings.subtitles.window.color': string;\n  'settings.subtitles.window.opacity': string;\n  'play': string;\n  'settings.time.hours': string;\n  'settings.time.minutes': string;\n  'settings.time.seconds': string;\n  'colors.white': string;\n  'colors.black': string;\n  'colors.red': string;\n  'colors.green': string;\n  'colors.blue': string;\n  'colors.cyan': string;\n  'colors.yellow': string;\n  'colors.magenta': string;\n  'percent': string;\n  'settings': string;\n  'ads.remainingTime': string;\n  'pictureInPicture': string;\n  'appleAirplay': string;\n  'googleCast': string;\n  'vr': string;\n  'off': string;\n  'auto': string;\n  'back': string;\n  'reset': string;\n  'replay': string;\n  'normal': string;\n  'default': string;\n  'open': string;\n  'close': string;\n  'fullscreen': string;\n  'speed': string;\n  'playPause': string;\n  'live': string;\n  'subtitle.example': string;\n  'subtitle.select': string;\n  'playingOn': string;\n  'connectingTo': string;\n  'watermarkLink': string;\n  'controlBar': string;\n  'player': string;\n  'seekBar': string;\n  'seekBar.value': string;\n  'seekBar.timeshift': string;\n  'seekBar.durationText': string;\n}\n\nexport type CustomVocabulary<V> = V & Partial<Vocabulary>;\n\nexport interface Vocabularies {\n  [key: string]: CustomVocabulary<Record<string, string>>;\n}\n\nclass I18n {\n  private language: string;\n  private vocabulary: CustomVocabulary<Record<string, string>>;\n\n  constructor(config: LocalizationConfig) {\n    this.setConfig(config);\n  }\n\n  public setConfig(config: LocalizationConfig) {\n    const mergedConfig = { ...defaultLocalizationConfig, ...config };\n    const detectBrowserLanguage = mergedConfig.language === 'auto';\n    const vocabularies = this.mergeVocabulariesWithDefaultVocabularies(mergedConfig.vocabularies);\n    this.initializeLanguage(mergedConfig.language, detectBrowserLanguage, vocabularies);\n    this.initializeVocabulary(vocabularies);\n  }\n\n  private static containsLanguage(vocabularies: Vocabularies, language: string) {\n    return vocabularies.hasOwnProperty(language);\n  }\n\n  private mergeVocabulariesWithDefaultVocabularies(vocabularies: Vocabularies = {}) {\n    const rawVocabularies: Vocabularies = { ...defaultVocabularies, ...vocabularies };\n    return Object.keys(rawVocabularies).reduce((mergedVocabularies, language) => {\n      let vocabulary = rawVocabularies[language];\n      if (I18n.containsLanguage(defaultVocabularies, language) && I18n.containsLanguage(vocabularies, language)) {\n        vocabulary = { ...defaultVocabularies[language], ...vocabularies[language] };\n      }\n      return { ...mergedVocabularies, [language]: vocabulary };\n    }, {});\n  }\n\n  private initializeLanguage(\n    language: string,\n    browserLanguageDetectionEnabled: boolean,\n    vocabularies: Vocabularies,\n  ) {\n    if (browserLanguageDetectionEnabled) {\n      const userLanguage = window.navigator.language;\n\n      if (I18n.containsLanguage(vocabularies, userLanguage)) {\n        this.language = userLanguage;\n        return;\n      }\n      const shortenedUserLanguage = userLanguage.slice(0, 2);\n      if (I18n.containsLanguage(vocabularies, shortenedUserLanguage)) {\n        this.language = shortenedUserLanguage;\n        return;\n      }\n    }\n\n    this.language = language;\n  }\n\n  private initializeVocabulary(vocabularies: Vocabularies) {\n    this.vocabulary = ['en', this.language]\n      .reduce((vocab, lang) => ({ ...vocab, ...(vocabularies[lang] || {}) }), {});\n  }\n\n  private replaceVariableWithPlaceholderIfExists(text: string, config: any) {\n    const matches = text.match(new RegExp('{[a-zA-Z0-9]+}', 'g'));\n    if (matches.length === 0) {\n      return text;\n    }\n\n    return matches\n      .map((m: string) => ({ match: m, key: m.slice(1, -1) }))\n      .reduce((str, { key, match }) => config.hasOwnProperty(key) ? str.replace(match, config[key]) : str, text);\n  }\n\n  public getLocalizer<V extends CustomVocabulary<Record<string, string>> = CustomVocabulary<Record<string, string>>>(\n    key: keyof V,\n    config?: Record<string, string | number>,\n  ): Localizer {\n    return () => {\n      if (key == null) { // because sometimes we call toDomElement() without configuring the component or setting text...\n        return undefined;\n      }\n      let vocabularyString = this.vocabulary[key as string];\n\n      if (vocabularyString == null) {\n        vocabularyString = key as string;\n      }\n\n      if (config != null) {\n        vocabularyString = this.replaceVariableWithPlaceholderIfExists(vocabularyString, config);\n      }\n\n      return vocabularyString;\n    };\n  }\n\n  public performLocalization(text: LocalizableText) {\n    return typeof text === 'function' ? text() : text;\n  }\n}\n\nexport const i18n = new I18n(defaultLocalizationConfig);\n","module.exports={\n  \"settings.video.quality\": \"Videoqualität\",\n  \"settings.audio.quality\": \"Audioqualität\",\n  \"settings.audio.track\": \"Audiospur\",\n  \"speed\": \"Geschwindigkeit\",\n  \"play\": \"Abspielen\",\n  \"pause\": \"Pause\",\n  \"playPause\": \"Abspielen/Pause\",\n  \"open\": \"öffnen\",\n  \"close\": \"Schließen\",\n  \"settings.audio.mute\": \"Stummschaltung\",\n  \"settings.audio.volume\": \"Lautstärke\",\n  \"pictureInPicture\": \"Bild im Bild\",\n  \"appleAirplay\": \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\": \"VR\",\n  \"settings\": \"Einstellungen\",\n  \"fullscreen\": \"Vollbild\",\n  \"off\": \"aus\",\n  \"settings.subtitles\": \"Untertitel\",\n  \"settings.subtitles.font.size\": \"Größe\",\n  \"settings.subtitles.font.family\": \"Schriftart\",\n  \"settings.subtitles.font.color\": \"Farbe\",\n  \"settings.subtitles.font.opacity\": \"Deckkraft\",\n  \"settings.subtitles.characterEdge\": \"Ränder\",\n  \"settings.subtitles.background.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.background.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.subtitles.window.color\": \"Hintergrundfarbe\",\n  \"settings.subtitles.window.opacity\": \"Hintergrunddeckkraft\",\n  \"settings.time.hours\": \"Stunden\",\n  \"settings.time.minutes\": \"Minuten\",\n  \"settings.time.seconds\": \"Sekunden\",\n  \"back\": \"Zurück\",\n  \"reset\": \"Zurücksetzen\",\n  \"replay\": \"Wiederholen\",\n  \"ads.remainingTime\": \"Diese Anzeige endet in {remainingTime} Sekunden\",\n  \"default\": \"standard\",\n  \"colors.white\": \"weiß\",\n  \"colors.black\": \"schwarz\",\n  \"colors.red\": \"rot\",\n  \"colors.green\": \"grün\",\n  \"colors.blue\": \"blau\",\n  \"colors.yellow\": \"gelb\",\n  \"subtitle.example\": \"Beispiel Untertitel\",\n  \"subtitle.select\": \"Untertitel auswählen\",\n  \"playingOn\": \"Spielt auf <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Verbindung mit <strong>{castDeviceName}</strong> wird hergestellt...\",\n  \"watermarkLink\": \"Link zum Homepage\",\n  \"controlBar\": \"Videoplayer Kontrollen\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video-Timeline\",\n  \"seekBar.value\": \"Wert\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"aus\"\n}\n","module.exports={\n  \"settings.video.quality\": \"Video Quality\",\n  \"settings.audio.quality\": \"Audio Quality\",\n  \"settings.audio.track\": \"Audio Track\",\n  \"settings.audio.mute\" : \"Mute\",\n  \"settings.audio.volume\" : \"Volume\",\n  \"settings.subtitles.window.color\" : \"Window color\",\n  \"settings.subtitles.window.opacity\" : \"Window opacity\",\n  \"settings.subtitles\" : \"Subtitles\",\n  \"settings.subtitles.font.color\" : \"Font color\",\n  \"settings.subtitles.font.opacity\" : \"Font opacity\",\n  \"settings.subtitles.background.color\" : \"Background color\",\n  \"settings.subtitles.background.opacity\": \"Background opacity\",\n  \"colors.white\": \"white\",\n  \"colors.black\": \"black\",\n  \"colors.red\": \"red\",\n  \"colors.green\": \"green\",\n  \"colors.blue\": \"blue\",\n  \"colors.cyan\": \"cyan\",\n  \"colors.yellow\": \"yellow\",\n  \"colors.magenta\": \"magenta\",\n  \"percent\": \"{value}%\",\n  \"settings.subtitles.font.size\": \"Font size\",\n  \"settings.subtitles.characterEdge\": \"Character edge\",\n  \"settings.subtitles.characterEdge.raised\": \"raised\",\n  \"settings.subtitles.characterEdge.depressed\": \"depressed\",\n  \"settings.subtitles.characterEdge.uniform\": \"uniform\",\n  \"settings.subtitles.characterEdge.dropshadowed\": \"drop shadowed\",\n  \"settings.subtitles.font.family\": \"Font family\",\n  \"settings.subtitles.font.family.monospacedserif\": \"monospaced serif\",\n  \"settings.subtitles.font.family.proportionalserif\": \"proportional serif\",\n  \"settings.subtitles.font.family.monospacedsansserif\": \"monospaced sans serif\",\n  \"settings.subtitles.font.family.proportionalsansserif\": \"proportional sans serif\",\n  \"settings.subtitles.font.family.casual\": \"casual\",\n  \"settings.subtitles.font.family.cursive\": \"cursive\",\n  \"settings.subtitles.font.family.smallcapital\": \"small capital\",\n  \"settings.time.hours\": \"Hours\",\n  \"settings.time.minutes\": \"Minutes\",\n  \"settings.time.seconds\": \"Seconds\",\n  \"ads.remainingTime\": \"This ad will end in {remainingTime} seconds.\",\n  \"settings\": \"Settings\",\n  \"fullscreen\" : \"Fullscreen\",\n  \"speed\": \"Speed\",\n  \"playPause\" : \"Play/Pause\",\n  \"play\": \"Play\",\n  \"pause\": \"Pause\",\n  \"open\": \"open\",\n  \"close\": \"Close\",\n  \"pictureInPicture\": \"Picture-in-Picture\",\n  \"appleAirplay\" : \"Apple AirPlay\",\n  \"googleCast\": \"Google Cast\",\n  \"vr\" : \"VR\",\n  \"off\": \"off\",\n  \"auto\": \"auto\",\n  \"back\" : \"Back\",\n  \"reset\": \"Reset\",\n  \"replay\": \"Replay\",\n  \"normal\": \"normal\",\n  \"default\": \"default\",\n  \"live\": \"Live\",\n  \"subtitle.example\": \"example subtitle\",\n  \"subtitle.select\": \"Select subtitle\",\n  \"playingOn\": \"Reproduzindo em <strong>{castDeviceName}</strong>\",\n  \"connectingTo\": \"Conectando em <strong>{castDeviceName}</strong>...\",\n  \"watermarkLink\": \"Link to Homepage\",\n  \"controlBar\": \"Video player controls\",\n  \"player\": \"Video player\",\n  \"seekBar\": \"Video timeline\",\n  \"seekBar.value\": \"Value\",\n  \"seekBar.timeshift\": \"Timeshift\",\n  \"seekBar.durationText\": \"out of\"\n}\n","export const version: string = '{{VERSION}}';\n// Management\nexport { UIManager, UIInstanceManager } from './uimanager';\n// Factories\nexport { UIFactory } from './uifactory';\nexport { DemoFactory } from './demofactory';\n// Utils\nexport { ArrayUtils } from './arrayutils';\nexport { StringUtils } from './stringutils';\nexport { PlayerUtils } from './playerutils';\nexport { UIUtils } from './uiutils';\nexport { BrowserUtils } from './browserutils';\nexport { StorageUtils } from './storageutils';\nexport { ErrorUtils } from './errorutils';\n// Components\nexport { Button } from './components/button';\nexport { ControlBar } from './components/controlbar';\nexport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nexport { HugePlaybackToggleButton } from './components/hugeplaybacktogglebutton';\nexport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nexport { PlaybackToggleButton } from './components/playbacktogglebutton';\nexport { SeekBar } from './components/seekbar';\nexport { SelectBox } from './components/selectbox';\nexport { ItemSelectionList } from './components/itemselectionlist';\nexport { SettingsPanel } from './components/settingspanel';\nexport { SettingsToggleButton } from './components/settingstogglebutton';\nexport { ToggleButton } from './components/togglebutton';\nexport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nexport { VolumeToggleButton } from './components/volumetogglebutton';\nexport { VRToggleButton } from './components/vrtogglebutton';\nexport { Watermark } from './components/watermark';\nexport { UIContainer } from './components/uicontainer';\nexport { Container } from './components/container';\nexport { Label } from './components/label';\nexport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nexport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nexport { CastStatusOverlay } from './components/caststatusoverlay';\nexport { CastToggleButton } from './components/casttogglebutton';\nexport { Component } from './components/component';\nexport { ErrorMessageOverlay } from './components/errormessageoverlay';\nexport { RecommendationOverlay } from './components/recommendationoverlay';\nexport { SeekBarLabel } from './components/seekbarlabel';\nexport { SubtitleOverlay } from './components/subtitleoverlay';\nexport { SubtitleSelectBox } from './components/subtitleselectbox';\nexport { TitleBar } from './components/titlebar';\nexport { VolumeControlButton } from './components/volumecontrolbutton';\nexport { ClickOverlay } from './components/clickoverlay';\nexport { AdSkipButton } from './components/adskipbutton';\nexport { AdMessageLabel } from './components/admessagelabel';\nexport { AdClickOverlay } from './components/adclickoverlay';\nexport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nexport { HugeReplayButton } from './components/hugereplaybutton';\nexport { BufferingOverlay } from './components/bufferingoverlay';\nexport { CastUIContainer } from './components/castuicontainer';\nexport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nexport { CloseButton } from './components/closebutton';\nexport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nexport { AirPlayToggleButton } from './components/airplaytogglebutton';\nexport { VolumeSlider } from './components/volumeslider';\nexport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nexport { Spacer } from './components/spacer';\nexport { BackgroundColorSelectBox } from './components/subtitlesettings/backgroundcolorselectbox';\nexport { BackgroundOpacitySelectBox } from './components/subtitlesettings/backgroundopacityselectbox';\nexport { CharacterEdgeSelectBox } from './components/subtitlesettings/characteredgeselectbox';\nexport { FontColorSelectBox } from './components/subtitlesettings/fontcolorselectbox';\nexport { FontFamilySelectBox } from './components/subtitlesettings/fontfamilyselectbox';\nexport { FontOpacitySelectBox } from './components/subtitlesettings/fontopacityselectbox';\nexport { FontSizeSelectBox } from './components/subtitlesettings/fontsizeselectbox';\nexport { SubtitleSettingSelectBox } from './components/subtitlesettings/subtitlesettingselectbox';\nexport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nexport { WindowColorSelectBox } from './components/subtitlesettings/windowcolorselectbox';\nexport { WindowOpacitySelectBox } from './components/subtitlesettings/windowopacityselectbox';\nexport { SubtitleSettingsResetButton } from './components/subtitlesettings/subtitlesettingsresetbutton';\nexport { ListBox } from './components/listbox';\nexport { SubtitleListBox } from './components/subtitlelistbox';\nexport { AudioTrackListBox } from './components/audiotracklistbox';\nexport { SettingsPanelPage } from './components/settingspanelpage';\nexport { SettingsPanelPageBackButton } from './components/settingspanelpagebackbutton';\nexport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nexport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nexport { SettingsPanelItem } from './components/settingspanelitem';\n\n// Object.assign polyfill for ES5/IE9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\nif (typeof Object.assign !== 'function') {\n  Object.assign = function(target: any) {\n    'use strict';\n    if (target == null) {\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (let index = 1; index < arguments.length; index++) {\n      let source = arguments[index];\n      if (source != null) {\n        for (let key in source) {\n          if (Object.prototype.hasOwnProperty.call(source, key)) {\n            target[key] = source[key];\n          }\n        }\n      }\n    }\n    return target;\n  };\n}","import { PlayerAPI, PlayerEvent, PlayerEventBase, PlayerEventCallback } from 'bitmovin-player';\nimport { WrappedPlayer } from './uimanager';\n\nexport enum MobileV3PlayerEvent {\n  SourceError = 'sourceerror',\n  PlayerError = 'playererror',\n  PlaylistTransition = 'playlisttransition',\n}\n\nexport interface MobileV3PlayerErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport interface MobileV3SourceErrorEvent extends PlayerEventBase {\n  code: number;\n  message: string;\n}\n\nexport type MobileV3PlayerEventType = PlayerEvent | MobileV3PlayerEvent;\n\nexport interface MobileV3PlayerAPI extends PlayerAPI {\n  on(eventType: MobileV3PlayerEventType, callback: PlayerEventCallback): void;\n  exports: PlayerAPI['exports'] & { PlayerEvent: MobileV3PlayerEventType };\n}\n\nexport function isMobileV3PlayerAPI(player: WrappedPlayer | PlayerAPI | MobileV3PlayerAPI): player is MobileV3PlayerAPI {\n  for (const key in MobileV3PlayerEvent) {\n    if (MobileV3PlayerEvent.hasOwnProperty(key) && !player.exports.PlayerEvent.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {Event, EventDispatcher, NoArgs} from './eventdispatcher';\nimport {BrowserUtils} from './browserutils';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, TimeRange } from 'bitmovin-player';\n\nexport namespace PlayerUtils {\n\n  export enum PlayerState {\n    Idle,\n    Prepared,\n    Playing,\n    Paused,\n    Finished,\n  }\n\n  export function isTimeShiftAvailable(player: PlayerAPI): boolean {\n    return player.isLive() && player.getMaxTimeShift() !== 0;\n  }\n\n  export function getState(player: PlayerAPI): PlayerState {\n    if (player.hasEnded()) {\n      return PlayerState.Finished;\n    } else if (player.isPlaying()) {\n      return PlayerState.Playing;\n    } else if (player.isPaused()) {\n      return PlayerState.Paused;\n    } else if (player.getSource() != null) {\n      return PlayerState.Prepared;\n    } else {\n      return PlayerState.Idle;\n    }\n  }\n\n  /**\n   * Returns the currentTime - seekableRange.start. This ensures a user-friendly currentTime after a live stream\n   * transitioned to VoD.\n   * @param player\n   */\n  export function getCurrentTimeRelativeToSeekableRange(player: PlayerAPI): number {\n    const currentTime = player.getCurrentTime();\n    if (player.isLive()) {\n      return currentTime;\n    }\n\n    const seekableRangeStart = PlayerUtils.getSeekableRangeStart(player, 0);\n    return currentTime - seekableRangeStart;\n  }\n\n  /**\n   * Returns the start value of the seekable range or the defaultValue if no seekableRange is present.\n   * For now this happens only in combination with Mobile SDKs.\n   *\n   * TODO: remove this function in next major release\n   *\n   * @param player\n   * @param defaultValue\n   */\n  export function getSeekableRangeStart(player: PlayerAPI, defaultValue: number = 0) {\n    return player.getSeekableRange() && player.getSeekableRange().start || defaultValue;\n  }\n\n  /**\n   * Calculates player seekable time range for live.\n   * As the player returns `{ start: -1, end: -1 }` for live streams we need to calculate the `seekableRange` based on `maxTimeshift`.\n   *\n   * @param player\n   */\n  export function getSeekableRangeRespectingLive(player: PlayerAPI): TimeRange {\n    if (!player.isLive()) {\n      return player.getSeekableRange();\n    }\n\n    const currentTimeshift = -player.getTimeShift();\n    const maxTimeshift = -player.getMaxTimeShift();\n    const currentTime = player.getCurrentTime();\n\n    const end = currentTime + (currentTimeshift);\n    const start = currentTime - (maxTimeshift - currentTimeshift);\n\n    return { start, end };\n  }\n\n  export interface TimeShiftAvailabilityChangedArgs extends NoArgs {\n    timeShiftAvailable: boolean;\n  }\n\n  export class TimeShiftAvailabilityDetector {\n\n    private player: PlayerAPI;\n    private timeShiftAvailable: boolean;\n    private timeShiftAvailabilityChangedEvent = new EventDispatcher<PlayerAPI, TimeShiftAvailabilityChangedArgs>();\n\n    constructor(player: PlayerAPI) {\n      this.player = player;\n      this.timeShiftAvailable = undefined;\n\n      let timeShiftDetector = () => {\n        this.detect();\n      };\n      // Try to detect timeshift availability when source is loaded, which works for DASH streams\n      player.on(player.exports.PlayerEvent.SourceLoaded, timeShiftDetector);\n      // With HLS/NativePlayer streams, getMaxTimeShift can be 0 before the buffer fills, so we need to additionally\n      // check timeshift availability in TimeChanged\n      player.on(player.exports.PlayerEvent.TimeChanged, timeShiftDetector);\n    }\n\n    detect(): void {\n      if (this.player.isLive()) {\n        let timeShiftAvailableNow = PlayerUtils.isTimeShiftAvailable(this.player);\n\n        // When the availability changes, we fire the event\n        if (timeShiftAvailableNow !== this.timeShiftAvailable) {\n          this.timeShiftAvailabilityChangedEvent.dispatch(this.player, { timeShiftAvailable: timeShiftAvailableNow });\n          this.timeShiftAvailable = timeShiftAvailableNow;\n        }\n      }\n    }\n\n    get onTimeShiftAvailabilityChanged(): Event<PlayerAPI, TimeShiftAvailabilityChangedArgs> {\n      return this.timeShiftAvailabilityChangedEvent.getEvent();\n    }\n  }\n\n  export interface LiveStreamDetectorEventArgs extends NoArgs {\n    live: boolean;\n  }\n\n  /**\n   * Detects changes of the stream type, i.e. changes of the return value of the player#isLive method.\n   * Normally, a stream cannot change its type during playback, it's either VOD or live. Due to bugs on some\n   * platforms or browsers, it can still change. It is therefore unreliable to just check #isLive and this detector\n   * should be used as a workaround instead.\n   *\n   * Additionally starting with player v8.19.0 we have the use-case that a live stream changes into a vod.\n   * The DurationChanged event indicates this switch.\n   *\n   * Known cases:\n   *\n   * - HLS VOD on Android 4.3\n   * Video duration is initially 'Infinity' and only gets available after playback starts, so streams are wrongly\n   * reported as 'live' before playback (the live-check in the player checks for infinite duration).\n   *\n   * @deprecated since UI v3.9.0 in combination with player v8.19.0 use PlayerEvent.DurationChanged instead\n   *\n   * TODO: remove this class in next major release\n   */\n  export class LiveStreamDetector {\n\n    private player: PlayerAPI;\n    private live: boolean;\n    private liveChangedEvent = new EventDispatcher<PlayerAPI, LiveStreamDetectorEventArgs>();\n    private uimanager: UIInstanceManager;\n\n    constructor(player: PlayerAPI, uimanager: UIInstanceManager) {\n      this.player = player;\n      this.uimanager = uimanager;\n      this.live = undefined;\n\n      let liveDetector = () => {\n        this.detect();\n      };\n      this.uimanager.getConfig().events.onUpdated.subscribe(liveDetector);\n      // Re-evaluate when playback starts\n      player.on(player.exports.PlayerEvent.Play, liveDetector);\n\n      // HLS live detection workaround for Android:\n      // Also re-evaluate during playback, because that is when the live flag might change.\n      // (Doing it only in Android Chrome saves unnecessary overhead on other platforms)\n      if (BrowserUtils.isAndroid && BrowserUtils.isChrome) {\n        player.on(player.exports.PlayerEvent.TimeChanged, liveDetector);\n      }\n\n      // DurationChanged event was introduced with player v8.19.0\n      if (player.exports.PlayerEvent.DurationChanged) {\n        player.on(player.exports.PlayerEvent.DurationChanged, liveDetector);\n      }\n\n      // Ad video's isLive() might be different than the actual video's isLive().\n      player.on(player.exports.PlayerEvent.AdBreakStarted, liveDetector);\n      player.on(player.exports.PlayerEvent.AdBreakFinished, liveDetector);\n    }\n\n    detect(): void {\n      let liveNow = this.player.isLive();\n\n      // Compare current to previous live state flag and fire event when it changes. Since we initialize the flag\n      // with undefined, there is always at least an initial event fired that tells listeners the live state.\n      if (liveNow !== this.live) {\n        this.liveChangedEvent.dispatch(this.player, { live: liveNow });\n        this.live = liveNow;\n      }\n    }\n\n    get onLiveChanged(): Event<PlayerAPI, LiveStreamDetectorEventArgs> {\n      return this.liveChangedEvent.getEvent();\n    }\n  }\n}\n","export namespace StorageUtils {\n  let hasLocalStorageCache: boolean;\n\n  export function hasLocalStorage(): boolean {\n    if (hasLocalStorageCache) {\n      return hasLocalStorageCache;\n    }\n\n    // hasLocalStorage is used to safely ensure we can use localStorage\n    // taken from https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API#Feature-detecting_localStorage\n    let storage: any = { length: 0 };\n    try {\n      storage = window['localStorage'];\n      let x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      hasLocalStorageCache = true;\n    }\n    catch (e) {\n      hasLocalStorageCache = e instanceof DOMException && (\n          // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        storage.length !== 0;\n    }\n    return hasLocalStorageCache;\n  }\n\n  /**\n   * Stores a string item into localStorage.\n   * @param key the item's key\n   * @param data the item's data\n   */\n  export function setItem(key: string, data: string): void {\n    if (StorageUtils.hasLocalStorage()) {\n      window.localStorage.setItem(key, data);\n    }\n  }\n\n  /**\n   * Gets an item's string value from the localStorage.\n   * @param key the key to look up its associated value\n   * @return {string | null} Returns the string if found, null if there is no data stored for the key\n   */\n  export function getItem(key: string): string | null {\n    if (StorageUtils.hasLocalStorage()) {\n      return window.localStorage.getItem(key);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Stores an object into localStorage. The object will be serialized to JSON. The following types are supported\n   * in addition to the default types:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to store the data to\n   * @param data the object to store\n   */\n  export function setObject<T>(key: string, data: T): void {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = JSON.stringify(data);\n      setItem(key, json);\n    }\n  }\n\n  /**\n   * Gets an object for the given key from localStorage. The object will be deserialized from JSON. Beside the\n   * default types, the following types are supported:\n   *  - ColorUtils.Color\n   *\n   * @param key the key to look up its associated object\n   * @return {any} Returns the object if found, null otherwise\n   */\n  export function getObject<T>(key: string): T {\n    if (StorageUtils.hasLocalStorage()) {\n      let json = getItem(key);\n\n      if (key) {\n        let object = JSON.parse(json);\n        return <T>object;\n      }\n    }\n    return null;\n  }\n}\n","import { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\nexport namespace StringUtils {\n\n  export let FORMAT_HHMMSS: string = 'hh:mm:ss';\n  export let FORMAT_MMSS: string = 'mm:ss';\n\n  /**\n   * Formats a number of seconds into a time string with the pattern hh:mm:ss.\n   *\n   * @param totalSeconds the total number of seconds to format to string\n   * @param format the time format to output (default: hh:mm:ss)\n   * @returns {string} the formatted time string\n   */\n  export function secondsToTime(totalSeconds: number, format: string = FORMAT_HHMMSS): string {\n    let isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    let hours = Math.floor(totalSeconds / 3600);\n    let minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    let seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') + format\n        .replace('hh', leftPadWithZeros(hours, 2))\n        .replace('mm', leftPadWithZeros(minutes, 2))\n        .replace('ss', leftPadWithZeros(seconds, 2));\n  }\n\n  export function secondsToText(totalSeconds: number): string {\n    const isNegative = totalSeconds < 0;\n\n    if (isNegative) {\n      // If the time is negative, we make it positive for the calculation below\n      // (else we'd get all negative numbers) and reattach the negative sign later.\n      totalSeconds = -totalSeconds;\n    }\n\n    // Split into separate time parts\n    const hours = Math.floor(totalSeconds / 3600);\n    const minutes = Math.floor(totalSeconds / 60) - hours * 60;\n    const seconds = Math.floor(totalSeconds) % 60;\n\n    return (isNegative ? '-' : '') +\n    (hours !== 0 ? `${leftPadWithZeros(hours, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.hours'))} ` : '') +\n    (minutes !== 0 ? `${leftPadWithZeros(minutes, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.minutes'))} ` : '') +\n    `${leftPadWithZeros(seconds, 2)} ${i18n.performLocalization(i18n.getLocalizer('settings.time.seconds'))}`;\n  }\n\n  /**\n   * Converts a number to a string and left-pads it with zeros to the specified length.\n   * Example: leftPadWithZeros(123, 5) => '00123'\n   *\n   * @param num the number to convert to string and pad with zeros\n   * @param length the desired length of the padded string\n   * @returns {string} the padded number as string\n   */\n  function leftPadWithZeros(num: number | string, length: number): string {\n    let text = num + '';\n    let padding = '0000000000'.substr(0, length - text.length);\n    return padding + text;\n  }\n\n  /**\n   * Fills out placeholders in an ad message.\n   *\n   * Has the placeholders '{remainingTime[formatString]}', '{playedTime[formatString]}' and\n   * '{adDuration[formatString]}', which are replaced by the remaining time until the ad can be skipped, the current\n   * time or the ad duration. The format string is optional. If not specified, the placeholder is replaced by the time\n   * in seconds. If specified, it must be of the following format:\n   * - %d - Inserts the time as an integer.\n   * - %0Nd - Inserts the time as an integer with leading zeroes, if the length of the time string is smaller than N.\n   * - %f - Inserts the time as a float.\n   * - %0Nf - Inserts the time as a float with leading zeroes.\n   * - %.Mf - Inserts the time as a float with M decimal places. Can be combined with %0Nf, e.g. %04.2f (the time\n   * 10.123 would be printed as 0010.12).\n   * - %hh:mm:ss\n   * - %mm:ss\n   *\n   * Examples:\n   * - { text: 'Ad: {remainingTime%mm:ss} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 01:40 secs'\n   * - { text: 'Ad: {remainingTime%f} secs' }\n   * An input value of 100 would be displayed as: 'Ad: 100.0 secs'\n   *\n   * @param adMessage an ad message with optional placeholders to fill\n   * @param skipOffset if specified, {remainingTime} will be filled with the remaining time until the ad can be skipped\n   * @param player the player to get the time data from\n   * @returns {string} the ad message with filled placeholders\n   */\n  export function replaceAdMessagePlaceholders(adMessage: string, skipOffset: number, player: PlayerAPI) {\n    let adMessagePlaceholderRegex = new RegExp(\n      '\\\\{(remainingTime|playedTime|adDuration)(}|%((0[1-9]\\\\d*(\\\\.\\\\d+(d|f)|d|f)|\\\\.\\\\d+f|d|f)|hh:mm:ss|mm:ss)})',\n      'g',\n    );\n\n    return adMessage.replace(adMessagePlaceholderRegex, (formatString) => {\n      let time = 0;\n      if (formatString.indexOf('remainingTime') > -1) {\n        if (skipOffset) {\n          time = Math.ceil(skipOffset - player.getCurrentTime());\n        } else {\n          time = player.getDuration() - player.getCurrentTime();\n        }\n      } else if (formatString.indexOf('playedTime') > -1) {\n        time = player.getCurrentTime();\n      } else if (formatString.indexOf('adDuration') > -1) {\n        time = player.getDuration();\n      }\n      return formatNumber(Math.round(time), formatString);\n    });\n  }\n\n  function formatNumber(time: number, format: string) {\n    let formatStringValidationRegex = /%((0[1-9]\\d*(\\.\\d+(d|f)|d|f)|\\.\\d+f|d|f)|hh:mm:ss|mm:ss)/;\n    let leadingZeroesRegex = /(%0[1-9]\\d*)(?=(\\.\\d+f|f|d))/;\n    let decimalPlacesRegex = /\\.\\d*(?=f)/;\n\n    if (!formatStringValidationRegex.test(format)) {\n      // If the format is invalid, we set a default fallback format\n      format = '%d';\n    }\n\n    // Determine the number of leading zeros\n    let leadingZeroes = 0;\n    let leadingZeroesMatches = format.match(leadingZeroesRegex);\n    if (leadingZeroesMatches) {\n      leadingZeroes = parseInt(leadingZeroesMatches[0].substring(2));\n    }\n\n    // Determine the number of decimal places\n    let numDecimalPlaces = null;\n    let decimalPlacesMatches = format.match(decimalPlacesRegex);\n    if (decimalPlacesMatches && !isNaN(parseInt(decimalPlacesMatches[0].substring(1)))) {\n      numDecimalPlaces = parseInt(decimalPlacesMatches[0].substring(1));\n      if (numDecimalPlaces > 20) {\n        numDecimalPlaces = 20;\n      }\n    }\n\n    // Float format\n    if (format.indexOf('f') > -1) {\n      let timeString = '';\n\n      if (numDecimalPlaces !== null) {\n        // Apply fixed number of decimal places\n        timeString = time.toFixed(numDecimalPlaces);\n      } else {\n        timeString = '' + time;\n      }\n\n      // Apply leading zeros\n      if (timeString.indexOf('.') > -1) {\n        return leftPadWithZeros(timeString, timeString.length + (leadingZeroes - timeString.indexOf('.')));\n      } else {\n        return leftPadWithZeros(timeString, leadingZeroes);\n      }\n\n    }\n    // Time format\n    else if (format.indexOf(':') > -1) {\n      let totalSeconds = Math.ceil(time);\n\n      // hh:mm:ss format\n      if (format.indexOf('hh') > -1) {\n        return secondsToTime(totalSeconds);\n      }\n      // mm:ss format\n      else {\n        let minutes = Math.floor(totalSeconds / 60);\n        let seconds = totalSeconds % 60;\n\n        return leftPadWithZeros(minutes, 2) + ':' + leftPadWithZeros(seconds, 2);\n      }\n    }\n    // Integer format\n    else {\n      return leftPadWithZeros(Math.ceil(time), leadingZeroes);\n    }\n  }\n}\n","import { ListItem, ListSelector, ListSelectorConfig } from './components/listselector';\nimport { UIInstanceManager } from './uimanager';\nimport { PlayerAPI, SubtitleEvent, SubtitleTrack } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\n/**\n * Helper class to handle all subtitle related events\n *\n * This class listens to player events as well as the `ListSelector` event if selection changed\n */\nexport class SubtitleSwitchHandler {\n\n  private static SUBTITLES_OFF_KEY: string = 'null';\n\n  private player: PlayerAPI;\n  private listElement: ListSelector<ListSelectorConfig>;\n  private uimanager: UIInstanceManager;\n\n  constructor(player: PlayerAPI, element: ListSelector<ListSelectorConfig>, uimanager: UIInstanceManager) {\n    this.player = player;\n    this.listElement = element;\n    this.uimanager = uimanager;\n\n    this.bindSelectionEvent();\n    this.bindPlayerEvents();\n    this.refreshSubtitles();\n  }\n\n  private bindSelectionEvent(): void {\n    this.listElement.onItemSelected.subscribe((_, value: string) => {\n      // TODO add support for multiple concurrent subtitle selections\n      if (value === SubtitleSwitchHandler.SUBTITLES_OFF_KEY) {\n        const currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n        if (currentSubtitle) {\n          this.player.subtitles.disable(currentSubtitle.id);\n        }\n      } else {\n        this.player.subtitles.enable(value, true);\n      }\n    });\n  }\n\n  private bindPlayerEvents(): void {\n    this.player.on(this.player.exports.PlayerEvent.SubtitleAdded, this.addSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleEnabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleDisabled, this.selectCurrentSubtitle);\n    this.player.on(this.player.exports.PlayerEvent.SubtitleRemoved, this.removeSubtitle);\n    // Update subtitles when source goes away\n    this.player.on(this.player.exports.PlayerEvent.SourceUnloaded, this.clearSubtitles);\n    // Update subtitles when the period within a source changes\n    this.player.on(this.player.exports.PlayerEvent.PeriodSwitched, this.refreshSubtitles);\n    this.uimanager.getConfig().events.onUpdated.subscribe(this.refreshSubtitles);\n  }\n\n  private addSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (!this.listElement.hasItem(subtitle.id)) {\n      this.listElement.addItem(subtitle.id, subtitle.label);\n    }\n  };\n\n  private removeSubtitle = (event: SubtitleEvent) => {\n    const subtitle = event.subtitle;\n    if (this.listElement.hasItem(subtitle.id)) {\n      this.listElement.removeItem(subtitle.id);\n    }\n  };\n\n  private selectCurrentSubtitle = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    let currentSubtitle = this.player.subtitles.list().filter((subtitle) => subtitle.enabled).pop();\n    this.listElement.selectItem(currentSubtitle ? currentSubtitle.id : SubtitleSwitchHandler.SUBTITLES_OFF_KEY);\n  };\n\n  private clearSubtitles = () => {\n    this.listElement.clearItems();\n  }\n\n  private refreshSubtitles = () => {\n    if (!this.player.subtitles) {\n      // Subtitles API not available (yet)\n      return;\n    }\n\n    const offListItem: ListItem = {\n      key: SubtitleSwitchHandler.SUBTITLES_OFF_KEY,\n      label: i18n.getLocalizer('off'),\n    };\n\n    const subtitles = this.player.subtitles.list();\n    const subtitleToListItem = (subtitle: SubtitleTrack): ListItem => {\n      return { key: subtitle.id, label: subtitle.label };\n    };\n\n    this.listElement.synchronizeItems([\n      offListItem, ...subtitles.map(subtitleToListItem),\n    ]);\n    this.selectCurrentSubtitle();\n  };\n}\n","// TODO change to internal (not exported) class, how to use in other files?\n/**\n * Executes a callback after a specified amount of time, optionally repeatedly until stopped.\n */\nexport class Timeout {\n\n  private readonly delay: number;\n  private readonly callback: () => void;\n  private readonly repeat: boolean;\n  // There's two setTimeout declarations, one on Window which returns type \"number\" and one in NodeJS which returns\n  // type \"Timer\". For unknown reasons builds on Jenkins fail due to a type mismatch when we use type \"number\" here,\n  // although it works on other platforms (e.g. Windows, Codeship).\n  // To work around the issue we use type \"any\". The type does not matter anyway because we're not working with\n  // this value except providing it to clearTimeout.\n  private timeoutOrIntervalId: any;\n  private active: boolean;\n\n  /**\n   * Creates a new timeout callback handler.\n   * @param delay the delay in milliseconds after which the callback should be executed\n   * @param callback the callback to execute after the delay time\n   * @param repeat if true, call the callback repeatedly in delay intervals\n   */\n  constructor(delay: number, callback: () => void, repeat: boolean = false) {\n    this.delay = delay;\n    this.callback = callback;\n    this.repeat = repeat;\n    this.timeoutOrIntervalId = 0;\n    this.active = false;\n  }\n\n  /**\n   * Starts the timeout and calls the callback when the timeout delay has passed.\n   * @returns {Timeout} the current timeout (so the start call can be chained to the constructor)\n   */\n  start(): this {\n    this.reset();\n    return this;\n  }\n\n  /**\n   * Clears the timeout. The callback will not be called if clear is called during the timeout.\n   */\n  clear(): void {\n    this.clearInternal();\n  }\n\n  /**\n   * Resets the passed timeout delay to zero. Can be used to defer the calling of the callback.\n   */\n  reset(): void {\n    this.clearInternal();\n\n    if (this.repeat) {\n      this.timeoutOrIntervalId = setInterval(this.callback, this.delay);\n    } else {\n      this.timeoutOrIntervalId = setTimeout(() => {\n        this.active = false;\n        this.callback();\n      }, this.delay);\n    }\n    this.active = true;\n  }\n\n  isActive(): boolean {\n    return this.active;\n  }\n\n  private clearInternal(): void {\n    if (this.repeat) {\n      clearInterval(this.timeoutOrIntervalId);\n    } else {\n      clearTimeout(this.timeoutOrIntervalId);\n    }\n    this.active = false;\n  }\n}","import { SubtitleOverlay } from './components/subtitleoverlay';\nimport { SettingsPanelPage } from './components/settingspanelpage';\nimport { SettingsPanelItem } from './components/settingspanelitem';\nimport { VideoQualitySelectBox } from './components/videoqualityselectbox';\nimport { PlaybackSpeedSelectBox } from './components/playbackspeedselectbox';\nimport { AudioTrackSelectBox } from './components/audiotrackselectbox';\nimport { AudioQualitySelectBox } from './components/audioqualityselectbox';\nimport { SettingsPanel } from './components/settingspanel';\nimport { SubtitleSettingsPanelPage } from './components/subtitlesettings/subtitlesettingspanelpage';\nimport { SettingsPanelPageOpenButton } from './components/settingspanelpageopenbutton';\nimport { SubtitleSettingsLabel } from './components/subtitlesettings/subtitlesettingslabel';\nimport { SubtitleSelectBox } from './components/subtitleselectbox';\nimport { ControlBar } from './components/controlbar';\nimport { Container } from './components/container';\nimport { PlaybackTimeLabel, PlaybackTimeLabelMode } from './components/playbacktimelabel';\nimport { SeekBar } from './components/seekbar';\nimport { SeekBarLabel } from './components/seekbarlabel';\nimport { PlaybackToggleButton } from './components/playbacktogglebutton';\nimport { VolumeToggleButton } from './components/volumetogglebutton';\nimport { VolumeSlider } from './components/volumeslider';\nimport { Spacer } from './components/spacer';\nimport { PictureInPictureToggleButton } from './components/pictureinpicturetogglebutton';\nimport { AirPlayToggleButton } from './components/airplaytogglebutton';\nimport { CastToggleButton } from './components/casttogglebutton';\nimport { VRToggleButton } from './components/vrtogglebutton';\nimport { SettingsToggleButton } from './components/settingstogglebutton';\nimport { FullscreenToggleButton } from './components/fullscreentogglebutton';\nimport { UIContainer } from './components/uicontainer';\nimport { BufferingOverlay } from './components/bufferingoverlay';\nimport { PlaybackToggleOverlay } from './components/playbacktoggleoverlay';\nimport { CastStatusOverlay } from './components/caststatusoverlay';\nimport { TitleBar } from './components/titlebar';\nimport { RecommendationOverlay } from './components/recommendationoverlay';\nimport { Watermark } from './components/watermark';\nimport { ErrorMessageOverlay } from './components/errormessageoverlay';\nimport { AdClickOverlay } from './components/adclickoverlay';\nimport { AdMessageLabel } from './components/admessagelabel';\nimport { AdSkipButton } from './components/adskipbutton';\nimport { CloseButton } from './components/closebutton';\nimport { MetadataLabel, MetadataLabelContent } from './components/metadatalabel';\nimport { PlayerUtils } from './playerutils';\nimport { Label } from './components/label';\nimport { CastUIContainer } from './components/castuicontainer';\nimport { UIConditionContext, UIManager } from './uimanager';\nimport { UIConfig } from './uiconfig';\nimport { PlayerAPI } from 'bitmovin-player';\nimport { i18n } from './localization/i18n';\n\nexport namespace UIFactory {\n\n  export function buildDefaultUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernUI(player, config);\n  }\n\n  export function buildDefaultSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernSmallScreenUI(player, config);\n  }\n\n  export function buildDefaultCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return UIFactory.buildModernCastReceiverUI(player, config);\n  }\n\n  export function modernUI() {\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(\n          'Resolução',\n          new VideoQualitySelectBox(),\n        ),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [mainSettingsPanelPage],\n      hidden: true,\n    });\n\n    let newControlBar = new ControlBar({\n      components: [\n        settingsPanel,\n        new Container({\n          components: [new SeekBar()],\n          cssClasses: [],\n        }),\n        new Container({\n          components: [\n            new PlaybackTimeLabel({\n              timeLabelMode: PlaybackTimeLabelMode.TotalTime,\n              cssClasses: ['text-right'],\n            }),\n            new PlaybackToggleButton(),\n            new VolumeToggleButton(),\n            new VolumeSlider(),\n            new Spacer(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new CastToggleButton(),\n            new FullscreenToggleButton(),\n          ],\n          cssClasses: ['controlbar-bottom'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay({\n          hidden: true,\n        }),\n        new CastStatusOverlay(),\n        newControlBar,\n        new Watermark({\n          url: 'https://www.sympla.com.br',\n        }),\n        new ErrorMessageOverlay(),\n      ],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: i18n.getLocalizer('ads.remainingTime') }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n        new ControlBar({\n          components: [\n            new Container({\n              components: [\n                new PlaybackToggleButton(),\n                new VolumeToggleButton(),\n                new VolumeSlider(),\n                new Spacer(),\n                new FullscreenToggleButton(),\n              ],\n              cssClasses: ['controlbar-bottom'],\n            }),\n          ],\n        }),\n      ],\n      cssClasses: ['ui-skin-ads'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenUI() {\n    let subtitleOverlay = new SubtitleOverlay();\n\n    let mainSettingsPanelPage = new SettingsPanelPage({\n      components: [\n        new SettingsPanelItem(i18n.getLocalizer('settings.video.quality'), new VideoQualitySelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('speed'), new PlaybackSpeedSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.track'), new AudioTrackSelectBox()),\n        new SettingsPanelItem(i18n.getLocalizer('settings.audio.quality'), new AudioQualitySelectBox()),\n      ],\n    });\n\n    let settingsPanel = new SettingsPanel({\n      components: [\n        mainSettingsPanelPage,\n      ],\n      hidden: true,\n      pageTransitionAnimation: false,\n      hideDelay: -1,\n    });\n\n    let subtitleSettingsPanelPage = new SubtitleSettingsPanelPage({\n      settingsPanel: settingsPanel,\n      overlay: subtitleOverlay,\n    });\n\n    let subtitleSettingsOpenButton = new SettingsPanelPageOpenButton({\n      targetPage: subtitleSettingsPanelPage,\n      container: settingsPanel,\n      ariaLabel: i18n.getLocalizer('settings.subtitles'),\n      text: i18n.getLocalizer('open'),\n    });\n\n    const subtitleSelectBox = new SubtitleSelectBox();\n\n    mainSettingsPanelPage.addComponent(\n      new SettingsPanelItem(\n        new SubtitleSettingsLabel({\n          text: i18n.getLocalizer('settings.subtitles'),\n          opener: subtitleSettingsOpenButton,\n        }),\n        subtitleSelectBox,\n        {\n          role: 'menubar',\n        },\n      ));\n\n    settingsPanel.addComponent(subtitleSettingsPanelPage);\n\n    settingsPanel.addComponent(new CloseButton({ target: settingsPanel }));\n    subtitleSettingsPanelPage.addComponent(new CloseButton({ target: settingsPanel }));\n\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ label: new SeekBarLabel() }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new UIContainer({\n      components: [\n        subtitleOverlay,\n        new BufferingOverlay(),\n        new CastStatusOverlay(),\n        new PlaybackToggleOverlay(),\n        new RecommendationOverlay(),\n        controlBar,\n        new TitleBar({\n          components: [\n            new MetadataLabel({ content: MetadataLabelContent.Title }),\n            new CastToggleButton(),\n            new VRToggleButton(),\n            new PictureInPictureToggleButton(),\n            new AirPlayToggleButton(),\n            new VolumeToggleButton(),\n            new SettingsToggleButton({ settingsPanel: settingsPanel }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        settingsPanel,\n        new Watermark(),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernSmallScreenAdsUI() {\n    return new UIContainer({\n      components: [\n        new BufferingOverlay(),\n        new AdClickOverlay(),\n        new PlaybackToggleOverlay(),\n        new TitleBar({\n          components: [\n            // dummy label with no content to move buttons to the right\n            new Label({ cssClass: 'label-metadata-title' }),\n            new FullscreenToggleButton(),\n          ],\n        }),\n        new Container({\n          components: [\n            new AdMessageLabel({ text: 'Ad: {remainingTime} secs' }),\n            new AdSkipButton(),\n          ],\n          cssClass: 'ui-ads-status',\n        }),\n      ],\n      cssClasses: ['ui-skin-ads', 'ui-skin-smallscreen'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function modernCastReceiverUI() {\n    let controlBar = new ControlBar({\n      components: [\n        new Container({\n          components: [\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.CurrentTime, hideInLivePlayback: true }),\n            new SeekBar({ smoothPlaybackPositionUpdateIntervalMs: -1 }),\n            new PlaybackTimeLabel({ timeLabelMode: PlaybackTimeLabelMode.TotalTime, cssClasses: ['text-right'] }),\n          ],\n          cssClasses: ['controlbar-top'],\n        }),\n      ],\n    });\n\n    return new CastUIContainer({\n      components: [\n        new SubtitleOverlay(),\n        new BufferingOverlay(),\n        new PlaybackToggleOverlay(),\n        new Watermark(),\n        controlBar,\n        new TitleBar({ keepHiddenWithoutMetadata: true }),\n        new ErrorMessageOverlay(),\n      ],\n      cssClasses: ['ui-skin-cast-receiver'],\n      hideDelay: 2000,\n      hidePlayerStateExceptions: [\n        PlayerUtils.PlayerState.Prepared,\n        PlayerUtils.PlayerState.Paused,\n        PlayerUtils.PlayerState.Finished,\n      ],\n    });\n  }\n\n  export function buildModernUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    // show smallScreen UI only on mobile/handheld devices\n    let smallScreenSwitchWidth = 600;\n\n    return new UIManager(player, [{\n      ui: modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isMobile && context.documentWidth < smallScreenSwitchWidth && context.isAd\n          && context.adRequiresUi;\n      },\n    }, {\n      ui: modernAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi && context.isMobile\n          && context.documentWidth < smallScreenSwitchWidth;\n      },\n    }, {\n      ui: modernUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi;\n      },\n    }], config);\n  }\n\n  export function buildModernSmallScreenUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(player, [{\n      ui: modernSmallScreenAdsUI(),\n      condition: (context: UIConditionContext) => {\n        return context.isAd && context.adRequiresUi;\n      },\n    }, {\n      ui: modernSmallScreenUI(),\n      condition: (context: UIConditionContext) => {\n        return !context.isAd && !context.adRequiresUi;\n      },\n    }], config);\n  }\n\n  export function buildModernCastReceiverUI(player: PlayerAPI, config: UIConfig = {}): UIManager {\n    return new UIManager(player, modernCastReceiverUI(), config);\n  }\n}\n","import {UIContainer} from './components/uicontainer';\nimport {DOM} from './dom';\nimport {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\nimport { SeekBar, SeekBarMarker } from './components/seekbar';\nimport {NoArgs, EventDispatcher, CancelEventArgs} from './eventdispatcher';\nimport {UIUtils} from './uiutils';\nimport {ArrayUtils} from './arrayutils';\nimport {BrowserUtils} from './browserutils';\nimport { TimelineMarker, UIConfig } from './uiconfig';\nimport { PlayerAPI, PlayerEventCallback, PlayerEventBase, PlayerEvent, AdEvent, LinearAd } from 'bitmovin-player';\nimport { VolumeController } from './volumecontroller';\nimport { i18n, CustomVocabulary, Vocabularies } from './localization/i18n';\nimport { FocusVisibilityTracker } from './focusvisibilitytracker';\nimport { isMobileV3PlayerAPI, MobileV3PlayerAPI, MobileV3PlayerEvent } from './mobilev3playerapi';\n\nexport interface LocalizationConfig {\n  /**\n   * Sets the desired language, and falls back to 'en' if there is no vocabulary for the desired language. Setting it\n   * to \"auto\" will enable language detection from the browser's locale.\n   */\n  language?: 'auto' | 'en' | 'de' | string;\n  /**\n   * A map of `language` to {@link CustomVocabulary} definitions. Can be used to overwrite default translations and add\n   * custom strings or additional languages.\n   */\n  vocabularies?: Vocabularies;\n}\n\nexport interface InternalUIConfig extends UIConfig {\n  events: {\n    /**\n     * Fires when the configuration has been updated/changed.\n     */\n    onUpdated: EventDispatcher<UIManager, void>;\n  };\n  volumeController: VolumeController;\n}\n\n/**\n * The context that will be passed to a {@link UIConditionResolver} to determine if it's conditions fulfil the context.\n */\nexport interface UIConditionContext {\n  /**\n   * Tells if the player is loading or playing an ad.\n   */\n  isAd: boolean;\n  /**\n   * Tells if the current ad requires an external UI, if {@link #isAd} is true.\n   */\n  adRequiresUi: boolean;\n  /**\n   * Tells if the player is currently in fullscreen mode.\n   */\n  isFullscreen: boolean;\n  /**\n   * Tells if the UI is running in a mobile browser.\n   */\n  isMobile: boolean;\n  /**\n   * Tells if the player is in playing or paused state.\n   */\n  isPlaying: boolean;\n  /**\n   * The width of the player/UI element.\n   */\n  width: number;\n  /**\n   * The width of the document where the player/UI is embedded in.\n   */\n  documentWidth: number;\n}\n\n/**\n * Resolves the conditions of its associated UI in a {@link UIVariant} upon a {@link UIConditionContext} and decides\n * if the UI should be displayed. If it returns true, the UI is a candidate for display; if it returns false, it will\n * not be displayed in the given context.\n */\nexport interface UIConditionResolver {\n  (context: UIConditionContext): boolean;\n}\n\n/**\n * Associates a UI instance with an optional {@link UIConditionResolver} that determines if the UI should be displayed.\n */\nexport interface UIVariant {\n  ui: UIContainer;\n  condition?: UIConditionResolver;\n}\n\nexport class UIManager {\n\n  private player: PlayerAPI;\n  private uiContainerElement: DOM;\n  private uiVariants: UIVariant[];\n  private uiInstanceManagers: InternalUIInstanceManager[];\n  private currentUi: InternalUIInstanceManager;\n  private config: InternalUIConfig; // Conjunction of provided uiConfig and sourceConfig from the player\n  private managerPlayerWrapper: PlayerWrapper;\n  private focusVisibilityTracker: FocusVisibilityTracker;\n\n  private events = {\n    onUiVariantResolve: new EventDispatcher<UIManager, UIConditionContext>(),\n  };\n\n  /**\n   * Creates a UI manager with a single UI variant that will be permanently shown.\n   * @param player the associated player of this UI\n   * @param ui the UI to add to the player\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, ui: UIContainer, uiconfig?: UIConfig);\n  /**\n   * Creates a UI manager with a list of UI variants that will be dynamically selected and switched according to\n   * the context of the UI.\n   *\n   * Every time the UI context changes, the conditions of the UI variants will be sequentially resolved and the first\n   * UI, whose condition evaluates to true, will be selected and displayed. The last variant in the list might omit the\n   * condition resolver and will be selected as default/fallback UI when all other conditions fail. If there is no\n   * fallback UI and all conditions fail, no UI will be displayed.\n   *\n   * @param player the associated player of this UI\n   * @param uiVariants a list of UI variants that will be dynamically switched\n   * @param uiconfig optional UI configuration\n   */\n  constructor(player: PlayerAPI, uiVariants: UIVariant[], uiconfig?: UIConfig);\n  constructor(player: PlayerAPI, playerUiOrUiVariants: UIContainer | UIVariant[], uiconfig: UIConfig = {}) {\n    if (playerUiOrUiVariants instanceof UIContainer) {\n      // Single-UI constructor has been called, transform arguments to UIVariant[] signature\n      let playerUi = <UIContainer>playerUiOrUiVariants;\n      let uiVariants = [];\n\n      // Add the default player UI\n      uiVariants.push({ ui: playerUi });\n\n      this.uiVariants = uiVariants;\n    }\n    else {\n      // Default constructor (UIVariant[]) has been called\n      this.uiVariants = <UIVariant[]>playerUiOrUiVariants;\n    }\n\n    this.player = player;\n    this.managerPlayerWrapper = new PlayerWrapper(player);\n\n    // ensure that at least the metadata object does exist in the uiconfig\n    uiconfig.metadata = uiconfig.metadata ? uiconfig.metadata : {};\n\n    this.config = {\n      playbackSpeedSelectionEnabled: true, // Switch on speed selector by default\n      autoUiVariantResolve: true, // Switch on auto UI resolving by default\n      disableAutoHideWhenHovered: false, // Disable auto hide when UI is hovered\n      enableSeekPreview: true,\n      ...uiconfig,\n      events: {\n        onUpdated: new EventDispatcher<UIManager, void>(),\n      },\n      volumeController: new VolumeController(this.managerPlayerWrapper.getPlayer()),\n    };\n\n    /**\n     * Gathers configuration data from the UI config and player source config and creates a merged UI config\n     * that is used throughout the UI instance.\n     */\n    const updateConfig = () => {\n      const playerSourceConfig = player.getSource() || {};\n      this.config.metadata = JSON.parse(JSON.stringify(uiconfig.metadata || {}));\n\n      // Extract the UI-related config properties from the source config\n      const playerSourceUiConfig: UIConfig = {\n        metadata: {\n          // TODO move metadata into source.metadata namespace in player v8\n          title: playerSourceConfig.title,\n          description: playerSourceConfig.description,\n          markers: (playerSourceConfig as any).markers,\n        },\n        recommendations: (playerSourceConfig as any).recommendations,\n      };\n\n      // Player source config takes precedence over the UI config, because the config in the source is attached\n      // to a source which changes with every player.load, whereas the UI config stays the same for the whole\n      // lifetime of the player instance.\n      this.config.metadata.title = playerSourceUiConfig.metadata.title || uiconfig.metadata.title;\n      this.config.metadata.description = playerSourceUiConfig.metadata.description || uiconfig.metadata.description;\n      this.config.metadata.markers = playerSourceUiConfig.metadata.markers || uiconfig.metadata.markers || [];\n      this.config.recommendations = playerSourceUiConfig.recommendations || uiconfig.recommendations || [];\n    };\n\n    updateConfig();\n\n    // Update the source configuration when a new source is loaded and dispatch onUpdated\n    const updateSource = () => {\n      updateConfig();\n      this.config.events.onUpdated.dispatch(this);\n    };\n\n    const wrappedPlayer = this.managerPlayerWrapper.getPlayer();\n\n    wrappedPlayer.on(this.player.exports.PlayerEvent.SourceLoaded, updateSource);\n\n    // The PlaylistTransition event is only available on Mobile v3 for now.\n    // This event is fired when a new source becomes active in the player.\n    if (isMobileV3PlayerAPI(wrappedPlayer)) {\n      wrappedPlayer.on(MobileV3PlayerEvent.PlaylistTransition, updateSource);\n    }\n\n    if (uiconfig.container) {\n      // Unfortunately \"uiContainerElement = new DOM(config.container)\" will not accept the container with\n      // string|HTMLElement type directly, although it accepts both types, so we need to spit these two cases up here.\n      // TODO check in upcoming TS versions if the container can be passed in directly, or fix the constructor\n      this.uiContainerElement = uiconfig.container instanceof HTMLElement ?\n        new DOM(uiconfig.container) : new DOM(uiconfig.container);\n    } else {\n      this.uiContainerElement = new DOM(player.getContainer());\n    }\n\n    // Create UI instance managers for the UI variants\n    // The instance managers map to the corresponding UI variants by their array index\n    this.uiInstanceManagers = [];\n    let uiVariantsWithoutCondition = [];\n    for (let uiVariant of this.uiVariants) {\n      if (uiVariant.condition == null) {\n        // Collect variants without conditions for error checking\n        uiVariantsWithoutCondition.push(uiVariant);\n      }\n      // Create the instance manager for a UI variant\n      this.uiInstanceManagers.push(new InternalUIInstanceManager(player, uiVariant.ui, this.config));\n    }\n    // Make sure that there is only one UI variant without a condition\n    // It does not make sense to have multiple variants without condition, because only the first one in the list\n    // (the one with the lowest index) will ever be selected.\n    if (uiVariantsWithoutCondition.length > 1) {\n      throw Error('Too many UIs without a condition: You cannot have more than one default UI');\n    }\n    // Make sure that the default UI variant, if defined, is at the end of the list (last index)\n    // If it comes earlier, the variants with conditions that come afterwards will never be selected because the\n    // default variant without a condition always evaluates to 'true'\n    if (uiVariantsWithoutCondition.length > 0\n      && uiVariantsWithoutCondition[0] !== this.uiVariants[this.uiVariants.length - 1]) {\n      throw Error('Invalid UI variant order: the default UI (without condition) must be at the end of the list');\n    }\n\n    let adStartedEvent: AdEvent = null; // keep the event stored here during ad playback\n\n    // Dynamically select a UI variant that matches the current UI condition.\n    let resolveUiVariant = (event: PlayerEventBase) => {\n      // Make sure that the AdStarted event data is persisted through ad playback in case other events happen\n      // in the meantime, e.g. player resize. We need to store this data because there is no other way to find out\n      // ad details while an ad is playing (in v8.0 at least; from v8.1 there will be ads.getActiveAd()).\n      // Existing event data signals that an ad is currently active (instead of ads.isLinearAdActive()).\n      if (event != null) {\n        switch (event.type) {\n          // The ads UI is shown upon the first AdStarted event. Subsequent AdStarted events within an ad break\n          // will not change the condition context and thus not lead to undesired UI variant resolving.\n          // The ads UI is shown upon AdStarted instead of AdBreakStarted because there can be a loading delay\n          // between these two events in the player, and the AdBreakStarted event does not carry any metadata to\n          // initialize the ads UI, so it would be rendered in an uninitialized state for a certain amount of time.\n          // TODO show ads UI upon AdBreakStarted and display loading overlay between AdBreakStarted and first AdStarted\n          // TODO display loading overlay between AdFinished and next AdStarted\n          case player.exports.PlayerEvent.AdStarted:\n            adStartedEvent = event as AdEvent;\n            break;\n          // The ads UI is hidden only when the ad break is finished, i.e. not on AdFinished events. This way we keep\n          // the ads UI variant active throughout an ad break, as reacting to AdFinished would lead to undesired UI\n          // variant switching between two ads in an ad break, e.g. ads UI -> AdFinished -> content UI ->\n          // AdStarted -> ads UI.\n          case player.exports.PlayerEvent.AdBreakFinished:\n            adStartedEvent = null;\n            // When switching to a variant for the first time, a config.events.onUpdated event is fired to trigger a UI\n            // update of the new variant, because most components subscribe to this event to update themselves. When\n            // switching to the ads UI on the first AdStarted, all UI variants update themselves with the ad data, so\n            // when switching back to the \"normal\" UI it will carry properties of the ad instead of the main content.\n            // We thus fire this event here to force an UI update with the properties of the main content. This is\n            // basically a hack because the config.events.onUpdated event is abused in many places and not just used\n            // for config updates (e.g. adding a marker to the seekbar).\n            // TODO introduce an event that is fired when the playback content is updated, a switch to/from ads\n            this.config.events.onUpdated.dispatch(this);\n            break;\n          // When a new source is loaded during ad playback, there will be no Ad(Break)Finished event\n          case player.exports.PlayerEvent.SourceLoaded:\n          case player.exports.PlayerEvent.SourceUnloaded:\n            adStartedEvent = null;\n            break;\n        }\n      }\n\n      // Detect if an ad has started\n      let isAd = adStartedEvent != null;\n      let adRequiresUi = false;\n      if (isAd) {\n        let ad = adStartedEvent.ad;\n        // for now only linear ads can request a UI\n        if (ad.isLinear) {\n          let linearAd = ad as LinearAd;\n          adRequiresUi = linearAd.uiConfig && linearAd.uiConfig.requestsUi || false;\n        }\n      }\n\n      if (adRequiresUi) {\n        // we dispatch onUpdated event because if there are multiple adBreaks for same position\n        // `Play` and `Playing` events will not be dispatched which will cause `PlaybackButton` state\n        // to be out of sync\n        this.config.events.onUpdated.dispatch(this);\n      }\n\n      this.resolveUiVariant({\n        isAd: isAd,\n        adRequiresUi: adRequiresUi,\n      }, (context) => {\n        // If this is an ad UI, we need to relay the saved ON_AD_STARTED event data so ad components can configure\n        // themselves for the current ad.\n        if (context.isAd) {\n          /* Relay the ON_AD_STARTED event to the ads UI\n           *\n           * Because the ads UI is initialized in the ON_AD_STARTED handler, i.e. when the ON_AD_STARTED event has\n           * already been fired, components in the ads UI that listen for the ON_AD_STARTED event never receive it.\n           * Since this can break functionality of components that rely on this event, we relay the event to the\n           * ads UI components with the following call.\n           */\n          this.currentUi.getWrappedPlayer().fireEventInUI(this.player.exports.PlayerEvent.AdStarted, adStartedEvent);\n        }\n      });\n    };\n\n    // Listen to the following events to trigger UI variant resolution\n    if (this.config.autoUiVariantResolve) {\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceLoaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.SourceUnloaded, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Play, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.Paused, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdStarted, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.AdBreakFinished, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.PlayerResized, resolveUiVariant);\n      this.managerPlayerWrapper.getPlayer().on(this.player.exports.PlayerEvent.ViewModeChanged, resolveUiVariant);\n    }\n\n    this.focusVisibilityTracker = new FocusVisibilityTracker('{{PREFIX}}');\n\n    // Initialize the UI\n    resolveUiVariant(null);\n  }\n\n  /**\n   * Exposes i18n.getLocalizer() function\n   * @returns {I18nApi.getLocalizer()}\n   */\n  static localize<V extends CustomVocabulary<Record<string, string>>>(key: keyof V) {\n    return i18n.getLocalizer(key);\n  }\n\n  /**\n   * Provide configuration to support Custom UI languages\n   * default language: 'en'\n   */\n  static setLocalizationConfig(localizationConfig: LocalizationConfig) {\n    i18n.setConfig(localizationConfig);\n  }\n\n  getConfig(): UIConfig {\n    return this.config;\n  }\n\n  /**\n   * Returns the list of UI variants as passed into the constructor of {@link UIManager}.\n   * @returns {UIVariant[]} the list of available UI variants\n   */\n  getUiVariants(): UIVariant[] {\n    return this.uiVariants;\n  }\n\n  /**\n   * Switches to a UI variant from the list returned by {@link getUiVariants}.\n   * @param {UIVariant} uiVariant the UI variant to switch to\n   * @param {() => void} onShow a callback that is executed just before the new UI variant is shown\n   */\n  switchToUiVariant(uiVariant: UIVariant, onShow?: () => void): void {\n    let uiVariantIndex = this.uiVariants.indexOf(uiVariant);\n\n    const nextUi: InternalUIInstanceManager = this.uiInstanceManagers[uiVariantIndex];\n    let uiVariantChanged = false;\n\n    // Determine if the UI variant is changing\n    if (nextUi !== this.currentUi) {\n      uiVariantChanged = true;\n      // console.log('switched from ', this.currentUi ? this.currentUi.getUI() : 'none',\n      //   ' to ', nextUi ? nextUi.getUI() : 'none');\n    }\n\n    // Only if the UI variant is changing, we need to do some stuff. Else we just leave everything as-is.\n    if (uiVariantChanged) {\n      // Hide the currently active UI variant\n      if (this.currentUi) {\n        this.currentUi.getUI().hide();\n      }\n\n      // Assign the new UI variant as current UI\n      this.currentUi = nextUi;\n\n      // When we switch to a different UI instance, there's some additional stuff to manage. If we do not switch\n      // to an instance, we're done here.\n      if (this.currentUi != null) {\n        // Add the UI to the DOM (and configure it) the first time it is selected\n        if (!this.currentUi.isConfigured()) {\n          this.addUi(this.currentUi);\n        }\n\n        if (onShow) {\n          onShow();\n        }\n\n        this.currentUi.getUI().show();\n      }\n    }\n  }\n\n  /**\n   * Triggers a UI variant switch as triggered by events when automatic switching is enabled. It allows to overwrite\n   * properties of the {@link UIConditionContext}.\n   * @param {Partial<UIConditionContext>} context an optional set of properties that overwrite properties of the\n   *   automatically determined context\n   * @param {(context: UIConditionContext) => void} onShow a callback that is executed just before the new UI variant\n   *   is shown (if a switch is happening)\n   */\n  resolveUiVariant(context: Partial<UIConditionContext> = {}, onShow?: (context: UIConditionContext) => void): void {\n    // Determine the current context for which the UI variant will be resolved\n    const defaultContext: UIConditionContext = {\n      isAd: false,\n      adRequiresUi: false,\n      isFullscreen: this.player.getViewMode() === this.player.exports.ViewMode.Fullscreen,\n      isMobile: BrowserUtils.isMobile,\n      isPlaying: this.player.isPlaying(),\n      width: this.uiContainerElement.width(),\n      documentWidth: document.body.clientWidth,\n    };\n\n    // Overwrite properties of the default context with passed in context properties\n    const switchingContext = { ...defaultContext, ...context };\n\n    // Fire the event and allow modification of the context before it is used to resolve the UI variant\n    this.events.onUiVariantResolve.dispatch(this, switchingContext);\n\n    let nextUiVariant: UIVariant = null;\n\n    // Select new UI variant\n    // If no variant condition is fulfilled, we switch to *no* UI\n    for (let uiVariant of this.uiVariants) {\n      if (uiVariant.condition == null || uiVariant.condition(switchingContext) === true) {\n        nextUiVariant = uiVariant;\n        break;\n      }\n    }\n\n    this.switchToUiVariant(nextUiVariant, () => {\n      if (onShow) {\n        onShow(switchingContext);\n      }\n    });\n  }\n\n  private addUi(ui: InternalUIInstanceManager): void {\n    let dom = ui.getUI().getDomElement();\n    let player = ui.getWrappedPlayer();\n\n    ui.configureControls();\n    /* Append the UI DOM after configuration to avoid CSS transitions at initialization\n     * Example: Components are hidden during configuration and these hides may trigger CSS transitions that are\n     * undesirable at this time. */\n    this.uiContainerElement.append(dom);\n\n    // When the UI is loaded after a source was loaded, we need to tell the components to initialize themselves\n    if (player.getSource()) {\n      this.config.events.onUpdated.dispatch(this);\n    }\n\n    // Fire onConfigured after UI DOM elements are successfully added. When fired immediately, the DOM elements\n    // might not be fully configured and e.g. do not have a size.\n    // https://swizec.com/blog/how-to-properly-wait-for-dom-elements-to-show-up-in-modern-browsers/swizec/6663\n    if (window.requestAnimationFrame) {\n      requestAnimationFrame(() => { ui.onConfigured.dispatch(ui.getUI()); });\n    } else {\n      // IE9 fallback\n      setTimeout(() => { ui.onConfigured.dispatch(ui.getUI()); }, 0);\n    }\n  }\n\n  private releaseUi(ui: InternalUIInstanceManager): void {\n    ui.releaseControls();\n    ui.getUI().getDomElement().remove();\n    ui.clearEventHandlers();\n  }\n\n  release(): void {\n    for (let uiInstanceManager of this.uiInstanceManagers) {\n      this.releaseUi(uiInstanceManager);\n    }\n    this.managerPlayerWrapper.clearEventHandlers();\n    this.focusVisibilityTracker.release();\n  }\n\n  /**\n   * Fires just before UI variants are about to be resolved and the UI variant is possibly switched. It is fired when\n   * the switch is triggered from an automatic switch and when calling {@link resolveUiVariant}.\n   * Can be used to modify the {@link UIConditionContext} before resolving is done.\n   * @returns {EventDispatcher<UIManager, UIConditionContext>}\n   */\n  get onUiVariantResolve(): EventDispatcher<UIManager, UIConditionContext> {\n    return this.events.onUiVariantResolve;\n  }\n\n  /**\n   * Returns the list of all added markers in undefined order.\n   */\n  getTimelineMarkers(): TimelineMarker[] {\n    return this.config.metadata.markers;\n  }\n\n  /**\n   * Adds a marker to the timeline. Does not check for duplicates/overlaps at the `time`.\n   */\n  addTimelineMarker(timelineMarker: TimelineMarker): void {\n    this.config.metadata.markers.push(timelineMarker);\n    this.config.events.onUpdated.dispatch(this);\n  }\n\n  /**\n   * Removes a marker from the timeline (by reference) and returns `true` if the marker has\n   * been part of the timeline and successfully removed, or `false` if the marker could not\n   * be found and thus not removed.\n   */\n  removeTimelineMarker(timelineMarker: TimelineMarker): boolean {\n    if (ArrayUtils.remove(this.config.metadata.markers, timelineMarker) === timelineMarker) {\n      this.config.events.onUpdated.dispatch(this);\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport interface SeekPreviewArgs extends NoArgs {\n  /**\n   * The timeline position in percent where the event originates from.\n   */\n  position: number;\n  /**\n   * The timeline marker associated with the current position, if existing.\n   */\n  marker?: SeekBarMarker;\n}\n\n/**\n * Encapsulates functionality to manage a UI instance. Used by the {@link UIManager} to manage multiple UI instances.\n */\nexport class UIInstanceManager {\n  private playerWrapper: PlayerWrapper;\n  private ui: UIContainer;\n  private config: InternalUIConfig;\n\n  private events = {\n    onConfigured: new EventDispatcher<UIContainer, NoArgs>(),\n    onSeek: new EventDispatcher<SeekBar, NoArgs>(),\n    onSeekPreview: new EventDispatcher<SeekBar, SeekPreviewArgs>(),\n    onSeeked: new EventDispatcher<SeekBar, NoArgs>(),\n    onComponentShow: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onComponentHide: new EventDispatcher<Component<ComponentConfig>, NoArgs>(),\n    onControlsShow: new EventDispatcher<UIContainer, NoArgs>(),\n    onPreviewControlsHide: new EventDispatcher<UIContainer, CancelEventArgs>(),\n    onControlsHide: new EventDispatcher<UIContainer, NoArgs>(),\n    onRelease: new EventDispatcher<UIContainer, NoArgs>(),\n  };\n\n  constructor(player: PlayerAPI, ui: UIContainer, config: InternalUIConfig) {\n    this.playerWrapper = new PlayerWrapper(player);\n    this.ui = ui;\n    this.config = config;\n  }\n\n  getConfig(): InternalUIConfig {\n    return this.config;\n  }\n\n  getUI(): UIContainer {\n    return this.ui;\n  }\n\n  getPlayer(): PlayerAPI {\n    return this.playerWrapper.getPlayer();\n  }\n\n  /**\n   * Fires when the UI is fully configured and added to the DOM.\n   * @returns {EventDispatcher}\n   */\n  get onConfigured(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onConfigured;\n  }\n\n  /**\n   * Fires when a seek starts.\n   * @returns {EventDispatcher}\n   */\n  get onSeek(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeek;\n  }\n\n  /**\n   * Fires when the seek timeline is scrubbed.\n   * @returns {EventDispatcher}\n   */\n  get onSeekPreview(): EventDispatcher<SeekBar, SeekPreviewArgs> {\n    return this.events.onSeekPreview;\n  }\n\n  /**\n   * Fires when a seek is finished.\n   * @returns {EventDispatcher}\n   */\n  get onSeeked(): EventDispatcher<SeekBar, NoArgs> {\n    return this.events.onSeeked;\n  }\n\n  /**\n   * Fires when a component is showing.\n   * @returns {EventDispatcher}\n   */\n  get onComponentShow(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentShow;\n  }\n\n  /**\n   * Fires when a component is hiding.\n   * @returns {EventDispatcher}\n   */\n  get onComponentHide(): EventDispatcher<Component<ComponentConfig>, NoArgs> {\n    return this.events.onComponentHide;\n  }\n\n  /**\n   * Fires when the UI controls are showing.\n   * @returns {EventDispatcher}\n   */\n  get onControlsShow(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsShow;\n  }\n\n  /**\n   * Fires before the UI controls are hiding to check if they are allowed to hide.\n   * @returns {EventDispatcher}\n   */\n  get onPreviewControlsHide(): EventDispatcher<UIContainer, CancelEventArgs> {\n    return this.events.onPreviewControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are hiding.\n   * @returns {EventDispatcher}\n   */\n  get onControlsHide(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onControlsHide;\n  }\n\n  /**\n   * Fires when the UI controls are released.\n   * @returns {EventDispatcher}\n   */\n  get onRelease(): EventDispatcher<UIContainer, NoArgs> {\n    return this.events.onRelease;\n  }\n\n  protected clearEventHandlers(): void {\n    this.playerWrapper.clearEventHandlers();\n\n    let events = <any>this.events; // avoid TS7017\n    for (let event in events) {\n      let dispatcher = <EventDispatcher<Object, Object>>events[event];\n      dispatcher.unsubscribeAll();\n    }\n  }\n}\n\n/**\n * Extends the {@link UIInstanceManager} for internal use in the {@link UIManager} and provides access to functionality\n * that components receiving a reference to the {@link UIInstanceManager} should not have access to.\n */\nclass InternalUIInstanceManager extends UIInstanceManager {\n\n  private configured: boolean;\n  private released: boolean;\n\n  getWrappedPlayer(): WrappedPlayer {\n    // TODO find a non-hacky way to provide the WrappedPlayer to the UIManager without exporting it\n    // getPlayer() actually returns the WrappedPlayer but its return type is set to Player so the WrappedPlayer does\n    // not need to be exported\n    return <WrappedPlayer>this.getPlayer();\n  }\n\n  configureControls(): void {\n    this.configureControlsTree(this.getUI());\n    this.configured = true;\n  }\n\n  isConfigured(): boolean {\n    return this.configured;\n  }\n\n  private configureControlsTree(component: Component<ComponentConfig>) {\n    let configuredComponents: Component<ComponentConfig>[] = [];\n\n    UIUtils.traverseTree(component, (component) => {\n      // First, check if we have already configured a component, and throw an error if we did. Multiple configuration\n      // of the same component leads to unexpected UI behavior. Also, a component that is in the UI tree multiple\n      // times hints at a wrong UI structure.\n      // We could just skip configuration in such a case and not throw an exception, but enforcing a clean UI tree\n      // seems like the better choice.\n      for (let configuredComponent of configuredComponents) {\n        if (configuredComponent === component) {\n          // Write the component to the console to simplify identification of the culprit\n          // (e.g. by inspecting the config)\n          if (console) {\n            console.error('Circular reference in UI tree', component);\n          }\n\n          // Additionally throw an error, because this case must not happen and leads to unexpected UI behavior.\n          throw Error('Circular reference in UI tree: ' + component.constructor.name);\n        }\n      }\n\n      component.initialize();\n      component.configure(this.getPlayer(), this);\n      configuredComponents.push(component);\n    });\n  }\n\n  releaseControls(): void {\n    // Do not call release methods if the components have never been configured; this can result in exceptions\n    if (this.configured) {\n      this.onRelease.dispatch(this.getUI());\n      this.releaseControlsTree(this.getUI());\n      this.configured = false;\n    }\n    this.released = true;\n  }\n\n  isReleased(): boolean {\n    return this.released;\n  }\n\n  private releaseControlsTree(component: Component<ComponentConfig>) {\n    component.release();\n\n    if (component instanceof Container) {\n      for (let childComponent of component.getComponents()) {\n        this.releaseControlsTree(childComponent);\n      }\n    }\n  }\n\n  clearEventHandlers(): void {\n    super.clearEventHandlers();\n  }\n}\n\n/**\n * Extended interface of the {@link Player} for use in the UI.\n */\nexport interface WrappedPlayer extends PlayerAPI {\n  /**\n   * Fires an event on the player that targets all handlers in the UI but never enters the real player.\n   * @param event the event to fire\n   * @param data data to send with the event\n   */\n  fireEventInUI(event: PlayerEvent, data: {}): void;\n}\n\n/**\n * Wraps the player to track event handlers and provide a simple method to remove all registered event\n * handlers from the player.\n */\nexport class PlayerWrapper {\n\n  private player: PlayerAPI;\n  private wrapper: WrappedPlayer;\n\n  private eventHandlers: { [eventType: string]: PlayerEventCallback[]; } = {};\n\n  constructor(player: PlayerAPI) {\n    this.player = player;\n\n    // Collect all members of the player (public API methods and properties of the player)\n    const objectProtoPropertyNames = Object.getOwnPropertyNames(Object.getPrototypeOf({}));\n    const namesToIgnore = ['constructor', ...objectProtoPropertyNames];\n    const members = getAllPropertyNames(player).filter(name => namesToIgnore.indexOf(name) === -1);\n    // Split the members into methods and properties\n    let methods = <any[]>[];\n    let properties = <any[]>[];\n\n    for (let member of members) {\n      if (typeof (<any>player)[member] === 'function') {\n        methods.push(member);\n      } else {\n        properties.push(member);\n      }\n    }\n\n    // Create wrapper object\n    let wrapper = <any>{};\n\n    // Add function wrappers for all API methods that do nothing but calling the base method on the player\n    for (let method of methods) {\n      wrapper[method] = function() {\n        // console.log('called ' + member); // track method calls on the player\n        return (<any>player)[method].apply(player, arguments);\n      };\n    }\n\n    // Add all public properties of the player to the wrapper\n    for (let property of properties) {\n      // Get an eventually existing property descriptor to differentiate between plain properties and properties with\n      // getters/setters.\n      const propertyDescriptor = ((target: PlayerAPI) => {\n        while (target) {\n          const propertyDescriptor = Object.getOwnPropertyDescriptor(target, property);\n          if (propertyDescriptor) {\n            return propertyDescriptor;\n          }\n          // Check if the PropertyDescriptor exists on a child prototype in case we have an inheritance of the player\n          target = Object.getPrototypeOf(target);\n        }\n      })(player);\n\n      // If the property has getters/setters, wrap them accordingly...\n      if (propertyDescriptor && (propertyDescriptor.get || propertyDescriptor.set)) {\n        Object.defineProperty(wrapper, property, {\n          get: () => propertyDescriptor.get.call(player),\n          set: (value: any) => propertyDescriptor.set.call(player, value),\n        });\n      }\n      // ... else just transfer the property to the wrapper\n      else {\n        wrapper[property] = (<any>player)[property];\n      }\n    }\n\n    // Explicitly add a wrapper method for 'on' that adds added event handlers to the event list\n    wrapper.on = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.on(eventType, callback);\n\n      if (!this.eventHandlers[eventType]) {\n        this.eventHandlers[eventType] = [];\n      }\n\n      this.eventHandlers[eventType].push(callback);\n\n      return wrapper;\n    };\n\n    // Explicitly add a wrapper method for 'off' that removes removed event handlers from the event list\n    wrapper.off = (eventType: PlayerEvent, callback: PlayerEventCallback) => {\n      player.off(eventType, callback);\n\n      if (this.eventHandlers[eventType]) {\n        ArrayUtils.remove(this.eventHandlers[eventType], callback);\n      }\n\n      return wrapper;\n    };\n\n    wrapper.fireEventInUI = (event: PlayerEvent, data: {}) => {\n      if (this.eventHandlers[event]) { // check if there are handlers for this event registered\n        // Extend the data object with default values to convert it to a {@link PlayerEventBase} object.\n        let playerEventData = <PlayerEventBase>Object.assign({}, {\n          timestamp: Date.now(),\n          type: event,\n          // Add a marker property so the UI can detect UI-internal player events\n          uiSourced: true,\n        }, data);\n\n        // Execute the registered callbacks\n        for (let callback of this.eventHandlers[event]) {\n          callback(playerEventData);\n        }\n      }\n    };\n\n    this.wrapper = <WrappedPlayer>wrapper;\n  }\n\n  /**\n   * Returns a wrapped player object that can be used on place of the normal player object.\n   * @returns {WrappedPlayer} a wrapped player\n   */\n  getPlayer(): WrappedPlayer {\n    return this.wrapper;\n  }\n\n  /**\n   * Clears all registered event handlers from the player that were added through the wrapped player.\n   */\n  clearEventHandlers(): void {\n    try {\n      // Call the player API to check if the instance is still valid or already destroyed.\n      // This can be any call throwing the PlayerAPINotAvailableError when the player instance is destroyed.\n      this.player.getSource();\n    } catch (error) {\n      if (error instanceof this.player.exports.PlayerAPINotAvailableError) {\n        // We have detected that the player instance is already destroyed, so we clear the event handlers to avoid\n        // event handler unsubscription attempts (which would result in PlayerAPINotAvailableError errors).\n        this.eventHandlers = {};\n      }\n    }\n\n    for (let eventType in this.eventHandlers) {\n      for (let callback of this.eventHandlers[eventType]) {\n        this.player.off(eventType as PlayerEvent, callback);\n      }\n    }\n  }\n}\n\nfunction getAllPropertyNames(target: Object): string[] {\n  let names: string[] = [];\n\n  while (target) {\n    const newNames = Object.getOwnPropertyNames(target).filter(name => names.indexOf(name) === -1);\n    names = names.concat(newNames);\n    // go up prototype chain\n    target = Object.getPrototypeOf(target);\n  }\n\n  return names;\n}\n","import {Component, ComponentConfig} from './components/component';\nimport {Container} from './components/container';\n\nexport namespace UIUtils {\n  export interface TreeTraversalCallback {\n    (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>): void;\n  }\n\n  export function traverseTree(component: Component<ComponentConfig>, visit: TreeTraversalCallback): void {\n    let recursiveTreeWalker = (component: Component<ComponentConfig>, parent?: Component<ComponentConfig>) => {\n      visit(component, parent);\n\n      // If the current component is a container, visit it's children\n      if (component instanceof Container) {\n        for (let childComponent of component.getComponents()) {\n          recursiveTreeWalker(childComponent, component);\n        }\n      }\n    };\n\n    // Walk and configure the component tree\n    recursiveTreeWalker(component);\n  }\n\n  // From: https://github.com/nfriend/ts-keycode-enum/blob/master/Key.enum.ts\n  export enum KeyCode {\n    LeftArrow = 37,\n    UpArrow = 38,\n    RightArrow = 39,\n    DownArrow = 40,\n    Space = 32,\n    End = 35,\n    Home = 36,\n  }\n}\n","import { Event, EventDispatcher } from './eventdispatcher';\nimport { PlayerAPI } from 'bitmovin-player';\n\nexport interface VolumeSettingChangedArgs {\n  volume: number;\n  muted: boolean;\n}\n\n/**\n * Can be used to centrally manage and control the volume and mute state of the player from multiple components.\n */\nexport class VolumeController {\n\n  private static readonly issuerName = 'ui-volumecontroller';\n\n  private readonly events = {\n    onChanged: new EventDispatcher<VolumeController, VolumeSettingChangedArgs>(),\n  };\n\n  private storedVolume: number;\n\n  constructor(private readonly player: PlayerAPI) {\n    this.storeVolume();\n\n    const handler = () => {\n      this.onChangedEvent();\n    };\n\n    player.on(player.exports.PlayerEvent.SourceLoaded, handler);\n    player.on(player.exports.PlayerEvent.VolumeChanged, handler);\n    player.on(player.exports.PlayerEvent.Muted, handler);\n    player.on(player.exports.PlayerEvent.Unmuted, handler);\n  }\n\n  setVolume(volume: number): void {\n    this.player.setVolume(volume, VolumeController.issuerName);\n  }\n\n  getVolume(): number {\n    return this.player.getVolume();\n  }\n\n  setMuted(muted: boolean): void {\n    if (muted) {\n      this.player.mute(VolumeController.issuerName);\n    } else {\n      this.player.unmute(VolumeController.issuerName);\n    }\n  }\n\n  toggleMuted(): void {\n    if (this.isMuted() || this.getVolume() === 0) {\n      // Unmuting from the mute or zero-volume state recalls the previously saved volume setting. Setting the\n      // volume automatically unmutes the player in v7.\n      this.recallVolume();\n    } else {\n      this.setMuted(true);\n    }\n  }\n\n  isMuted(): boolean {\n    return this.player.isMuted();\n  }\n\n  /**\n   * Stores (saves) the current volume so it can later be restored with {@link recallVolume}.\n   */\n  storeVolume(): void {\n    this.storedVolume = this.getVolume();\n  }\n\n  /**\n   * Recalls (sets) the volume previously stored with {@link storeVolume}.\n   */\n  recallVolume(): void {\n    this.setMuted(this.storedVolume === 0);\n    this.setVolume(this.storedVolume);\n  }\n\n  startTransition(): VolumeTransition {\n    return new VolumeTransition(this);\n  }\n\n  onChangedEvent() {\n    const playerMuted = this.isMuted();\n    const playerVolume = this.getVolume();\n\n    const uiMuted = playerMuted || playerVolume === 0;\n    const uiVolume = playerMuted ? 0 : playerVolume;\n\n    this.events.onChanged.dispatch(this, { volume: uiVolume, muted: uiMuted });\n  }\n\n  /**\n   * Gets the event that is fired when the volume settings have changed.\n   */\n  get onChanged(): Event<VolumeController, VolumeSettingChangedArgs> {\n    return this.events.onChanged.getEvent();\n  }\n}\n\nexport class VolumeTransition {\n\n  constructor(private controller: VolumeController) {\n    // Store the volume at the beginning of a volume change so we can recall it later in case we set the volume to\n    // zero and actually mute the player.\n    controller.storeVolume();\n  }\n\n  update(volume: number): void {\n    // Update the volume while transitioning so the user has a \"live preview\" of the desired target volume\n    this.controller.setMuted(false);\n    this.controller.setVolume(volume);\n  }\n\n  finish(volume: number): void {\n    if (volume === 0) {\n      // When the volume is zero we essentially mute the volume so we recall the volume from the beginning of the\n      // transition and mute the player instead. Recalling is necessary to return to the actual audio volume\n      // when unmuting.\n      // We must first recall the volume and then mute, because recalling sets the volume on the player\n      // and setting a player volume > 0 unmutes the player in v7.\n      this.controller.recallVolume();\n      this.controller.setMuted(true);\n    } else {\n      this.controller.setMuted(false);\n      this.controller.setVolume(volume);\n      this.controller.storeVolume();\n    }\n  }\n}","import { SubtitleRegionContainer, SubtitleLabel } from './components/subtitleoverlay';\nimport { VTTProperties, VTTRegionProperties } from 'bitmovin-player/types/subtitles/vtt/API';\nimport { DOM, Size } from './dom';\n\n// Our default height of a line\nconst lineHeight = 28;\nconst defaultLineNumber = 21; // Our default amount of lines\n\nenum Direction {\n  Top = 'top',\n  Bottom = 'bottom',\n  Left = 'left',\n  Right = 'right',\n}\n\nconst DirectionPair = new Map<Direction, Direction>([\n  [Direction.Top, Direction.Bottom],\n  [Direction.Left, Direction.Right],\n  [Direction.Right, Direction.Left],\n]);\n\n/**\n * Sets the default standardized styles for the Cue Box\n * https://w3.org/TR/webvtt1/#applying-css-properties\n */\nconst setDefaultVttStyles = (cueContainerDom: DOM, vtt: VTTProperties) => {\n  if (vtt.region) {\n    cueContainerDom.css('position', 'relative');\n    cueContainerDom.css('unicode-bidi', 'plaintext');\n  } else {\n    cueContainerDom.css('position', 'absolute');\n    cueContainerDom.css('overflow-wrap', 'break-word');\n    cueContainerDom.css('overflow', 'hidden');\n    cueContainerDom.css('flex-flow', 'column');\n  }\n  cueContainerDom.css('display', 'inline-flex');\n};\n\n/**\n * Align the Cue Box's line\n * https://w3.org/TR/webvtt1/#webvtt-cue-line-alignment\n */\nconst setVttLineAlign = (cueContainerDom: DOM, { lineAlign }: VTTProperties, direction: Direction) => {\n  switch (lineAlign) {\n    case 'center':\n      cueContainerDom.css(`margin-${direction}`, `${-lineHeight / 2}px`);\n      break;\n    case 'end':\n      cueContainerDom.css(`margin-${direction}`, `${-lineHeight}px`);\n  }\n};\n\n/**\n * Defines the line positioning of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-line\n */\nconst setVttLine = (\n  cueContainerDom: DOM,\n  vtt: VTTProperties,\n  direction: Direction,\n  subtitleOverLaySize: Size,\n) => {\n  if (vtt.line === 'auto') {\n    return;\n  }\n\n  let relativeLinePosition = parseFloat(vtt.line as string);\n\n  if (vtt.snapToLines) {\n    let targetLine = Number(vtt.line);\n    if (targetLine < 0) {\n      targetLine = defaultLineNumber + targetLine;\n    }\n\n    const lineHeight = subtitleOverLaySize.height / defaultLineNumber;\n    const absoluteLinePosition = lineHeight * targetLine;\n    relativeLinePosition = (100 * absoluteLinePosition) / subtitleOverLaySize.height;\n  }\n\n  cueContainerDom.css(direction, `${relativeLinePosition}%`);\n  setVttLineAlign(cueContainerDom, vtt, direction);\n};\n\n/**\n * Defines the writing direction of the Cue Box\n * https://w3.org/TR/webvtt1/#webvtt-cue-writing-direction\n */\nconst setVttWritingDirection = (\n  cueContainerDom: DOM, vtt: VTTProperties,\n  subtitleOverlaySize: Size,\n) => {\n  if (vtt.vertical === '') {\n    cueContainerDom.css('writing-mode', 'horizontal-tb');\n    cueContainerDom.css(Direction.Bottom, '0');\n    setVttLine(cueContainerDom, vtt, Direction.Top, subtitleOverlaySize);\n  } else if (vtt.vertical === 'lr') {\n    cueContainerDom.css('writing-mode', 'vertical-lr');\n    cueContainerDom.css(Direction.Right, '0');\n    cueContainerDom.css(Direction.Top, '0');\n    setVttLine(cueContainerDom, vtt, Direction.Right, subtitleOverlaySize);\n  } else if (vtt.vertical === 'rl') {\n    cueContainerDom.css('writing-mode', 'vertical-rl');\n    cueContainerDom.css(Direction.Left, '0');\n    cueContainerDom.css(Direction.Top, '0');\n    setVttLine(cueContainerDom, vtt, Direction.Left, subtitleOverlaySize);\n  }\n};\n\n/**\n * Defines the Cue position alignment\n * https://w3.org/TR/webvtt1/#webvtt-cue-position-alignment\n */\nconst setVttPositionAlign = (cueContainerDom: DOM, vtt: VTTProperties, direction: Direction) => {\n  // https://www.w3.org/TR/webvtt1/#webvtt-cue-position\n  if (vtt.position === 'auto') {\n    cueContainerDom.css(direction, '0');\n  } else {\n    switch (vtt.positionAlign) {\n      case 'line-left':\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'flex-start');\n        break;\n      case 'center':\n        cueContainerDom.css(direction, `${vtt.position - vtt.size / 2}%`);\n        cueContainerDom.css(DirectionPair.get(direction), 'auto');\n        cueContainerDom.css('justify-content', 'center');\n        break;\n      case 'line-right':\n        cueContainerDom.css(direction, 'auto');\n        cueContainerDom.css(DirectionPair.get(direction), `${100 - vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-end');\n        break;\n      default:\n        cueContainerDom.css(direction, `${vtt.position}%`);\n        cueContainerDom.css('justify-content', 'flex-start');\n    }\n  }\n};\n\nexport namespace VttUtils {\n  export const setVttCueBoxStyles = (\n    cueContainer: SubtitleLabel,\n    subtitleOverlaySize: Size,\n  ) => {\n    const vtt = cueContainer.vtt;\n    const cueContainerDom = cueContainer.getDomElement();\n\n    setDefaultVttStyles(cueContainerDom, vtt);\n    setVttWritingDirection(cueContainerDom, vtt, subtitleOverlaySize);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-text-alignment\n    const textAlign = vtt.align === 'middle' ? 'center' : vtt.align;\n    cueContainerDom.css('text-align', textAlign);\n\n    // https://w3.org/TR/webvtt1/#webvtt-cue-size\n    const containerSize = vtt.size;\n    if (vtt.vertical === '') {\n      cueContainerDom.css('width', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Left);\n    } else {\n      cueContainerDom.css('height', `${containerSize}%`);\n      setVttPositionAlign(cueContainerDom, vtt, Direction.Top);\n    }\n  };\n\n  /** https://www.w3.org/TR/webvtt1/#regions\n   *  https://www.speechpad.com/captions/webvtt#toc_16\n   */\n  export const setVttRegionStyles = (\n    regionContainer: SubtitleRegionContainer,\n    region: VTTRegionProperties,\n    overlaySize: Size,\n  ) => {\n    const regionContainerDom = regionContainer.getDomElement();\n    const regionPositionX = overlaySize.width * region.viewportAnchorX / 100 - ((overlaySize.width * region.width / 100) * region.regionAnchorX / 100);\n    const regionPositionY = overlaySize.height * region.viewportAnchorY / 100 - ((region.lines * lineHeight) * region.regionAnchorY / 100);\n    regionContainerDom.css('position', 'absolute');\n    regionContainerDom.css('overflow', 'hidden');\n    regionContainerDom.css('width', `${region.width}%`);\n    regionContainerDom.css(Direction.Left, `${regionPositionX}px`);\n    regionContainerDom.css(Direction.Right, 'unset');\n    regionContainerDom.css(Direction.Top, `${regionPositionY}px`);\n    regionContainerDom.css(Direction.Bottom, 'unset');\n    regionContainerDom.css('height', `${region.lines * lineHeight}px`);\n  };\n}\n"]}